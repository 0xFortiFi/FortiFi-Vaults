{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] -= amounts[i];\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/fee-calculators/FortiFiFeeCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiFeeCalculator by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by mismatching array lengths\r\nerror InvalidArrayLength();\r\n\r\n/// @notice Error caused when bps does not equal 10_000\r\nerror InvalidBps();\r\n\r\n/// @notice Error caused NFT amounts array is invalid\r\nerror InvalidAmounts();\r\n\r\n/// @title Contract to calculate fees for FortiFi Vaults\r\n/// @notice This contract is used by FortiFi Vaults to calculate fees based on a user's NFT holdings. \r\n/// @dev When combineNftHoldings is true the contract will combine the user's balance across all NFT\r\n/// contracts in the nftContracts array when determining fees. Otherwise, the contract will only take \r\n/// the user's highest balance out of the nftContracts.\r\ncontract FortiFiFeeCalculator is IFortiFiFeeCalculator, Ownable {\r\n\r\n    uint16 public constant BPS = 10_000;\r\n    bool public combineNftHoldings;\r\n    uint8[] public tokenAmounts;\r\n    uint16[] public thresholdBps;\r\n    address[] public nftContracts;\r\n    \r\n    constructor(address[] memory _nftContracts,\r\n                uint8[] memory _tokenAmounts,\r\n                uint16[] memory _thresholdBps,\r\n                bool _combineHoldings) {\r\n\r\n        setFees(_nftContracts, _tokenAmounts, _thresholdBps);\r\n        combineNftHoldings = _combineHoldings;\r\n    }\r\n\r\n    event FeesSet(address[] nftContracts, uint8[] tokenAmounts, uint16[] thresholdBps);\r\n    event CombineNftsSet(bool combine);\r\n\r\n    /// @notice Function to determine fees due based on a user's NFT holdings and amount of profit\r\n    function getFees(address _user, uint256 _amount) external view override returns(uint256) {\r\n        if (combineNftHoldings) {\r\n            return _getCombinedFees(_user, _amount);\r\n        } \r\n\r\n        return _getFees(_user, _amount);\r\n    }\r\n\r\n    /// @notice Function to set new values for NFT contracts, threshold amounts, and thresholdBps\r\n    /// @dev Each amount in _tokenAmounts must have a corresponding bps value in _thresholdBps. Bps values should \r\n    /// decrease at each index, and token amounts should increase at each index. This maintains that the more NFTs\r\n    /// a user holds, the lower the fee bps.\r\n    function setFees(address[] memory _nftContracts, uint8[] memory _tokenAmounts, uint16[] memory _thresholdBps) public onlyOwner {\r\n        uint256 _length = _nftContracts.length;\r\n        if (_length == 0) revert InvalidArrayLength();\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_nftContracts[i] == address(0)) revert ZeroAddress();\r\n        }\r\n\r\n        if (_tokenAmounts.length != _thresholdBps.length ||\r\n                !_validateAmountsAndBps(_tokenAmounts, _thresholdBps)) revert InvalidArrayLength();\r\n        \r\n        nftContracts = _nftContracts;\r\n        tokenAmounts = _tokenAmounts;\r\n        thresholdBps = _thresholdBps;\r\n\r\n        emit FeesSet(_nftContracts, _tokenAmounts, _thresholdBps);\r\n    }\r\n\r\n    /// @notice Function to set combineNFTHoldings state variable. \r\n    /// @dev When true, holdings across all specified collections in nftContracts will be combined to set the\r\n    /// NFT count that is used when determining the _feeBps in _getFees.\r\n    function setCombine(bool _bool) external onlyOwner {\r\n        combineNftHoldings = _bool;\r\n        emit CombineNftsSet(_bool);\r\n    }\r\n\r\n    /// @notice Validate that arrays meet specifications\r\n    function _validateAmountsAndBps(uint8[] memory _amounts, uint16[] memory _bps) internal pure returns(bool) {\r\n        if (_amounts.length == 0 ||\r\n                _amounts[0] != 0) revert InvalidAmounts();\r\n        uint256 _length = _bps.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (i > 0) {\r\n                if (_bps[i] >= _bps[i-1]) revert InvalidBps();\r\n                if (_amounts[i] <= _amounts[i-1]) revert InvalidAmounts();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get fees for user\r\n    function _getFees(address _user, uint256 _amount) internal view returns (uint256) {\r\n        uint256 _length = nftContracts.length;\r\n        uint256 _amountLength = tokenAmounts.length;\r\n        uint16 _feeBps = thresholdBps[0];\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            IERC721 _nft = IERC721(nftContracts[i]);\r\n            uint256 _balance = _nft.balanceOf(_user);\r\n\r\n            if (_balance > 0) {\r\n                for (uint256 j = 1; j < _amountLength; j++) {\r\n                    if (_balance < tokenAmounts[j]) {\r\n                        uint16 _bps = thresholdBps[j - 1];\r\n                        if (_bps < _feeBps) {\r\n                            _feeBps = _bps;\r\n                        }\r\n                        break;\r\n                    } else if (_balance == tokenAmounts[j] || j == (_amountLength - 1)) {\r\n                        uint16 _bps = thresholdBps[j];\r\n                        if (_bps < _feeBps) {\r\n                            _feeBps = _bps;\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n        }\r\n\r\n        // return 0 fee if amount is too small\r\n        if (_amount * _feeBps < BPS) {\r\n            return 0;\r\n        }\r\n\r\n        return _amount * _feeBps / BPS;\r\n    }\r\n\r\n    /// @notice Get fees for user when combineNFTHoldings is true.\r\n    function _getCombinedFees(address _user, uint256 _amount) internal view returns (uint256) {\r\n        uint256 _length = nftContracts.length;\r\n        uint256 _amountLength = tokenAmounts.length;\r\n        uint256 _balance = 0;\r\n        uint16 _feeBps = thresholdBps[0];\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            IERC721 _nft = IERC721(nftContracts[i]);\r\n            _balance += _nft.balanceOf(_user);\r\n        }\r\n\r\n        if (_balance > 0) {\r\n            for (uint256 j = 1; j < _amountLength; j++) {\r\n                if (_balance < tokenAmounts[j]) {\r\n                    uint16 _bps = thresholdBps[j - 1];\r\n                    if (_bps < _feeBps) {\r\n                        _feeBps = _bps;\r\n                    }\r\n                    break;\r\n                } else if (_balance == tokenAmounts[j] || j == (_amountLength - 1)) {\r\n                    uint16 _bps = thresholdBps[j];\r\n                    if (_bps < _feeBps) {\r\n                        _feeBps = _bps;\r\n                    }\r\n                }\r\n            }\r\n        } \r\n\r\n        // return 0 fee if amount is too small\r\n        if (_amount * _feeBps < BPS) {\r\n            return 0;\r\n        }\r\n\r\n        return _amount * _feeBps / BPS;\r\n    }\r\n}"
    },
    "contracts/fee-calculators/interfaces/IFortiFiFeeCalculator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IFortiFiFeeCalculator Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFiFeeCalculator\r\ninterface IFortiFiFeeCalculator {\r\n    function getFees(address user, uint256 amount) external view returns(uint256);\r\n}"
    },
    "contracts/fee-managers/FortiFiFeeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiFeeManager by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../fee-managers/interfaces/IFortiFiFeeManager.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by mismatching array lengths\r\nerror InvalidArrayLength();\r\n\r\n/// @notice Error caused when bps does not equal 10_000\r\nerror InvalidBps();\r\n\r\n/// @title Contract to distribute fees for FortiFi Vaults\r\n/// @notice This contract is used by FortiFi Vaults to distribute fees earned upon withdrawal.\r\n/// @dev Fees will only be disbursed when the contract holds at least 1000 wei of the token being \r\n/// disbursed. This way the contract does not fail when splitting the amount amongst multiple receivers.\r\ncontract FortiFiFeeManager is IFortiFiFeeManager, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint16 public constant BPS = 10_000;\r\n    uint16[] public splitBps;\r\n    address[] public receivers;\r\n\r\n    constructor(address[] memory _receivers,\r\n                uint16[] memory _splitBps) {\r\n\r\n        setSplit(_receivers, _splitBps);\r\n    }\r\n\r\n    event FeesCollected(uint256 amount, address[] receivers, uint16[] split);\r\n    event FeesChanged(address[] receivers, uint16[] split);\r\n    event ERC20Recovered(address token, uint amount);\r\n\r\n    /// @notice Function to collect fees from payer\r\n    function collectFees(address _token, uint256 _amount) external override {\r\n        IERC20 _t = IERC20(_token);\r\n        _t.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        uint256 _feeBalance = _t.balanceOf(address(this));\r\n        if (_feeBalance >= 1000) {\r\n            uint256 _length = receivers.length;\r\n            for (uint256 i = 0; i < _length; i++) {\r\n                if (i == (_length - 1)) {\r\n                    _t.safeTransfer(receivers[i], _t.balanceOf(address(this)));\r\n                } else {\r\n                    uint256 _share = _feeBalance * splitBps[i] / BPS;\r\n                    _t.safeTransfer(receivers[i], _share);\r\n                }\r\n            }\r\n        }\r\n\r\n        emit FeesCollected(_amount, receivers, splitBps);\r\n    }\r\n\r\n    /// @notice Function to set new receivers\r\n    /// @dev This function replaces the current receivers and splitBps. Total bps must equal 10_000\r\n    function setSplit(address[] memory _receivers, uint16[] memory _splitBps) public onlyOwner {\r\n        uint256 _length = _receivers.length;\r\n        if (_length == 0) revert InvalidArrayLength();\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_receivers[i] == address(0)) revert ZeroAddress();\r\n        }\r\n\r\n        if (_length != _splitBps.length || !_validateBps(_splitBps)) revert InvalidArrayLength();\r\n        \r\n        receivers = _receivers;\r\n        splitBps = _splitBps;\r\n\r\n        emit FeesChanged(receivers, splitBps);\r\n    }\r\n\r\n    /// @notice Validate that total bps in aray equals 10_000\r\n    function _validateBps(uint16[] memory _bps) internal pure returns(bool) {\r\n        uint256 _length = _bps.length;\r\n        uint16 _totalBps = 0;\r\n        \r\n        for (uint256 i = 0; i < _length; i++) {\r\n            uint16 _b = _bps[i];\r\n            if (_b <= 9) revert InvalidBps();\r\n            _totalBps += _b;\r\n        }\r\n\r\n        if (_totalBps != BPS) revert InvalidBps();\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck ERC20 tokens\r\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        emit ERC20Recovered(_token, _amount);\r\n    }\r\n\r\n}"
    },
    "contracts/fee-managers/interfaces/IFortiFiFeeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IFortiFiFeeManager Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFiFeeManager\r\ninterface IFortiFiFeeManager {\r\n    function collectFees(address token, uint256 amount) external;\r\n}"
    },
    "contracts/mock/FortiFiMASSVaultNoSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiMASSVault by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../strategies/interfaces/IStrategy.sol\";\r\nimport \"../strategies/interfaces/IVectorStrategy.sol\";\r\nimport \"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\";\r\nimport \"../fee-managers/interfaces/IFortiFiFeeManager.sol\";\r\nimport \"../vaults/interfaces/IMASS.sol\";\r\nimport \"../vaults/interfaces/ISAMS.sol\";\r\nimport \"../vaults/interfaces/IRouter.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by trying to set a strategy more than once\r\nerror DuplicateStrategy();\r\n\r\n/// @notice Error caused by trying to set too many strategies\r\nerror TooManyStrategies();\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by trying to deposit 0\r\nerror InvalidDeposit();\r\n\r\n/// @notice Error caused by trying to withdraw 0\r\nerror InvalidWithdrawal();\r\n\r\n/// @notice Error caused by trying to use a token not owned by user\r\nerror NotTokenOwner();\r\n\r\n/// @notice Error thrown when refunding native token fails\r\nerror FailedToRefund();\r\n\r\n/// @notice Error caused when strategies array is empty\r\nerror NoStrategies();\r\n\r\n/// @notice Error caused when strategies change and a receipt cannot be added to without rebalancing\r\nerror CantAddToReceipt();\r\n\r\n/// @notice Error caused when swap fails\r\nerror SwapFailed();\r\n\r\n/// @notice Error caused when trying to use a token with less decimals than USDC\r\nerror InvalidDecimals();\r\n\r\n/// @notice Error caused when trying to set oracle to an invalid address\r\nerror InvalidOracle();\r\n\r\n/// @notice Error caused by trying to set minDeposit below BPS\r\nerror InvalidMinDeposit();\r\n\r\n/// @notice Error caused by trying to set a slippage too high\r\nerror InvalidSlippage();\r\n\r\n/// @notice Error caused by mismatching array lengths\r\nerror InvalidArrayLength();\r\n\r\n/// @notice Error caused when bps does not equal 10_000\r\nerror InvalidBps();\r\n\r\n/// @notice Error caused when trying to transact with contract while paused\r\nerror ContractPaused();\r\n\r\n/// @title Contract for FortiFi MASS Vaults\r\n/// @notice This contract allows for the deposit of a single asset, which is then swapped into various assets and deposited in to \r\n/// multiple yield-bearing strategies. \r\n/// @dev THIS IS A TEST CONTRACT WITH NO SWAP FEATURE FOR BASIC TESTING - DO NOT DEPLOY\r\ncontract FortiFiMASSVaultNoSwap is IMASS, ERC1155Supply, IERC1155Receiver, Ownable, ReentrancyGuard {\r\n    string public name;\r\n    string public symbol;\r\n    address public depositToken;\r\n    address public wrappedNative;\r\n    uint8 public constant DECIMALS = 6; // USDC ONLY\r\n    uint16 public constant BPS = 10_000;\r\n    uint16 public slippageBps = 100;\r\n    uint256 public minDeposit = 30_000;\r\n    uint256 public nextToken = 1;\r\n    bool public paused = true;\r\n\r\n    IFortiFiFeeCalculator public feeCalc;\r\n    IFortiFiFeeManager public feeMgr;\r\n\r\n    Strategy[] public strategies;\r\n\r\n    mapping(uint256 => TokenInfo) public tokenInfo;\r\n\r\n    event Deposit(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Add(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Rebalance(uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Withdrawal(address indexed depositor, uint256 indexed tokenId, uint256 amountWithdrawn, uint256 profit, uint256 fee);\r\n\r\n    /// @notice Used to restrict function access while paused.\r\n    modifier whileNotPaused() {\r\n        if (paused) revert ContractPaused();\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name, \r\n        string memory _symbol, \r\n        string memory _metadata,\r\n        address _wrappedNative,\r\n        address _depositToken,\r\n        address _feeManager,\r\n        address _feeCalculator,\r\n        Strategy[] memory _strategies) ERC1155(_metadata) {\r\n        if (_wrappedNative == address(0)) revert ZeroAddress();\r\n        if (_depositToken == address(0)) revert ZeroAddress();\r\n        if (_feeManager == address(0)) revert ZeroAddress();\r\n        if (_feeCalculator == address(0)) revert ZeroAddress();\r\n        name = _name; \r\n        symbol = _symbol;\r\n        wrappedNative = _wrappedNative;\r\n        depositToken = _depositToken;\r\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\r\n        feeMgr = IFortiFiFeeManager(_feeManager);\r\n        setStrategies(_strategies);\r\n    }\r\n\r\n    receive() external payable { \r\n    }\r\n\r\n    /// @notice This function is used when a user does not already have a receipt (ERC1155). \r\n    /// @dev The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token. \r\n    /// The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt \r\n    /// tokens received for later withdrawal.\r\n    function deposit(uint256 _amount) external override nonReentrant whileNotPaused returns(uint256 _tokenId, TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20 _depositToken = IERC20(depositToken);\r\n        require(_depositToken.transferFrom(msg.sender, address(this), _amount), \"FortiFi: Failed to xfer deposit\");\r\n        _tokenId = _mintReceipt();\r\n        _deposit(_amount, _tokenId, false);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Deposit(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their \r\n    /// deposit without needing to burn/withdraw first. \r\n    function add(uint256 _amount, uint256 _tokenId) external override nonReentrant whileNotPaused returns(TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20 _depositToken = IERC20(depositToken);\r\n        require(_depositToken.transferFrom(msg.sender, address(this), _amount), \"FortiFi: Failed to xfer deposit\");\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _deposit(_amount, _tokenId, true);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Add(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. \r\n    /// @dev Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due, \r\n    /// and the fee manager will distribute those fees before transfering the user their proceeds.\r\n    function withdraw(uint256 _tokenId) external override nonReentrant whileNotPaused {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _burn(msg.sender, _tokenId, 1);\r\n\r\n        (uint256 _amount, uint256 _profit) = _withdraw(_tokenId);\r\n        uint256 _fee = feeCalc.getFees(msg.sender, _profit);\r\n        feeMgr.collectFees(depositToken, _fee);\r\n         \r\n        require(IERC20(depositToken).transfer(msg.sender, _amount - _fee), \"FortiFi: Failed to send proceeds\");\r\n\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n\r\n        emit Withdrawal(msg.sender, _tokenId, _amount, _profit, _fee);\r\n    }\r\n\r\n    function setMinDeposit(uint256 _amount) external onlyOwner {\r\n        minDeposit = _amount;\r\n    }\r\n\r\n    function setSlippage(uint16 _amount) external onlyOwner {\r\n        slippageBps = _amount;\r\n    }\r\n\r\n    function setFeeManager(address _contract) external onlyOwner {\r\n        feeMgr = IFortiFiFeeManager(_contract);\r\n    }\r\n\r\n    function setFeeCalculator(address _contract) external onlyOwner {\r\n        feeCalc = IFortiFiFeeCalculator(_contract);\r\n    }\r\n\r\n    function flipPaused() external onlyOwner {\r\n        paused = !paused;\r\n    }\r\n\r\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function recoverERC1155(address _token, uint256[] calldata _tokenIds, uint256[] calldata _amounts) external onlyOwner {\r\n        IERC1155(_token).safeBatchTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenIds,\r\n            _amounts,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /// @notice Function to set max approvals for router and strategies. \r\n    /// @dev Since contract never holds deposit tokens max approvals should not matter. \r\n    function refreshApprovals() public {\r\n        uint256 _length = strategies.length;\r\n        IERC20 _depositToken = IERC20(depositToken);\r\n\r\n        IERC20(depositToken).approve(address(feeMgr), type(uint256).max);\r\n        for(uint256 i = 0; i < _length; i++) {\r\n            IERC20(strategies[i].depositToken).approve(strategies[i].strategy, type(uint256).max);\r\n            IERC20(strategies[i].depositToken).approve(strategies[i].router, type(uint256).max);\r\n            _depositToken.approve(strategies[i].router, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    /// @notice This function sets up the underlying strategies used by the vault.\r\n    function setStrategies(Strategy[] memory _strategies) public onlyOwner {\r\n        uint256 _length = _strategies.length;\r\n        if (_length == 0) revert NoStrategies();\r\n\r\n        address[] memory _holdStrategies = new address[](_length);\r\n\r\n        uint16 _bps = 0;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            _bps += _strategies[i].bps;\r\n        }\r\n        if (_bps != BPS) revert InvalidBps();\r\n\r\n        delete strategies; // remove old array, if any\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_strategies[i].strategy == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].depositToken == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].router == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].oracle == address(0) &&\r\n                    _strategies[i].depositToken != depositToken) revert InvalidOracle();\r\n            if (_strategies[i].decimals <= DECIMALS &&\r\n                    _strategies[i].depositToken != depositToken) revert InvalidDecimals();\r\n            for (uint256 j = 0; j < i; j++) {\r\n                if (_holdStrategies[j] == _strategies[i].strategy) revert DuplicateStrategy();\r\n            }\r\n            _holdStrategies[i] = _strategies[i].strategy;\r\n            strategies.push(_strategies[i]);\r\n        }\r\n\r\n        refreshApprovals();\r\n    }\r\n\r\n    /// @notice This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. \r\n    /// @dev This function utilizes the internal _deposit and _withdraw functions to rebalance based on \r\n    /// the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total \r\n    /// deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo\r\n    /// before completing the transaction.\r\n    function rebalance(uint256 _tokenId) public override nonReentrant whileNotPaused returns(TokenInfo memory) {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        uint256 _originalDeposit = tokenInfo[_tokenId].deposit;\r\n        (uint256 _amount, ) = _withdraw(_tokenId);\r\n        delete tokenInfo[_tokenId];\r\n        _deposit(_amount, _tokenId, false);\r\n        tokenInfo[_tokenId].deposit = _originalDeposit;\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Rebalance(_tokenId, _amount, _info);\r\n        return _info;\r\n    }\r\n\r\n    /// @notice View function that returns all strategies\r\n    function getStrategies() public view override returns(Strategy[] memory) {\r\n        return strategies;\r\n    }\r\n\r\n    function _mintReceipt() internal returns(uint256 _tokenId) {\r\n        _tokenId = nextToken;\r\n        _mint(msg.sender, _tokenId, 1, \"\");\r\n        nextToken += 1;\r\n    }\r\n\r\n    /// @notice Internal swap function for deposits.\r\n    function _swapFromDepositToken(uint256 _amount, Strategy memory _strat) internal returns(uint256) {\r\n        return _amount; \r\n    }\r\n\r\n    /// @notice Internal swap function for withdrawals.\r\n\r\n    function _swapToDepositToken(uint256 _amount, Strategy memory _strat) internal returns(uint256) {\r\n        return _amount; \r\n    }\r\n\r\n    /// @notice Internal deposit function.\r\n    /// @dev This function will loop through the strategies in order split/swap/deposit the user's deposited tokens. \r\n    /// The function handles additions slightly differently, requiring that the current strategies match the \r\n    /// strategies that were set at the time of original deposit. \r\n    function _deposit(uint256 _amount, uint256 _tokenId, bool _isAdd) internal {\r\n        TokenInfo storage _info = tokenInfo[_tokenId];\r\n        uint256 _remainder = _amount;\r\n\r\n        uint256 _length = strategies.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            Strategy memory _strategy = strategies[i];\r\n\r\n            // cannot add to deposit if strategies have changed. must rebalance first\r\n            if (_isAdd) {\r\n                if (_strategy.strategy != _info.positions[i].strategy.strategy) revert CantAddToReceipt();\r\n            }\r\n            \r\n            bool _isSAMS = _strategy.isSAMS;\r\n            uint256 _receiptToken = 0;\r\n            uint256 _depositAmount = 0;\r\n\r\n            // split deposit and swap if necessary\r\n            if (i == (_length - 1)) {\r\n                if (depositToken != _strategy.depositToken) {\r\n                    _depositAmount = _swapFromDepositToken(_remainder, _strategy);\r\n                } else {\r\n                    _depositAmount = _remainder;\r\n                }    \r\n            } else {\r\n                uint256 _split = _amount * _strategy.bps / BPS;\r\n                if (depositToken != _strategy.depositToken) {\r\n                    _depositAmount = _swapFromDepositToken(_split, _strategy);\r\n                } else {\r\n                    _depositAmount = _split;\r\n                }    \r\n                _remainder -= _split;\r\n            }\r\n            \r\n            if (_isSAMS) {\r\n                if (_isAdd) {\r\n                    _addSAMS(_depositAmount, _strategy.strategy, _info.positions[i].receipt);\r\n                } else {\r\n                    // if position is new, deposit and push to positions\r\n                    _receiptToken = _depositSAMS(_depositAmount, _strategy.strategy);\r\n                    _info.positions.push(Position({strategy: _strategy, receipt: _receiptToken}));\r\n                }\r\n            } else {\r\n                IStrategy _strat = IStrategy(_strategy.strategy);\r\n\r\n                // set current receipt balance\r\n                uint256 _receiptBalance = _strat.balanceOf(address(this));\r\n\r\n                // deposit based on type of strategy\r\n                if (_strategy.isFortiFi) {\r\n                    _strat.depositToFortress(_depositAmount, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.deposit(_depositAmount);\r\n                }\r\n\r\n                if (_isAdd) {\r\n                    _info.positions[i].receipt += _strat.balanceOf(address(this)) - _receiptBalance;\r\n                } else {\r\n                    _info.positions.push(Position({strategy: _strategy, receipt: _strat.balanceOf(address(this)) - _receiptBalance}));\r\n                }\r\n            }\r\n        }\r\n\r\n        _info.deposit += _amount;\r\n    }\r\n\r\n    function _depositSAMS(uint256 _amount, address _strategy) internal returns (uint256 _receiptToken) {\r\n        ISAMS _sams = ISAMS(_strategy);\r\n        ISAMS.TokenInfo memory _receiptInfo;\r\n\r\n        (_receiptToken, _receiptInfo) = _sams.deposit(_amount);\r\n    }\r\n\r\n    function _addSAMS(uint256 _amount, address _strategy, uint256 _tokenId) internal {\r\n        ISAMS _sams = ISAMS(_strategy);\r\n        ISAMS.TokenInfo memory _receiptInfo;\r\n\r\n        _receiptInfo = _sams.add(_amount, _tokenId);\r\n    }\r\n\r\n    /// @notice Internal withdraw function that withdraws from strategies and calculates profits.\r\n    function _withdraw(uint256 _tokenId) internal returns(uint256 _proceeds, uint256 _profit) {\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n        uint256 _length = _info.positions.length;\r\n        _proceeds = 0;\r\n\r\n        for (uint256 i = 0 ; i < _length; i++) {\r\n            // withdraw based on the type of underlying strategy, if not SAMS check if FortiFi strategy\r\n            if (_info.positions[i].strategy.isSAMS) {\r\n                ISAMS _strat = ISAMS(_info.positions[i].strategy.strategy);\r\n                _strat.withdraw(_info.positions[i].receipt);\r\n            } else {\r\n                IStrategy _strat = IStrategy(_info.positions[i].strategy.strategy);\r\n                if (_info.positions[i].strategy.isFortiFi) {\r\n                    _strat.withdrawFromFortress(_info.positions[i].receipt, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.withdraw(_info.positions[i].receipt);\r\n                }\r\n            }\r\n\r\n            // swap out for deposit tokens \r\n            uint256 _depositTokenProceeds = IERC20(_info.positions[i].strategy.depositToken).balanceOf(address(this));\r\n            _swapToDepositToken(_depositTokenProceeds, _info.positions[i].strategy);\r\n        }\r\n\r\n        _proceeds = IERC20(depositToken).balanceOf(address(this));\r\n\r\n        if (_proceeds > _info.deposit) {\r\n            _profit = _proceeds - _info.deposit;\r\n        } else {\r\n            _profit = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function to refund left over tokens from deposit/add/rebalance transactions\r\n    function _refund(TokenInfo memory _info) internal {\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = IERC20(depositToken).balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _info.deposit -= _depositTokenBalance;\r\n            require(IERC20(depositToken).transfer(msg.sender, _depositTokenBalance), \"FortiFi: Failed to refund ERC20\");\r\n        }\r\n\r\n        // Refund left over wrapped native tokens, if any\r\n        uint256 _wrappedNativeTokenBalance = IERC20(wrappedNative).balanceOf(address(this));\r\n        if (_wrappedNativeTokenBalance > 0) {\r\n            require(IERC20(wrappedNative).transfer(msg.sender, _wrappedNativeTokenBalance), \"FortiFi: Failed to refund native\");\r\n        }\r\n\r\n        // Refund left over native tokens, if any\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n}"
    },
    "contracts/mock/MockBasicStrat.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\n/// @title A basic mock strategy contract\r\n/// @notice You can use this contract for only the most basic simulation since this contract\r\n/// does not keep track of deposits. \r\n/// @dev This contract is meant to mimic Yield Yak and other strategy contracts that \r\n/// allows for simple deposit and withdrawal. see: https://snowtrace.io/address/0xc8ceea18c2e168c6e767422c8d144c55545d23e9#code\r\ncontract MockBasicStrat is ERC20 {\r\n    IERC20 depositToken;\r\n\r\n    constructor(address _depositToken) ERC20(\"Mock Basic Strategy\", \"RECEIPT\"){\r\n        depositToken = IERC20(_depositToken);\r\n    }\r\n\r\n    function deposit(uint256 amount) external {\r\n        depositToken.transferFrom(msg.sender, address(this), amount);\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n        depositToken.transfer(msg.sender, getDepositTokensForShares(amount));\r\n    }\r\n\r\n    function getDepositTokensForShares(uint256 amount) internal view returns(uint256) {\r\n        uint256 _depositBalance = depositToken.balanceOf(address(this));\r\n        uint256 _supply = totalSupply() + amount;\r\n\r\n        if (_supply > 0) {\r\n            return amount * _depositBalance / _supply;\r\n        } \r\n\r\n        return 0;\r\n    }\r\n\r\n}"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.21;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n\r\n/// @title A mock ERC20\r\n/// @notice This contract is a very basic ERC20 implementation for testing\r\ncontract MockERC20 is ERC20 {\r\n\r\n\r\n    constructor() ERC20(\"Mock ERC20\", \"MOCK\"){\r\n    }\r\n\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        \r\n        _mint(account, amount);\r\n    }\r\n\r\n}"
    },
    "contracts/mock/MockERC721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n\r\n/// @title A mock ERC721\r\n/// @notice This contract is a very basic ERC721 implementation for testing\r\ncontract MockERC721 is ERC721 {\r\n    uint256 public totalSupply = 0;\r\n\r\n    constructor() ERC721(\"Mock ERC721\", \"NFT\"){\r\n    }\r\n\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            totalSupply += 1;\r\n            _mint(account, totalSupply);\r\n        }\r\n    }\r\n\r\n}"
    },
    "contracts/mock/MockVectorStrat.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.21;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/// @title A mock Vector strategy contract\r\n/// @notice You can use this contract for only the most basic simulation since this contract\r\n/// does not keep track of deposits. \r\n/// @dev This contract is meant to mimic Vector and other strategy contracts that \r\n/// allows require calculations for withdrawal. see: https://snowtrace.io/address/0xcade1284aecc2d38bb957368f69a32fa370cf6f8#code\r\ncontract MockVectorStrat is ERC20 {\r\n    IERC20 depositToken;\r\n\r\n    constructor(address _depositToken) ERC20(\"Mock Vector Strategy\", \"vRECEIPT\"){\r\n        depositToken = IERC20(_depositToken);\r\n    }\r\n\r\n    function deposit(uint256 amount) external {\r\n        depositToken.transferFrom(msg.sender, address(this), amount);\r\n        _mint(msg.sender, amount * 9000 / 10000);\r\n    }\r\n\r\n    function withdraw(uint256 amount, uint256 minAmount) external {\r\n        uint256 _userBalance = balanceOf(msg.sender);\r\n        uint256 _tokensForShares = getDepositTokensForShares(_userBalance);\r\n        require(_tokensForShares >= minAmount, \"MockVectorStrat: Shares < minAmount\");\r\n        uint256 _burnAmount = _userBalance;\r\n        if (_tokensForShares > amount) {\r\n            _tokensForShares = amount;\r\n            _burnAmount = getSharesForTokens(amount);\r\n        }\r\n        _burn(msg.sender, _burnAmount);\r\n        depositToken.transfer(msg.sender, _tokensForShares);\r\n    }\r\n\r\n    function getDepositTokensForShares(uint256 amount) public view returns(uint256) {\r\n        uint256 _depositBalance = depositToken.balanceOf(address(this));\r\n        uint256 _supply = totalSupply();\r\n\r\n        if (_supply > 0) {\r\n            return amount * _depositBalance / totalSupply();\r\n        } \r\n\r\n        return 0;\r\n    }\r\n\r\n    function getSharesForTokens(uint256 amount) internal view returns(uint256) {\r\n        uint256 _depositBalance = depositToken.balanceOf(address(this));\r\n        uint256 _supply = totalSupply();\r\n\r\n        if (_supply > 0) {\r\n            return amount * totalSupply() / _depositBalance;\r\n        } \r\n\r\n        return 0;\r\n    }\r\n\r\n}"
    },
    "contracts/oracles/FortiFiPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiPriceOracle by FortiFi\r\n\r\nimport \"./interfaces/IFortiFiPriceOracle.sol\";\r\nimport \"./interfaces/AggregatorV3Interface.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by negative price returned from oracle\r\nerror InvalidPrice();\r\n\r\n/// @notice Error caused by stale price returned from oracle\r\nerror StalePrice();\r\n\r\n\r\n/// @title FortiFiPriceOracle\r\n/// @notice This contract is used as a flexible interface to provide prices to FortiFiMASSVault implementations.\r\n/// This base version is meant to use Chainlink on-chain price feeds, and can be inherited and modified to \r\n/// support other oracles.\r\ncontract FortiFiPriceOracle is IFortiFiPriceOracle {\r\n    address public immutable token;\r\n    AggregatorV3Interface public immutable feed;\r\n\r\n    constructor(address _token, address _feed) {\r\n        token = _token;\r\n        feed = AggregatorV3Interface(_feed);\r\n    }\r\n\r\n    function getPrice() external view returns(uint256) {\r\n        (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            uint timeStamp,\r\n            /*uint80 answeredInRound*/\r\n        ) = feed.latestRoundData();\r\n\r\n        if (answer <= 0) revert InvalidPrice();\r\n        if (timeStamp < block.timestamp - (75*60) /*75 minutes*/ ) revert StalePrice();\r\n        \r\n        return uint(answer);\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return feed.decimals();\r\n    }\r\n}"
    },
    "contracts/oracles/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/oracles/interfaces/IFortiFiPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IFortiFiPriceOracle Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFiPriceOracle\r\ninterface IFortiFiPriceOracle {\r\n    function getPrice() external view returns(uint256);\r\n    function token() external view returns(address);\r\n    function decimals() external view returns (uint8);\r\n}"
    },
    "contracts/strategies/FortiFiFortress.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// FortiFiFortress by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/IStrategy.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\r\nerror CantWithdrawStrategyReceipts();\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by trying to deposit 0\r\nerror InvalidDeposit();\r\n\r\n/// @notice Error caused by trying to withdraw 0\r\nerror InvalidWithdrawal();\r\n\r\n/// @notice Error thrown when refunding native token fails\r\nerror FailedToRefund();\r\n\r\n/// @title Base FortiFi Fortress contract\r\n/// @notice Fortresses are vault contracts that are specific to an individual vault receipt. By isolating deposits,\r\n/// Fortresses allow for balance-specific logic from underlying strategies.\r\ncontract FortiFiFortress is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    IStrategy public immutable _strat;\r\n    IERC20 public immutable _dToken;\r\n    IERC20 public immutable _wNative;\r\n\r\n    constructor(address _strategy, address _depositToken, address _wrappedNative) {\r\n        if (_strategy == address(0)) revert ZeroAddress();\r\n        if (_depositToken == address(0)) revert ZeroAddress();\r\n        if (_wrappedNative == address(0)) revert ZeroAddress();\r\n        _strat = IStrategy(_strategy);\r\n        _dToken = IERC20(_depositToken);\r\n        _wNative = IERC20(_wrappedNative);\r\n\r\n        // grant approvals\r\n        _dToken.approve(_strategy, type(uint256).max);\r\n    }\r\n\r\n    event DepositMade(uint256 amount, address indexed user);\r\n    event WithdrawalMade(address user);\r\n    event ApprovalsRefreshed();\r\n    event ERC20Recovered(address indexed to, address indexed token, uint256 amount);\r\n\r\n    receive() external payable { \r\n    }\r\n\r\n    /// @notice Function to deposit\r\n    function deposit(uint256 _amount, address _user) external virtual onlyOwner returns(uint256 _newStratReceipts){\r\n        if (_amount == 0) revert InvalidDeposit();\r\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 _beforeBalance = _strat.balanceOf(address(this));\r\n\r\n        // deposit to underlying strategy\r\n        _strat.deposit(_amount);\r\n\r\n        // calculate new strategy receipt tokens received\r\n        _newStratReceipts = _strat.balanceOf(address(this)) - _beforeBalance;\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_user);\r\n\r\n        emit DepositMade(_amount, _user);\r\n    }\r\n\r\n    /// @notice Function to withdraw everything from vault\r\n    function withdraw(address _user, address[] memory _extraTokens) external virtual onlyOwner {\r\n        uint256 _balance = _strat.balanceOf(address(this));\r\n        if (_balance == 0) revert InvalidWithdrawal();\r\n\r\n        _strat.withdraw(_balance);\r\n\r\n        // ensure no strategy receipt tokens remain\r\n        _balance = _strat.balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IERC20(address(_strat)).safeTransfer(_user, _balance);\r\n        }\r\n\r\n        // transfer received deposit tokens and refund left over tokens, if any\r\n        _dToken.safeTransfer(msg.sender, _dToken.balanceOf(address(this)));\r\n\r\n        // transfer extra reward tokens\r\n        uint256 _length = _extraTokens.length;\r\n        if (_length > 0) {\r\n            for(uint256 i = 0; i < _length; i++) {\r\n                IERC20 _token = IERC20(_extraTokens[i]);\r\n                uint256 _tokenBalance = _token.balanceOf(address(this));\r\n                if (_tokenBalance > 0) {\r\n                    _token.safeTransfer(msg.sender, _tokenBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        _refund(_user);\r\n\r\n        emit WithdrawalMade(_user);\r\n    }\r\n\r\n    /// @notice Function to return strategy receipts to user when strategy is bricked\r\n    function withdrawBricked(address _user) external virtual onlyOwner {\r\n        uint256 _balance = _strat.balanceOf(address(this));\r\n        if (_balance == 0) revert InvalidWithdrawal();\r\n\r\n        // ensure no strategy receipt tokens remain\r\n        _balance = _strat.balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IERC20(address(_strat)).safeTransfer(_user, _balance);\r\n        }\r\n\r\n        emit WithdrawalMade(_user);\r\n    }\r\n\r\n    /// @notice Grant max approval to underlying strategy for deposit token\r\n    /// @dev Since Fortresses do not hold deposit tokens for longer than it takes to complete the \r\n    /// transaction there should be no risk in granting max approval\r\n    function refreshApproval() external {\r\n        _dToken.approve(address(_strat), type(uint256).max);\r\n        emit ApprovalsRefreshed();\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck tokens. \r\n    function recoverERC20(address _to, address _token, uint256 _amount) external onlyOwner {\r\n        if (_token == address(_strat)) revert CantWithdrawStrategyReceipts();\r\n        IERC20(_token).safeTransfer(_to, _amount);\r\n        emit ERC20Recovered(_to, _token, _amount);\r\n    }\r\n\r\n    /// @notice Internal function to refund left over tokens from transactions to user who initiated vault transaction\r\n    function _refund(address _user) internal {\r\n        // Refund left over deposit tokens to strategy, if any\r\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        // Refund left over wrapped native tokens to user, if any\r\n        uint256 _wrappedNativeTokenBalance = _wNative.balanceOf(address(this));\r\n        if (_wrappedNativeTokenBalance > 0) {\r\n            _wNative.safeTransfer(_user, _wrappedNativeTokenBalance);\r\n        }\r\n\r\n        // Refund left over native tokens to user, if any\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(_user).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n    }\r\n}"
    },
    "contracts/strategies/FortiFiGLPStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// FortiFiGLPStrategy by FortiFi\r\n\r\nimport \"./FortiFiStrategy.sol\";\r\nimport \"./FortiFiFortress.sol\";\r\nimport \"./interfaces/IFortress.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ninterface IGLPRewardRouter {\r\n    function glpManager() external view returns(address);\r\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\r\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\r\n}\r\n\r\ninterface IGLPManager {\r\n    function getPrice(bool _maximise) external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title GLP FortiFi Strategy contract\r\n/// @notice This contract allows for FortiFi vaults to utilize GLP strategies by minting GLP with USDC and depositing into a \r\n/// simple vault like Yield Yak\r\ncontract FortiFiGLPStrategy is FortiFiStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint16 public slippageBps = 200;\r\n    uint16 public constant BPS = 10000;\r\n\r\n    IGLPRewardRouter public rewardRouter;\r\n    IERC20 public immutable fsGLP;\r\n\r\n    constructor(address _strategy, \r\n        address _depositToken, // MUST BE USDC\r\n        address _wrappedNative,\r\n        address _feeManager,\r\n        address _feeCalculator,\r\n        address _fsglp,\r\n        address _glpRewardRouter) \r\n        FortiFiStrategy(_strategy, _depositToken, _wrappedNative, _feeManager, _feeCalculator) {\r\n        if (_fsglp == address(0)) revert ZeroAddress();\r\n        if (_glpRewardRouter == address(0)) revert ZeroAddress();\r\n        setGlpRewardRouter(_glpRewardRouter);\r\n        fsGLP = IERC20(_fsglp);\r\n        refreshApprovals();\r\n    }\r\n\r\n    event GLPRewardRouterSet(address newManager);\r\n    event ApprovalsRefreshed();\r\n    event SlippageSet(uint16 newSlippage);\r\n\r\n    /// @notice Function to deposit\r\n    /// @dev If a user has not deposited previously, this function will deploy a FortiFiVectorFortress contract\r\n    /// instead of the base FortiFiFortress contract\r\n    function depositToFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\r\n        if (_amount == 0) revert InvalidDeposit();\r\n        if (!isFortiFiVault[msg.sender]) revert InvalidCaller();\r\n        if (strategyIsBricked) revert StrategyBricked();\r\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        IFortress _fortress;\r\n\r\n        // If user has not deposited previously, deploy Fortress\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) {\r\n            FortiFiFortress _fort = new FortiFiFortress(_strat, address(fsGLP), address(_wNative));\r\n            _fortress = IFortress(address(_fort));\r\n            vaultToTokenToFortress[msg.sender][_tokenId] = address(_fortress);\r\n            emit FortressCreated(msg.sender, _tokenId, address(_strat));\r\n        } else {\r\n            _fortress = IFortress(vaultToTokenToFortress[msg.sender][_tokenId]);\r\n        }\r\n\r\n        // get price and mint GLP\r\n        uint256 _glpPrice = IGLPManager(rewardRouter.glpManager()).getPrice(true); // maximize price\r\n        uint256 _glpOut = _amount * (10**18) / _glpPrice*10**(30 - 6); // GLP decimals are 18, price precision is 30 - 6 (USDC decimals)\r\n        uint256 _glpAmount = rewardRouter.mintAndStakeGlp(address(_dToken), _amount, 0, _glpOut * (BPS - slippageBps) / BPS);\r\n\r\n        // approve and deposit\r\n        fsGLP.approve(address(_fortress), _glpAmount);\r\n        uint256 _receipts = _fortress.deposit(_amount, _user);\r\n\r\n        // mint receipt tokens = to what was received from Fortress\r\n        _mint(msg.sender, _receipts);\r\n\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        emit DepositToFortress(msg.sender, _user, address(_strat), _amount);\r\n    }\r\n\r\n    /// @notice Function to withdraw\r\n    /// @dev Override is required because Vector Fortresses need slippage passed in to withdrawal function\r\n    function withdrawFromFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\r\n        if (_amount == 0) revert InvalidWithdrawal();\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) revert NoFortress();\r\n\r\n        // burn receipt tokens and withdraw from Fortress\r\n        _burn(msg.sender, _amount);\r\n\r\n        if (strategyIsBricked) {\r\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawBricked(_user);\r\n\r\n            emit WithdrawBrickedFromFortress(msg.sender, _user, address(_strat), _tokenId);\r\n        } else {\r\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdraw(_user, extraTokens);\r\n\r\n            uint256 _fsGlpReceived = fsGLP.balanceOf(address(this));\r\n\r\n            // redeem GLP for deposit token\r\n            uint256 _glpPrice = IGLPManager(rewardRouter.glpManager()).getPrice(true); // maximize price\r\n            uint256 _dTokenOut = _amount * (_glpPrice / 10**18) / 10**(30 - 6); // GLP decimals are 18, price precision is 30 - 6 (USDC decimals)\r\n            uint256 _depositTokenReceived = rewardRouter.unstakeAndRedeemGlp(address(_dToken), _fsGlpReceived, _dTokenOut * (BPS - slippageBps) / BPS, msg.sender);\r\n\r\n            // Refund left over deposit tokens, if any\r\n            uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\r\n            if (_depositTokenBalance > 0) {\r\n                _dToken.safeTransfer(msg.sender, _depositTokenBalance);\r\n            }\r\n\r\n            // handle fees on extra reward tokens\r\n            uint256 _length = extraTokens.length;\r\n            if (_length > 0) {\r\n                for(uint256 i = 0; i < _length; i++) {\r\n                    IERC20 _token = IERC20(extraTokens[i]);\r\n                    uint256 _tokenBalance = _token.balanceOf(address(this));\r\n                    if (_tokenBalance > 0) {\r\n                        uint256 _fee = feeCalc.getFees(_user, _tokenBalance);\r\n                        feeMgr.collectFees(extraTokens[i], _fee);\r\n                        _token.safeTransfer(_user, _tokenBalance - _fee);\r\n                    }\r\n                }\r\n            }\r\n\r\n            emit WithdrawFromFortress(msg.sender, _user, address(_strat), _tokenId, _depositTokenReceived);\r\n        }\r\n    }\r\n\r\n    /// @notice Function to set max approvals for reward manager. \r\n    /// @dev Since contract never holds deposit tokens max approvals should not matter. \r\n    function refreshApprovals() public {\r\n        _dToken.approve(address(rewardRouter), type(uint256).max);\r\n\r\n        emit ApprovalsRefreshed();\r\n    }\r\n\r\n    /// @notice Function to set the GLP Reward Manager\r\n    function setGlpRewardRouter(address _newManager) public onlyOwner {\r\n        rewardRouter = IGLPRewardRouter(_newManager);\r\n        emit GLPRewardRouterSet(_newManager);\r\n    }\r\n\r\n    /// @notice Function to set the slippage if 1% is not sufficient\r\n    function setSlippage(uint16 _amount) external onlyOwner {\r\n        slippageBps = _amount;\r\n        emit SlippageSet(_amount);\r\n    }\r\n\r\n}"
    },
    "contracts/strategies/FortiFiStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// FortiFiStrategy by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\";\r\nimport \"../fee-managers/interfaces/IFortiFiFeeManager.sol\";\r\nimport \"./interfaces/IFortress.sol\";\r\nimport \"./interfaces/IVault.sol\";\r\nimport \"./FortiFiFortress.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error when vault does not implement ISAMS or IMASS interface (0xafba703c)\r\nerror InvalidVaultImplementation();\r\n\r\n/// @notice Error caused when calling address is not a valid vault \r\nerror InvalidCaller();\r\n\r\n/// @notice Error caused when trying to withdraw from non-existent fortress\r\nerror NoFortress();\r\n\r\n/// @notice Error caused when trying to deposit to bricked strategy\r\nerror StrategyBricked();\r\n\r\n/// @title Base FortiFi Strategy contract\r\n/// @notice This contract should be used when a yield strategy requires special logic beyond\r\n/// simple deposit(amount deposit token) and withdraw(receipt tokens to burn). These strategies\r\n/// are designed to only be called by FortiFi SAMS and MASS Vaults.\r\ncontract FortiFiStrategy is Ownable, ERC20 {\r\n    using SafeERC20 for IERC20;\r\n    address public immutable _strat;\r\n    address public immutable _wNative;\r\n    bool public strategyIsBricked;\r\n\r\n    IERC20 public immutable _dToken;\r\n    IFortiFiFeeCalculator public feeCalc;\r\n    IFortiFiFeeManager public feeMgr;\r\n\r\n    address[] public extraTokens;\r\n    \r\n    mapping(address => bool) public isFortiFiVault;\r\n    mapping(address => mapping(uint256 => address)) public vaultToTokenToFortress;\r\n\r\n    event FortressCreated(address indexed vault, uint256 tokenId, address indexed strategy);\r\n    event DepositToFortress(address indexed vault, address indexed user, address indexed strategy, uint256 amountDeposited);\r\n    event WithdrawFromFortress(address indexed vault, address indexed user, address indexed strategy, uint256 tokenId, uint256 amountReceived);\r\n    event WithdrawBrickedFromFortress(address indexed vault, address indexed user, address indexed strategy, uint256 tokenId);\r\n    event VaultSet(address vault, bool approved);\r\n    event ExtraTokensSet(address[] tokens);\r\n    event SetStrategyAsBricked(bool isBricked);\r\n    event ERC20Recovered(address indexed token, uint256 amount);\r\n    event ERC20RecoveredFromFortress(address indexed fortress, address indexed token, uint256 amount);\r\n    event FeeManagerSet(address feeManager);\r\n    event FeeCalculatorSet(address feeCalculator);\r\n\r\n    constructor(address _strategy, \r\n        address _depositToken, \r\n        address _wrappedNative,\r\n        address _feeManager,\r\n        address _feeCalculator) ERC20(\"FortiFi Strategy Receipt\", \"FFSR\") {\r\n        if (_strategy == address(0)) revert ZeroAddress();\r\n        if (_depositToken == address(0)) revert ZeroAddress();\r\n        if (_wrappedNative == address(0)) revert ZeroAddress();\r\n        if (_feeManager == address(0)) revert ZeroAddress();\r\n        if (_feeCalculator == address(0)) revert ZeroAddress();\r\n        _strat = _strategy;\r\n        _wNative = _wrappedNative;\r\n        _dToken = IERC20(_depositToken);\r\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\r\n        feeMgr = IFortiFiFeeManager(_feeManager);\r\n    }\r\n\r\n    /// @notice Function to deposit\r\n    /// @dev If a user has not deposited previously, this function will deploy a FortiFiFortress contract\r\n    /// to interact with the underlying strategy for a specific vault receipt token. This allows user deposits to be isolated\r\n    /// as many strategies utilize special logic that is dependent on the balance of the address interacting with them.\r\n    function depositToFortress(uint256 _amount, address _user, uint256 _tokenId) external virtual {\r\n        if (_amount == 0) revert InvalidDeposit();\r\n        if (!isFortiFiVault[msg.sender]) revert InvalidCaller();\r\n        if (strategyIsBricked) revert StrategyBricked();\r\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        IFortress _fortress;\r\n\r\n        // If user has not deposited previously, deploy Fortress\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) {\r\n            FortiFiFortress _fort = new FortiFiFortress(_strat, address(_dToken), address(_wNative));\r\n            _fortress = IFortress(address(_fort));\r\n            vaultToTokenToFortress[msg.sender][_tokenId] = address(_fortress);\r\n            emit FortressCreated(msg.sender, _tokenId, address(_strat));\r\n        } else {\r\n            _fortress = IFortress(vaultToTokenToFortress[msg.sender][_tokenId]);\r\n        }\r\n\r\n        // approve and deposit\r\n        _dToken.approve(address(_fortress), _amount);\r\n        uint256 _receipts = _fortress.deposit(_amount, _user);\r\n\r\n        // mint receipt tokens equal to what was received from Fortress\r\n        _mint(msg.sender, _receipts);\r\n\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        emit DepositToFortress(msg.sender, _user, address(_strat), _amount);\r\n    }\r\n\r\n    /// @notice Function to withdraw\r\n    function withdrawFromFortress(uint256 _amount, address _user, uint256 _tokenId) external virtual {\r\n        if (_amount == 0) revert InvalidWithdrawal();\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) revert NoFortress();\r\n\r\n        // burn receipt tokens and withdraw from Fortress\r\n        _burn(msg.sender, _amount);\r\n\r\n        if(strategyIsBricked) {\r\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawBricked(_user);\r\n\r\n            emit WithdrawBrickedFromFortress(msg.sender, _user, address(_strat), _tokenId);\r\n        } else {\r\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdraw(_user, extraTokens);\r\n\r\n            uint256 _depositTokenReceived = _dToken.balanceOf(address(this));\r\n\r\n            // transfer received deposit tokens\r\n            _dToken.safeTransfer(msg.sender, _depositTokenReceived);\r\n\r\n            // handle fees on extra reward tokens\r\n            uint256 _length = extraTokens.length;\r\n            if (_length > 0) {\r\n                for(uint256 i = 0; i < _length; i++) {\r\n                    IERC20 _token = IERC20(extraTokens[i]);\r\n                    uint256 _tokenBalance = _token.balanceOf(address(this));\r\n                    if (_tokenBalance > 0) {\r\n                        uint256 _fee = feeCalc.getFees(_user, _tokenBalance);\r\n                        feeMgr.collectFees(extraTokens[i], _fee);\r\n                        _token.safeTransfer(_user, _tokenBalance - _fee);\r\n                    }\r\n                }\r\n            }\r\n\r\n            emit WithdrawFromFortress(msg.sender, _user, address(_strat), _tokenId, _depositTokenReceived);\r\n        }\r\n    }\r\n\r\n    /// @notice Set valid vaults\r\n    function setVault(address _vault, bool _approved) external onlyOwner {\r\n        if (!IVault(_vault).supportsInterface(0xafba703c)) revert InvalidVaultImplementation();\r\n        isFortiFiVault[_vault] = _approved;\r\n        emit VaultSet(_vault, _approved);\r\n    }\r\n\r\n    /// @notice Set extra reward tokens for strategy\r\n    function setExtraTokens(address[] calldata _tokens) external onlyOwner {\r\n        extraTokens = _tokens;\r\n        emit ExtraTokensSet(_tokens);\r\n    }\r\n\r\n    /// @notice Set strategy as bricked\r\n    function setStrategyBricked(bool _isBricked) external onlyOwner {\r\n        strategyIsBricked = _isBricked;\r\n        emit SetStrategyAsBricked(_isBricked);\r\n    }\r\n\r\n    /// @notice Function to set new FortiFiFeeManager contract\r\n    function setFeeManager(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeMgr = IFortiFiFeeManager(_contract);\r\n        emit FeeManagerSet(_contract);\r\n    }\r\n\r\n    /// @notice Function to set new FortiFiFeeCalculator contract\r\n    function setFeeCalculator(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeCalc = IFortiFiFeeCalculator(_contract);\r\n        emit FeeCalculatorSet(_contract);\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck tokens\r\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        emit ERC20Recovered(_token, _amount);\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck tokens from Fortress\r\n    function recoverFromFortress(address _fortress, address _token, uint256 _amount) external onlyOwner {\r\n        IFortress(_fortress).recoverERC20(msg.sender, _token, _amount);\r\n        emit ERC20RecoveredFromFortress(_fortress, _token, _amount);\r\n    }\r\n\r\n}"
    },
    "contracts/strategies/FortiFiVectorFortress.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// FortiFiVectorFortress by FortiFi\r\n\r\nimport \"./FortiFiFortress.sol\";\r\nimport \"./interfaces/IVectorStrategy.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title FortiFi Fortress contract for Vector Finance strategies\r\n/// @notice This Fortress contract is specifically made to interact with Vector Finance strategies\r\ncontract FortiFiVectorFortress is FortiFiFortress {\r\n    using SafeERC20 for IERC20;\r\n    uint16 private constant BPS = 10_000;\r\n    IVectorStrategy public immutable _vectorStrat;\r\n\r\n    constructor(address _strategy, address _depositToken, address _wrappedNative) \r\n        FortiFiFortress(_strategy, _depositToken, _wrappedNative) {\r\n        _vectorStrat = IVectorStrategy(_strategy);\r\n    }\r\n\r\n    /// @notice Nullified withdraw function\r\n    /// @dev this override is to ensure an incorrect withdraw call is not made from the strategy contract.\r\n    /// Vector strategies require calling withdrawVector(_amount, _slippageBps)\r\n    function withdraw(address, address[] memory extraTokens) external override onlyOwner {\r\n        revert(\"FortiFi: Invalid withdraw\");\r\n    }\r\n\r\n    /// @notice Function to withdraw\r\n    /// @dev Vector Finance strategies require that you pass in the amount of deposit tokens you expect to receive\r\n    /// rather than the amount of receipt tokens you want to burn as well as a minAmount. This is calculated by utilizing the\r\n    /// getDepositTokensForShares view function and applying a slippage amount (typically 1%).\r\n    function withdrawVector(address _user, address[] memory _extraTokens, uint16 _slippageBps) external onlyOwner {\r\n        uint256 _balance = _vectorStrat.balanceOf(address(this));\r\n        if (_balance == 0) revert InvalidWithdrawal();\r\n\r\n        // calculate _tokensForShares and apply slippage\r\n        uint256 _tokensForShares = _vectorStrat.getDepositTokensForShares(_balance);\r\n        uint256 _minAmount = _tokensForShares * (BPS - _slippageBps) / BPS;\r\n        \r\n        // withdraw from vector strategy\r\n        _vectorStrat.withdraw(_tokensForShares, _minAmount);\r\n        \r\n        // ensure no strategy receipt tokens remain\r\n        _balance = _vectorStrat.balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IERC20(address(_vectorStrat)).safeTransfer(_user, _balance);\r\n        }\r\n\r\n        // transfer received deposit tokens and refund left over tokens, if any\r\n        _dToken.safeTransfer(msg.sender, _dToken.balanceOf(address(this)));\r\n\r\n        // transfer extra reward tokens\r\n        uint256 _length = _extraTokens.length;\r\n        if (_length > 0) {\r\n            for(uint256 i = 0; i < _length; i++) {\r\n                IERC20 _token = IERC20(_extraTokens[i]);\r\n                uint256 _tokenBalance = _token.balanceOf(address(this));\r\n                if (_tokenBalance > 0) {\r\n                    _token.safeTransfer(msg.sender, _tokenBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        _refund(_user);\r\n\r\n        emit WithdrawalMade(_user);\r\n    }\r\n    \r\n}"
    },
    "contracts/strategies/FortiFiVectorStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// FortiFiVectorStrategy by FortiFi\r\n\r\nimport \"./FortiFiStrategy.sol\";\r\nimport \"./FortiFiVectorFortress.sol\";\r\nimport \"./interfaces/IVectorFortress.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Vector Finance FortiFi Strategy contract\r\n/// @notice This contract allows for FortiFi vaults to utilize Vector Finance strategies. \r\ncontract FortiFiVectorStrategy is FortiFiStrategy {\r\n    using SafeERC20 for IERC20;\r\n    uint16 public slippageBps = 100;\r\n\r\n    constructor(address _strategy, \r\n        address _depositToken, \r\n        address _wrappedNative,\r\n        address _feeManager,\r\n        address _feeCalculator) \r\n        FortiFiStrategy(_strategy, _depositToken, _wrappedNative, _feeManager, _feeCalculator) {\r\n    }\r\n\r\n    event SlippageSet(uint16 newSlippage);\r\n\r\n    /// @notice Function to deposit\r\n    /// @dev If a user has not deposited previously, this function will deploy a FortiFiVectorFortress contract\r\n    /// instead of the base FortiFiFortress contract\r\n    function depositToFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\r\n        if (_amount == 0) revert InvalidDeposit();\r\n        if (!isFortiFiVault[msg.sender]) revert InvalidCaller();\r\n        if (strategyIsBricked) revert StrategyBricked();\r\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        IVectorFortress _fortress;\r\n\r\n        // If user has not deposited previously, deploy Fortress\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) {\r\n            FortiFiVectorFortress _fort = new FortiFiVectorFortress(_strat, address(_dToken), address(_wNative));\r\n            _fortress = IVectorFortress(address(_fort));\r\n            vaultToTokenToFortress[msg.sender][_tokenId] = address(_fortress);\r\n            emit FortressCreated(msg.sender, _tokenId, address(_strat));\r\n        } else {\r\n            _fortress = IVectorFortress(vaultToTokenToFortress[msg.sender][_tokenId]);\r\n        }\r\n\r\n        // approve and deposit\r\n        _dToken.approve(address(_fortress), _amount);\r\n        uint256 _receipts = _fortress.deposit(_amount, _user);\r\n\r\n        // mint receipt tokens = to what was received from Fortress\r\n        _mint(msg.sender, _receipts);\r\n\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        emit DepositToFortress(msg.sender, _user, address(_strat), _amount);\r\n    }\r\n\r\n    /// @notice Function to withdraw\r\n    /// @dev Override is required because Vector Fortresses need slippage passed in to withdrawal function\r\n    function withdrawFromFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\r\n        if (_amount == 0) revert InvalidWithdrawal();\r\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) revert NoFortress();\r\n\r\n        // burn receipt tokens and withdraw from Fortress\r\n        _burn(msg.sender, _amount);\r\n\r\n        if (strategyIsBricked) {\r\n            IVectorFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawBricked(_user);\r\n\r\n            emit WithdrawBrickedFromFortress(msg.sender, _user, address(_strat), _tokenId);\r\n        } else {\r\n            IVectorFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawVector(_user, extraTokens, slippageBps);\r\n\r\n            uint256 _depositTokenReceived = _dToken.balanceOf(address(this));\r\n\r\n            // transfer received deposit tokens\r\n            _dToken.safeTransfer(msg.sender, _depositTokenReceived);\r\n\r\n            // handle fees on extra reward tokens\r\n            uint256 _length = extraTokens.length;\r\n            if (_length > 0) {\r\n                for(uint256 i = 0; i < _length; i++) {\r\n                    IERC20 _token = IERC20(extraTokens[i]);\r\n                    uint256 _tokenBalance = _token.balanceOf(address(this));\r\n                    if (_tokenBalance > 0) {\r\n                        uint256 _fee = feeCalc.getFees(_user, _tokenBalance);\r\n                        feeMgr.collectFees(extraTokens[i], _fee);\r\n                        _token.safeTransfer(_user, _tokenBalance - _fee);\r\n                    }\r\n                }\r\n            }\r\n\r\n            emit WithdrawFromFortress(msg.sender, _user, address(_strat), _tokenId, _depositTokenReceived);\r\n        }\r\n    }\r\n\r\n    /// @notice Function to set the slippage if 1% is not sufficient\r\n    function setSlippage(uint16 _amount) external onlyOwner {\r\n        slippageBps = _amount;\r\n        emit SlippageSet(_amount);\r\n    }\r\n\r\n}"
    },
    "contracts/strategies/interfaces/IFortress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IFortress Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFi Fortresses\r\ninterface IFortress {\r\n    function deposit(uint amount, address user) external returns(uint);\r\n    function withdraw(address user, address[] memory extraTokens) external;\r\n    function withdrawBricked(address user) external;\r\n    function recoverERC20(address to, address token, uint amount) external;\r\n    function balanceOf(address holder) external view returns(uint256);\r\n}"
    },
    "contracts/strategies/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IStrategy Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for basic strategies used by FortiFi SAMS Vaults\r\ninterface IStrategy {\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function deposit(uint amount) external;\r\n    function depositToFortress(uint amount, address user, uint tokenId) external;\r\n    function withdraw(uint amount) external;\r\n    function withdrawFromFortress(uint amount, address user, uint tokenId) external;\r\n    function balanceOf(address holder) external view returns(uint256);\r\n}"
    },
    "contracts/strategies/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IVault Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IVault {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}"
    },
    "contracts/strategies/interfaces/IVectorFortress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IFortress Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFi Vector Fortresses\r\ninterface IVectorFortress {\r\n    function deposit(uint amount, address user) external returns(uint);\r\n    function withdrawVector(address user, address[] memory extraTokens, uint16 slippage) external;\r\n    function withdrawBricked(address user) external;\r\n    function recoverERC20(address to, address token, uint amount) external;\r\n    function balanceOf(address holder) external view returns(uint256);\r\n}"
    },
    "contracts/strategies/interfaces/IVectorStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IVectorStrategy Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for Vector strategies used by FortiFi SAMS Vaults\r\ninterface IVectorStrategy {\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function deposit(uint amount) external;\r\n    function withdraw(uint amount, uint minAmount) external;\r\n    function balanceOf(address holder) external view returns(uint256);\r\n    function getDepositTokensForShares(uint256 amount) external view returns(uint256);\r\n    function strategy() external view returns(address);\r\n}"
    },
    "contracts/vaults/FortiFiMASSVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiMASSVault by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../strategies/interfaces/IStrategy.sol\";\r\nimport \"../strategies/interfaces/IVectorStrategy.sol\";\r\nimport \"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\";\r\nimport \"../fee-managers/interfaces/IFortiFiFeeManager.sol\";\r\nimport \"../oracles/interfaces/IFortiFiPriceOracle.sol\";\r\nimport \"./interfaces/IMASS.sol\";\r\nimport \"./interfaces/ISAMS.sol\";\r\nimport \"./interfaces/IRouter.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by trying to set a strategy more than once\r\nerror DuplicateStrategy();\r\n\r\n/// @notice Error caused by trying to set too many strategies\r\nerror TooManyStrategies();\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by trying to deposit 0\r\nerror InvalidDeposit();\r\n\r\n/// @notice Error caused by trying to withdraw 0\r\nerror InvalidWithdrawal();\r\n\r\n/// @notice Error caused by trying to use a token not owned by user\r\nerror NotTokenOwner();\r\n\r\n/// @notice Error thrown when refunding native token fails\r\nerror FailedToRefund();\r\n\r\n/// @notice Error caused when strategies array is empty\r\nerror NoStrategies();\r\n\r\n/// @notice Error caused when strategies change and a receipt cannot be added to without rebalancing\r\nerror CantAddToReceipt();\r\n\r\n/// @notice Error caused when swap fails\r\nerror SwapFailed();\r\n\r\n/// @notice Error caused when trying to use a token with less decimals than USDC\r\nerror InvalidDecimals();\r\n\r\n/// @notice Error caused when trying to set oracle to an invalid address\r\nerror InvalidOracle();\r\n\r\n/// @notice Error caused by trying to set minDeposit below BPS\r\nerror InvalidMinDeposit();\r\n\r\n/// @notice Error caused by trying to set a slippage too high\r\nerror InvalidSlippage();\r\n\r\n/// @notice Error caused by mismatching array lengths\r\nerror InvalidArrayLength();\r\n\r\n/// @notice Error caused when bps does not equal 10_000\r\nerror InvalidBps();\r\n\r\n/// @notice Error caused when trying to transact with contract while paused\r\nerror ContractPaused();\r\n\r\n/// @notice Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\r\nerror CantWithdrawStrategyReceipts();\r\n\r\n/// @title Contract for FortiFi MASS Vaults\r\n/// @notice This contract allows for the deposit of a single asset, which is then swapped into various assets and deposited in to \r\n/// multiple yield-bearing strategies. \r\ncontract FortiFiMASSVault is IMASS, ERC1155Supply, IERC1155Receiver, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    string public name;\r\n    string public symbol;\r\n    address public immutable depositToken;\r\n    address public immutable wrappedNative;\r\n    uint8 public constant USDC_DECIMALS = 6;\r\n    uint16 public constant SWAP_DEADLINE_BUFFER = 1800;\r\n    uint16 public constant BPS = 10_000;\r\n    uint16 public slippageBps = 100;\r\n    uint256 public minDeposit = 30_000;\r\n    uint256 public nextToken = 1;\r\n    bool public paused = true;\r\n\r\n    IFortiFiFeeCalculator public feeCalc;\r\n    IFortiFiFeeManager public feeMgr;\r\n\r\n    Strategy[] public strategies;\r\n\r\n    mapping(uint256 => TokenInfo) public tokenInfo;\r\n    mapping(address => bool) public useDirectSwap;\r\n\r\n    event Deposit(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Add(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Rebalance(uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Withdrawal(address indexed depositor, uint256 indexed tokenId, uint256 amountWithdrawn, uint256 profit, uint256 fee);\r\n    event ApprovalsRefreshed();\r\n    event StrategiesSet(Strategy[]);\r\n    event MinDepositSet(uint256 minAmount);\r\n    event SlippageSet(uint16 slippage);\r\n    event FeeManagerSet(address feeManager);\r\n    event FeeCalculatorSet(address feeCalculator);\r\n    event PauseStateUpdated(bool paused);\r\n\r\n    /// @notice Used to restrict function access while paused.\r\n    modifier whileNotPaused() {\r\n        if (paused) revert ContractPaused();\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name, \r\n        string memory _symbol, \r\n        string memory _metadata,\r\n        address _wrappedNative,\r\n        address _depositToken,\r\n        address _feeManager,\r\n        address _feeCalculator,\r\n        Strategy[] memory _strategies) ERC1155(_metadata) {\r\n        if (_wrappedNative == address(0)) revert ZeroAddress();\r\n        if (_depositToken == address(0)) revert ZeroAddress();\r\n        if (_feeManager == address(0)) revert ZeroAddress();\r\n        if (_feeCalculator == address(0)) revert ZeroAddress();\r\n        name = _name; \r\n        symbol = _symbol;\r\n        wrappedNative = _wrappedNative;\r\n        depositToken = _depositToken;\r\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\r\n        feeMgr = IFortiFiFeeManager(_feeManager);\r\n        setStrategies(_strategies);\r\n    }\r\n\r\n    receive() external payable { \r\n    }\r\n\r\n    /// @notice This function is used when a user does not already have a receipt (ERC1155). \r\n    /// @dev The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token. \r\n    /// The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt \r\n    /// tokens received for later withdrawal.\r\n    function deposit(uint256 _amount) external override nonReentrant whileNotPaused returns(uint256 _tokenId, TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        _tokenId = _mintReceipt();\r\n        _deposit(_amount, _tokenId, false);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Deposit(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their \r\n    /// deposit without needing to burn/withdraw first. \r\n    function add(uint256 _amount, uint256 _tokenId) external override nonReentrant whileNotPaused returns(TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _deposit(_amount, _tokenId, true);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Add(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. \r\n    /// @dev Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due, \r\n    /// and the fee manager will distribute those fees before transfering the user their proceeds.\r\n    function withdraw(uint256 _tokenId) external override nonReentrant {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _burn(msg.sender, _tokenId, 1);\r\n\r\n        (uint256 _amount, uint256 _profit) = _withdraw(_tokenId);\r\n        uint256 _fee = feeCalc.getFees(msg.sender, _profit);\r\n        feeMgr.collectFees(depositToken, _fee);\r\n        \r\n        IERC20(depositToken).safeTransfer(msg.sender, _amount - _fee);\r\n\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n\r\n        emit Withdrawal(msg.sender, _tokenId, _amount, _profit, _fee);\r\n    }\r\n\r\n    /// @notice Function to set minimum deposit\r\n    function setMinDeposit(uint256 _amount) external onlyOwner {\r\n        if (_amount < 30_000) revert InvalidMinDeposit();\r\n        minDeposit = _amount;\r\n        emit MinDepositSet(_amount);\r\n    }\r\n\r\n    /// @notice Function to set slippage used in swap functions. Must be 1-5% (100-500)\r\n    function setSlippage(uint16 _amount) external onlyOwner {\r\n        if (_amount < 100 || _amount > 500) revert InvalidSlippage();\r\n        slippageBps = _amount;\r\n        emit SlippageSet(_amount);\r\n    }\r\n\r\n    /// @notice Function to set new FortiFiFeeManager contract\r\n    function setFeeManager(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeMgr = IFortiFiFeeManager(_contract);\r\n        emit FeeManagerSet(_contract);\r\n    }\r\n\r\n    /// @notice Function to set new FortiFiFeeCalculator contract\r\n    function setFeeCalculator(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeCalc = IFortiFiFeeCalculator(_contract);\r\n        emit FeeCalculatorSet(_contract);\r\n    }\r\n\r\n    /// @notice Function to set a direct swap path for a specific token\r\n    /// @dev This can be used when there is sufficient USDC/strategyDepositToken liquidity\r\n    function setDirectSwapFor(address _token, bool _bool) external onlyOwner {\r\n        useDirectSwap[_token] = _bool;\r\n    }\r\n\r\n    /// @notice Function to flip paused state\r\n    function flipPaused() external onlyOwner {\r\n        paused = !paused;\r\n        emit PauseStateUpdated(paused);\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck ERC20 tokens\r\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\r\n        uint256 _length = strategies.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_token == strategies[i].strategy) {\r\n                revert CantWithdrawStrategyReceipts();\r\n            }\r\n        }\r\n        IERC20(_token).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Function to set max approvals for router and strategies. \r\n    /// @dev Since contract never holds deposit tokens max approvals should not matter. \r\n    function refreshApprovals() public {\r\n        uint256 _length = strategies.length;\r\n        IERC20 _depositToken = IERC20(depositToken);\r\n\r\n        _depositToken.approve(address(feeMgr), type(uint256).max);\r\n        for(uint256 i = 0; i < _length; i++) {\r\n            IERC20(strategies[i].depositToken).approve(strategies[i].strategy, type(uint256).max);\r\n            IERC20(strategies[i].depositToken).approve(strategies[i].router, type(uint256).max);\r\n            _depositToken.approve(strategies[i].router, type(uint256).max);\r\n        }\r\n        emit ApprovalsRefreshed();\r\n    }\r\n\r\n    /// @notice This function sets up the underlying strategies used by the vault.\r\n    function setStrategies(Strategy[] memory _strategies) public onlyOwner {\r\n        uint256 _length = _strategies.length;\r\n        if (_length == 0) revert NoStrategies();\r\n        if (_length > 4) revert TooManyStrategies();\r\n\r\n        address[] memory _holdStrategies = new address[](_length);\r\n\r\n        uint16 _bps = 0;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            _bps += _strategies[i].bps;\r\n        }\r\n        if (_bps != BPS) revert InvalidBps();\r\n\r\n        delete strategies; // remove old array, if any\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_strategies[i].strategy == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].depositToken == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].router == address(0)) revert ZeroAddress();\r\n            if (_strategies[i].depositToken != depositToken &&\r\n                (_strategies[i].oracle == address(0) ||\r\n                 _strategies[i].depositToken != IFortiFiPriceOracle(_strategies[i].oracle).token() ||\r\n                 _strategies[i].decimals != IFortiFiPriceOracle(_strategies[i].oracle).decimals()) \r\n               ) revert InvalidOracle();\r\n            if (_strategies[i].decimals <= USDC_DECIMALS &&\r\n                _strategies[i].depositToken != depositToken) revert InvalidDecimals();\r\n            for (uint256 j = 0; j < i; j++) {\r\n                if (_holdStrategies[j] == _strategies[i].strategy) revert DuplicateStrategy();\r\n            }\r\n            _holdStrategies[i] = _strategies[i].strategy;\r\n            strategies.push(_strategies[i]);\r\n        }\r\n\r\n        refreshApprovals();\r\n        emit StrategiesSet(_strategies);\r\n    }\r\n\r\n    /// @notice This function allows for changing the allocations of current strategies\r\n    function setBpsForStrategies(uint16[] calldata _bps) external onlyOwner {\r\n        uint256 _length = strategies.length;\r\n        if (_bps.length != _length) revert InvalidArrayLength();\r\n        uint256 _totalBps = 0;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            strategies[i].bps = _bps[i];\r\n            _totalBps += _bps[i];\r\n        }\r\n        if (_totalBps != BPS) revert InvalidBps();\r\n        emit StrategiesSet(strategies);\r\n    }\r\n\r\n    /// @notice This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. \r\n    /// @dev This function utilizes the internal _deposit and _withdraw functions to rebalance based on \r\n    /// the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total \r\n    /// deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo\r\n    /// before completing the transaction.\r\n    function rebalance(uint256 _tokenId) public override nonReentrant whileNotPaused returns(TokenInfo memory) {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        uint256 _originalDeposit = tokenInfo[_tokenId].deposit;\r\n\r\n        // withdraw from strategies first\r\n        (uint256 _amount, ) = _withdraw(_tokenId);\r\n\r\n        //delete token info\r\n        delete tokenInfo[_tokenId];\r\n\r\n        // deposit to (possibly new) strategies\r\n        _deposit(_amount, _tokenId, false);\r\n\r\n        // set deposit to original deposit to ensure withdrawal profit calculations are correct\r\n        tokenInfo[_tokenId].deposit = _originalDeposit;\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Rebalance(_tokenId, _amount, _info);\r\n        return _info;\r\n    }\r\n\r\n    /// @notice View function that returns all strategies\r\n    function getStrategies() public view override returns(Strategy[] memory) {\r\n        return strategies;\r\n    }\r\n\r\n    /// @notice Internal function to mint ERC1155 receipts and advance nextToken state variable\r\n    function _mintReceipt() internal returns(uint256 _tokenId) {\r\n        _tokenId = nextToken;\r\n        _mint(msg.sender, _tokenId, 1, \"\");\r\n        nextToken += 1;\r\n    }\r\n\r\n    /// @notice Internal swap function for deposits.\r\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\r\n    /// since this contract does not hold strategy deposit tokens, return contract balance after swap.\r\n    function _swapFromDepositToken(uint256 _amount, Strategy memory _strat) internal returns(uint256) {\r\n        address _strategyDepositToken = _strat.depositToken;\r\n        address[] memory _route = new address[](3);\r\n        IRouter _router = IRouter(_strat.router);\r\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\r\n        \r\n        _route[0] = depositToken;\r\n        _route[1] = wrappedNative;\r\n        _route[2] = _strategyDepositToken;\r\n\r\n        uint256 _latestPrice = _oracle.getPrice();\r\n        uint256 _swapAmount = _amount * (10**_strat.decimals) / _latestPrice*10**(_strat.decimals - USDC_DECIMALS);\r\n\r\n        _router.swapExactTokensForTokens(_amount, \r\n            (_swapAmount * (BPS - slippageBps) / BPS), \r\n            _route, \r\n            address(this), \r\n            block.timestamp + SWAP_DEADLINE_BUFFER);\r\n\r\n        uint256 _strategyDepositTokenBalance = IERC20(_strategyDepositToken).balanceOf(address(this));\r\n        if (_strategyDepositTokenBalance == 0) revert SwapFailed();\r\n\r\n        return _strategyDepositTokenBalance;\r\n    }\r\n\r\n    /// @notice Internal swap function for deposits where USDC/strategyDepositToken exists with sufficient liquidity.\r\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\r\n    /// since this contract does not hold strategy deposit tokens, return contract balance after swap.\r\n    function _swapFromDepositTokenDirect(uint256 _amount, Strategy memory _strat) internal returns(uint256) {\r\n        address _strategyDepositToken = _strat.depositToken;\r\n        address[] memory _route = new address[](2);\r\n        IRouter _router = IRouter(_strat.router);\r\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\r\n        \r\n        _route[0] = depositToken;\r\n        _route[1] = _strategyDepositToken;\r\n\r\n        uint256 _latestPrice = _oracle.getPrice();\r\n        uint256 _swapAmount = _amount * (10**_strat.decimals) / _latestPrice*10**(_strat.decimals - USDC_DECIMALS);\r\n\r\n        _router.swapExactTokensForTokens(_amount, \r\n            (_swapAmount * (BPS - slippageBps) / BPS), \r\n            _route, \r\n            address(this), \r\n            block.timestamp + SWAP_DEADLINE_BUFFER);\r\n\r\n        uint256 _strategyDepositTokenBalance = IERC20(_strategyDepositToken).balanceOf(address(this));\r\n        if (_strategyDepositTokenBalance == 0) revert SwapFailed();\r\n\r\n        return _strategyDepositTokenBalance;\r\n    }\r\n\r\n    /// @notice Internal swap function for withdrawals.\r\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\r\n    function _swapToDepositToken(uint256 _amount, Strategy memory _strat) internal {\r\n        address _strategyDepositToken = _strat.depositToken;\r\n        address[] memory _route = new address[](3);\r\n        IRouter _router = IRouter(_strat.router);\r\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\r\n\r\n        _route[0] = _strategyDepositToken;\r\n        _route[1] = wrappedNative;\r\n        _route[2] = depositToken;\r\n        \r\n        uint256 _latestPrice = _oracle.getPrice();\r\n        uint256 _swapAmount = _amount * (_latestPrice / 10**_strat.decimals) / 10**(_strat.decimals - USDC_DECIMALS);\r\n\r\n        _router.swapExactTokensForTokens(_amount, \r\n            (_swapAmount * (BPS - slippageBps) / BPS), \r\n            _route, \r\n            address(this), \r\n            block.timestamp + SWAP_DEADLINE_BUFFER);\r\n\r\n        uint256 _depositTokenBalance = IERC20(depositToken).balanceOf(address(this));\r\n        if (_depositTokenBalance == 0) revert SwapFailed();\r\n    }\r\n\r\n    /// @notice Internal swap function for withdrawals where USDC/strategyDepositToken exists with sufficient liquidity.\r\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\r\n    function _swapToDepositTokenDirect(uint256 _amount, Strategy memory _strat) internal {\r\n        address _strategyDepositToken = _strat.depositToken;\r\n        address[] memory _route = new address[](2);\r\n        IRouter _router = IRouter(_strat.router);\r\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\r\n\r\n        _route[0] = _strategyDepositToken;\r\n        _route[1] = depositToken;\r\n        \r\n        uint256 _latestPrice = _oracle.getPrice();\r\n        uint256 _swapAmount = _amount * (_latestPrice / 10**_strat.decimals) / 10**(_strat.decimals - USDC_DECIMALS);\r\n\r\n        _router.swapExactTokensForTokens(_amount, \r\n            (_swapAmount * (BPS - slippageBps) / BPS), \r\n            _route, \r\n            address(this), \r\n            block.timestamp + SWAP_DEADLINE_BUFFER);\r\n\r\n        uint256 _depositTokenBalance = IERC20(depositToken).balanceOf(address(this));\r\n        if (_depositTokenBalance == 0) revert SwapFailed();\r\n    }\r\n\r\n    /// @notice Internal deposit function.\r\n    /// @dev This function will loop through the strategies in order split/swap/deposit the user's deposited tokens. \r\n    /// The function handles additions slightly differently, requiring that the current strategies match the \r\n    /// strategies that were set at the time of original deposit. \r\n    function _deposit(uint256 _amount, uint256 _tokenId, bool _isAdd) internal {\r\n        TokenInfo storage _info = tokenInfo[_tokenId];\r\n        uint256 _remainder = _amount;\r\n\r\n        uint256 _length = strategies.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            Strategy memory _strategy = strategies[i];\r\n\r\n            // cannot add to deposit if strategies have changed. must rebalance first\r\n            if (_isAdd) {\r\n                if (_strategy.strategy != _info.positions[i].strategy.strategy) revert CantAddToReceipt();\r\n            }\r\n            \r\n            bool _isSAMS = _strategy.isSAMS;\r\n            uint256 _receiptToken = 0;\r\n            uint256 _depositAmount = 0;\r\n\r\n            // split deposit and swap if necessary\r\n            if (i == (_length - 1)) {\r\n                if (depositToken != _strategy.depositToken) {\r\n                    if (useDirectSwap[_strategy.depositToken]) {\r\n                        _depositAmount = _swapFromDepositTokenDirect(_remainder, _strategy);\r\n                    } else {\r\n                        _depositAmount = _swapFromDepositToken(_remainder, _strategy);\r\n                    }\r\n                } else {\r\n                    _depositAmount = _remainder;\r\n                }    \r\n            } else {\r\n                uint256 _split = _amount * _strategy.bps / BPS;\r\n                if (depositToken != _strategy.depositToken) {\r\n                    if (useDirectSwap[_strategy.depositToken]) {\r\n                        _depositAmount = _swapFromDepositTokenDirect(_split, _strategy);\r\n                    } else {\r\n                        _depositAmount = _swapFromDepositToken(_split, _strategy);\r\n                    }\r\n                } else {\r\n                    _depositAmount = _split;\r\n                }    \r\n                _remainder -= _split;\r\n            }\r\n            \r\n            if (_isSAMS) {\r\n                if (_isAdd) {\r\n                    _addSAMS(_depositAmount, _strategy.strategy, _info.positions[i].receipt);\r\n                } else {\r\n                    // if position is new, deposit and push to positions\r\n                    _receiptToken = _depositSAMS(_depositAmount, _strategy.strategy);\r\n                    _info.positions.push(Position({strategy: _strategy, receipt: _receiptToken}));\r\n                }\r\n            } else {\r\n                IStrategy _strat = IStrategy(_strategy.strategy);\r\n\r\n                // set current receipt balance\r\n                uint256 _receiptBalance = _strat.balanceOf(address(this));\r\n\r\n                // deposit based on type of strategy\r\n                if (_strategy.isFortiFi) {\r\n                    _strat.depositToFortress(_depositAmount, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.deposit(_depositAmount);\r\n                }\r\n\r\n                if (_isAdd) {\r\n                    _info.positions[i].receipt += _strat.balanceOf(address(this)) - _receiptBalance;\r\n                } else {\r\n                    _info.positions.push(Position({strategy: _strategy, receipt: _strat.balanceOf(address(this)) - _receiptBalance}));\r\n                }\r\n            }\r\n        }\r\n\r\n        _info.deposit += _amount;\r\n    }\r\n\r\n    /// @notice internal function to deposit to SAMS vault\r\n    function _depositSAMS(uint256 _amount, address _strategy) internal returns (uint256 _receiptToken) {\r\n        ISAMS _sams = ISAMS(_strategy);\r\n        ISAMS.TokenInfo memory _receiptInfo;\r\n\r\n        (_receiptToken, _receiptInfo) = _sams.deposit(_amount);\r\n    }\r\n\r\n    /// @notice internal function to add to SAMS vault\r\n    function _addSAMS(uint256 _amount, address _strategy, uint256 _tokenId) internal {\r\n        ISAMS _sams = ISAMS(_strategy);\r\n        ISAMS.TokenInfo memory _receiptInfo;\r\n\r\n        _receiptInfo = _sams.add(_amount, _tokenId);\r\n    }\r\n\r\n    /// @notice Internal withdraw function that withdraws from strategies and calculates profits.\r\n    function _withdraw(uint256 _tokenId) internal returns(uint256 _proceeds, uint256 _profit) {\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n        uint256 _length = _info.positions.length;\r\n        _proceeds = 0;\r\n\r\n        for (uint256 i = 0 ; i < _length; i++) {\r\n            // withdraw based on the type of underlying strategy, if not SAMS check if FortiFi strategy\r\n            if (_info.positions[i].strategy.isSAMS) {\r\n                ISAMS _strat = ISAMS(_info.positions[i].strategy.strategy);\r\n                _strat.withdraw(_info.positions[i].receipt);\r\n            } else {\r\n                IStrategy _strat = IStrategy(_info.positions[i].strategy.strategy);\r\n                if (_info.positions[i].strategy.isFortiFi) {\r\n                    _strat.withdrawFromFortress(_info.positions[i].receipt, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.withdraw(_info.positions[i].receipt);\r\n                }\r\n            }\r\n\r\n            // swap out for deposit tokens if needed\r\n            if (_info.positions[i].strategy.depositToken != depositToken) {\r\n                uint256 _strategyDepositTokenProceeds = IERC20(_info.positions[i].strategy.depositToken).balanceOf(address(this));\r\n                if (useDirectSwap[_info.positions[i].strategy.depositToken]) {\r\n                    _swapToDepositTokenDirect(_strategyDepositTokenProceeds, _info.positions[i].strategy);\r\n                } else {\r\n                    _swapToDepositToken(_strategyDepositTokenProceeds, _info.positions[i].strategy);\r\n                }\r\n            }  \r\n        }\r\n\r\n        _proceeds = IERC20(depositToken).balanceOf(address(this));\r\n        \r\n        if (_proceeds > _info.deposit) {\r\n            _profit = _proceeds - _info.deposit;\r\n        } else {\r\n            _profit = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function to refund left over tokens from deposit/add/rebalance transactions\r\n    function _refund(TokenInfo memory _info) internal {\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = IERC20(depositToken).balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _info.deposit -= _depositTokenBalance;\r\n            IERC20(depositToken).safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        // Refund left over wrapped native tokens, if any\r\n        uint256 _wrappedNativeTokenBalance = IERC20(wrappedNative).balanceOf(address(this));\r\n        if (_wrappedNativeTokenBalance > 0) {\r\n            IERC20(wrappedNative).safeTransfer(msg.sender, _wrappedNativeTokenBalance);\r\n        }\r\n\r\n        // Refund left over native tokens, if any\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    /// @notice Override to allow FortiFiStrategy contracts to verify that specified vaults implement IMASS interface\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155,IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            interfaceId == type(IMASS).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n}"
    },
    "contracts/vaults/FortiFiSAMSVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// FortiFiSAMSVault by FortiFi\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../strategies/interfaces/IStrategy.sol\";\r\nimport \"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\";\r\nimport \"../fee-managers/interfaces/IFortiFiFeeManager.sol\";\r\nimport \"./interfaces/ISAMS.sol\";\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Error caused by trying to set a strategy more than once\r\nerror DuplicateStrategy();\r\n\r\n/// @notice Error caused by trying to set too many strategies\r\nerror TooManyStrategies();\r\n\r\n/// @notice Error caused by using 0 address as a parameter\r\nerror ZeroAddress();\r\n\r\n/// @notice Error caused by trying to deposit 0\r\nerror InvalidDeposit();\r\n\r\n/// @notice Error caused by trying to withdraw 0\r\nerror InvalidWithdrawal();\r\n\r\n/// @notice Error caused by trying to use a token not owned by user\r\nerror NotTokenOwner();\r\n\r\n/// @notice Error thrown when refunding native token fails\r\nerror FailedToRefund();\r\n\r\n/// @notice Error caused when strategies array is empty\r\nerror NoStrategies();\r\n\r\n/// @notice Error caused when strategies change and a receipt cannot be added to without rebalancing\r\nerror CantAddToReceipt();\r\n\r\n/// @notice Error caused by trying to set minDeposit below BPS\r\nerror InvalidMinDeposit();\r\n\r\n/// @notice Error caused by mismatching array lengths\r\nerror InvalidArrayLength();\r\n\r\n/// @notice Error caused when bps does not equal 10_000\r\nerror InvalidBps();\r\n\r\n/// @notice Error caused when trying to transact with contract while paused\r\nerror ContractPaused();\r\n/// @notice Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\r\nerror CantWithdrawStrategyReceipts();\r\n\r\n/// @title Contract for FortiFi SAMS Vaults\r\n/// @notice This contract allows for the deposit of a single asset, which is then split and deposited in to \r\n/// multiple yield-bearing strategies. \r\ncontract FortiFiSAMSVault is ISAMS, ERC1155Supply, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    string public name;\r\n    string public symbol;\r\n    address public immutable depositToken;\r\n    address public immutable wrappedNative; \r\n    uint16 public constant BPS = 10_000;\r\n    uint256 public minDeposit;\r\n    uint256 public nextToken = 1;\r\n    bool public paused = true;\r\n\r\n    IFortiFiFeeCalculator public feeCalc;\r\n    IFortiFiFeeManager public feeMgr;\r\n\r\n    Strategy[] public strategies;\r\n\r\n    mapping(uint256 => TokenInfo) public tokenInfo;\r\n    mapping(address => bool) public noFeesFor;\r\n\r\n    event Deposit(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Add(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Rebalance(uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\r\n    event Withdrawal(address indexed depositor, uint256 indexed tokenId, uint256 amountWithdrawn, uint256 profit, uint256 fee);\r\n    event ApprovalsRefreshed();\r\n    event StrategiesSet(Strategy[]);\r\n    event MinDepositSet(uint256 minAmount);\r\n    event FeeManagerSet(address feeManager);\r\n    event FeeCalculatorSet(address feeCalculator);\r\n    event FeesSetForAddress(address vault, bool fees);\r\n    event PauseStateUpdated(bool paused);\r\n    event ERC20Recovered(address indexed token, uint256 amount);\r\n\r\n    /// @notice Used to restrict function access while paused.\r\n    modifier whileNotPaused() {\r\n        if (paused) revert ContractPaused();\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name, \r\n        string memory _symbol, \r\n        string memory _metadata,\r\n        address _wrappedNative,\r\n        address _depositToken,\r\n        address _feeManager,\r\n        address _feeCalculator,\r\n        uint256 _minDeposit,\r\n        Strategy[] memory _strategies) ERC1155(_metadata) {\r\n        if (_wrappedNative == address(0)) revert ZeroAddress();\r\n        if (_depositToken == address(0)) revert ZeroAddress();\r\n        if (_feeManager == address(0)) revert ZeroAddress();\r\n        if (_feeCalculator == address(0)) revert ZeroAddress();\r\n        if (_minDeposit < BPS) revert InvalidMinDeposit();\r\n        name = _name; \r\n        symbol = _symbol;\r\n        minDeposit = _minDeposit;\r\n        wrappedNative = _wrappedNative;\r\n        depositToken = _depositToken;\r\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\r\n        feeMgr = IFortiFiFeeManager(_feeManager);\r\n        setStrategies(_strategies);\r\n    }\r\n\r\n    receive() external payable { \r\n    }\r\n\r\n    /// @notice This function is used when a user does not already have a receipt (ERC1155). \r\n    /// @dev The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token. \r\n    /// The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt \r\n    /// tokens received for later withdrawal.\r\n    function deposit(uint256 _amount) external override nonReentrant whileNotPaused returns(uint256 _tokenId, TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        _tokenId = _mintReceipt();\r\n        _deposit(_amount, _tokenId, false);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens\r\n        _refund(_info);\r\n\r\n        emit Deposit(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their \r\n    /// deposit without needing to burn/withdraw first. \r\n    function add(uint256 _amount, uint256 _tokenId) external override nonReentrant whileNotPaused returns(TokenInfo memory _info) {\r\n        if (_amount < minDeposit) revert InvalidDeposit();\r\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _deposit(_amount, _tokenId, true);\r\n        _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens\r\n        _refund(_info);\r\n\r\n        emit Add(msg.sender, _tokenId, _amount, _info);\r\n    }\r\n\r\n    /// @notice This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. \r\n    /// @dev Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due, \r\n    /// and the fee manager will distribute those fees before transfering the user their proceeds.\r\n    function withdraw(uint256 _tokenId) external override nonReentrant {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        _burn(msg.sender, _tokenId, 1);\r\n\r\n        (uint256 _amount, uint256 _profit) = _withdraw(_tokenId);\r\n        uint256 _fee = 0;\r\n\r\n        // MASS vaults don't pay fees to SAMS\r\n        if (!noFeesFor[msg.sender]) {\r\n            _fee = feeCalc.getFees(msg.sender, _profit);\r\n            feeMgr.collectFees(depositToken, _fee);\r\n        }\r\n        \r\n        IERC20(depositToken).safeTransfer(msg.sender, _amount - _fee);\r\n\r\n        // Refund excess native token, if any\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n\r\n        emit Withdrawal(msg.sender, _tokenId, _amount, _profit, _fee);\r\n    }\r\n\r\n    /// @notice Setter for minDeposit state variable\r\n    function setMinDeposit(uint256 _amount) external onlyOwner {\r\n        if (_amount < BPS) revert InvalidMinDeposit();\r\n        minDeposit = _amount;\r\n        emit MinDepositSet(_amount);\r\n    }\r\n\r\n    /// @notice Setter for contract fee manager\r\n    /// @dev Contract address specified should implement IFortiFiFeeManager\r\n    function setFeeManager(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeMgr = IFortiFiFeeManager(_contract);\r\n        emit FeeManagerSet(_contract);\r\n    }\r\n\r\n    /// @notice Setter for contract fee calculator\r\n    /// @dev Contract address specified should implement IFortiFiFeeCalculator\r\n    function setFeeCalculator(address _contract) external onlyOwner {\r\n        if (_contract == address(0)) revert ZeroAddress();\r\n        feeCalc = IFortiFiFeeCalculator(_contract);\r\n        emit FeeCalculatorSet(_contract);\r\n    }\r\n\r\n    /// @notice Function to set noFeesFor a contract. \r\n    /// @dev This allows FortiFi MASS vaults to utilize this SAMS vault without paying a fee so that users\r\n    /// do not pay fees twice.\r\n    function setNoFeesFor(address _contract, bool _fees) external onlyOwner {\r\n        noFeesFor[_contract] = _fees;\r\n        emit FeesSetForAddress(_contract, _fees);\r\n    }\r\n\r\n    /// @notice Function to pause/unpause the contract.\r\n    function flipPaused() external onlyOwner {\r\n        paused = !paused;\r\n        emit PauseStateUpdated(paused);\r\n    }\r\n\r\n    /// @notice Emergency function to recover stuck ERC20 tokens.\r\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\r\n        uint256 _length = strategies.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_token == strategies[i].strategy) {\r\n                revert CantWithdrawStrategyReceipts();\r\n            }\r\n        }\r\n        IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        emit ERC20Recovered(_token, _amount);\r\n    }\r\n\r\n    /// @notice Function that approves ERC20 transfers for all strategy contracts\r\n    /// @dev This function sets the max approval because no depositTokens should remain in this contract at the end of a \r\n    /// transaction. This means there should be no risk exposure. \r\n    function refreshApprovals() public {\r\n        IERC20 _depositToken = IERC20(depositToken);\r\n        uint256 _length = strategies.length;\r\n\r\n        for(uint256 i = 0; i < _length; i++) {\r\n            _depositToken.approve(strategies[i].strategy, type(uint256).max);\r\n        }\r\n\r\n        _depositToken.approve(address(feeMgr), type(uint256).max);\r\n        emit ApprovalsRefreshed();\r\n    }\r\n\r\n    /// @notice This function sets up the underlying strategies used by the vault.\r\n    function setStrategies(Strategy[] memory _strategies) public onlyOwner {\r\n        uint256 _length = _strategies.length;\r\n        if (_length == 0) revert NoStrategies();\r\n        if (_length > 4) revert TooManyStrategies();\r\n\r\n        address[] memory _holdStrategies = new address[](_length);\r\n\r\n        uint16 _bps = 0;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            _bps += _strategies[i].bps;\r\n        }\r\n        if (_bps != BPS) revert InvalidBps();\r\n\r\n        delete strategies; // remove old array, if any\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_strategies[i].strategy == address(0)) revert ZeroAddress();\r\n            for (uint256 j = 0; j < i; j++) {\r\n                if (_holdStrategies[j] == _strategies[i].strategy) revert DuplicateStrategy();\r\n            }\r\n            _holdStrategies[i] = _strategies[i].strategy;\r\n            strategies.push(_strategies[i]);\r\n        }\r\n\r\n        refreshApprovals();\r\n        emit StrategiesSet(_strategies);\r\n    }\r\n\r\n    /// @notice This function allows for changing the allocations of current strategies\r\n    function setBpsForStrategies(uint16[] calldata _bps) external onlyOwner {\r\n        uint256 _length = strategies.length;\r\n        if (_bps.length != _length) revert InvalidArrayLength();\r\n        uint256 _totalBps = 0;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            strategies[i].bps = _bps[i];\r\n            _totalBps += _bps[i];\r\n        }\r\n        if (_totalBps != BPS) revert InvalidBps();\r\n        emit StrategiesSet(strategies);\r\n    }\r\n\r\n    /// @notice This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. \r\n    /// @dev This function utilizes the internal _deposit and _withdraw functions to rebalance based on \r\n    /// the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total \r\n    /// deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo\r\n    /// before completing the transaction.\r\n    function rebalance(uint256 _tokenId) public override nonReentrant whileNotPaused returns(TokenInfo memory) {\r\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\r\n        uint256 _originalDeposit = tokenInfo[_tokenId].deposit;\r\n\r\n        // withdraw from strategies first\r\n        (uint256 _amount, ) = _withdraw(_tokenId);\r\n\r\n        // delete token info\r\n        delete tokenInfo[_tokenId];\r\n\r\n        // deposit to (possibly new) strategies\r\n        _deposit(_amount, _tokenId, false);\r\n        \r\n        // set deposit to original deposit to ensure withdrawal profit calculations are correct\r\n        tokenInfo[_tokenId].deposit = _originalDeposit;\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n\r\n        // refund left over tokens, if any\r\n        _refund(_info);\r\n\r\n        emit Rebalance(_tokenId, _amount, _info);\r\n        return _info;\r\n    }\r\n\r\n    /// @notice View function that returns all strategies\r\n    function getStrategies() public view override returns(Strategy[] memory) {\r\n        return strategies;\r\n    }\r\n\r\n    /// @notice Internal function to mint receipt and advance nextToken state variable.\r\n    function _mintReceipt() internal returns(uint256 _tokenId) {\r\n        _tokenId = nextToken;\r\n        _mint(msg.sender, _tokenId, 1, \"\");\r\n        nextToken += 1;\r\n    }\r\n\r\n    /// @notice Internal deposit function.\r\n    /// @dev This function will loop through the strategies in order split/deposit the user's deposited tokens. \r\n    /// The function handles additions slightly differently, requiring that the current strategies match the \r\n    /// strategies that were set at the time of original deposit. \r\n    function _deposit(uint256 _amount, uint256 _tokenId, bool _isAdd) internal {\r\n        TokenInfo storage _info = tokenInfo[_tokenId];\r\n        uint256 _remainder = _amount;\r\n\r\n        uint256 _length = strategies.length;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            Strategy memory _strategy = strategies[i];\r\n\r\n            // cannot add to position if strategies have changed. must rebalance first\r\n            if (_isAdd) {\r\n                if (_strategy.strategy != _info.positions[i].strategy.strategy) revert CantAddToReceipt();\r\n            }\r\n            \r\n            IStrategy _strat = IStrategy(_strategy.strategy);\r\n            uint256 _receiptBalance = _strat.balanceOf(address(this));\r\n\r\n            if (i == (_length - 1)) {\r\n                if (_strategy.isFortiFi) {\r\n                    _strat.depositToFortress(_remainder, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.deposit(_remainder);\r\n                }\r\n            } else {\r\n                uint256 _split = _amount * _strategy.bps / BPS;\r\n                _remainder -= _split;\r\n                if (_strategy.isFortiFi) {\r\n                    _strat.depositToFortress(_split, msg.sender, _tokenId);\r\n                } else {\r\n                    _strat.deposit(_split);\r\n                }\r\n            }\r\n\r\n            if (_isAdd) {\r\n                _info.positions[i].receipt += _strat.balanceOf(address(this)) - _receiptBalance;\r\n            } else {\r\n                _info.positions.push(Position({strategy: _strategy, receipt: _strat.balanceOf(address(this)) - _receiptBalance}));\r\n            }\r\n        }\r\n\r\n        _info.deposit += _amount;\r\n    }\r\n\r\n    /// @notice Internal withdraw function that withdraws from strategies and calculates profits.\r\n    function _withdraw(uint256 _tokenId) internal returns(uint256 _proceeds, uint256 _profit) {\r\n        TokenInfo memory _info = tokenInfo[_tokenId];\r\n        uint256 _length = _info.positions.length;\r\n\r\n        for (uint256 i = 0 ; i < _length; i++) {\r\n            IStrategy _strat = IStrategy(_info.positions[i].strategy.strategy);\r\n            if (_info.positions[i].strategy.isFortiFi) {\r\n                _strat.withdrawFromFortress(_info.positions[i].receipt, msg.sender, _tokenId);\r\n            } else {\r\n                _strat.withdraw(_info.positions[i].receipt);\r\n            }\r\n        }\r\n\r\n        _proceeds = IERC20(depositToken).balanceOf(address(this));\r\n\r\n        if (_proceeds > _info.deposit) {\r\n            _profit = _proceeds - _info.deposit;\r\n        } else {\r\n            _profit = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function to refund left over tokens from deposit/add/rebalance transactions\r\n    function _refund(TokenInfo memory _info) internal {\r\n        // Refund left over deposit tokens, if any\r\n        uint256 _depositTokenBalance = IERC20(depositToken).balanceOf(address(this));\r\n        if (_depositTokenBalance > 0) {\r\n            _info.deposit -= _depositTokenBalance;\r\n            IERC20(depositToken).safeTransfer(msg.sender, _depositTokenBalance);\r\n        }\r\n\r\n        // Refund left over wrapped native tokens, if any\r\n        uint256 _wrappedNativeTokenBalance = IERC20(wrappedNative).balanceOf(address(this));\r\n        if (_wrappedNativeTokenBalance > 0) {\r\n            IERC20(wrappedNative).safeTransfer(msg.sender, _wrappedNativeTokenBalance);\r\n        }\r\n\r\n        // Refund left over native tokens, if any\r\n        if (address(this).balance > 0) {\r\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n\t\t    if (!success) revert FailedToRefund();\r\n        }\r\n    }\r\n\r\n    /// @notice Override to allow FortiFiStrategy contracts to verify that specified vaults implement ISAMS interface\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            interfaceId == type(ISAMS).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n}"
    },
    "contracts/vaults/interfaces/IMASS.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IMASS Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFi MASS Vaults\r\ninterface IMASS {\r\n    struct Strategy {\r\n        address strategy;\r\n        address depositToken;\r\n        address router;\r\n        address oracle;\r\n        bool isFortiFi;\r\n        bool isSAMS;\r\n        uint16 bps;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct Position {\r\n        Strategy strategy;\r\n        uint256 receipt;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        uint256 deposit;\r\n        Position[] positions;\r\n    }\r\n\r\n    function deposit(uint amount) external returns(uint256 tokenId, TokenInfo memory info);\r\n    function add(uint amount, uint tokenId) external returns(TokenInfo memory info);\r\n    function withdraw(uint amount) external;\r\n    function rebalance(uint tokenId) external returns(TokenInfo memory info);\r\n    function getStrategies() external view returns(Strategy[] memory strategies);\r\n}"
    },
    "contracts/vaults/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// IRouter Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Simple router interface for FortiFi MASS Vaults\r\ninterface IRouter {\r\n    function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n    \r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "contracts/vaults/interfaces/ISAMS.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n// ISAMS Interface by FortiFi\r\n\r\npragma solidity 0.8.21;\r\n\r\n/// @title Interface for FortiFi SAMS Vaults\r\ninterface ISAMS {\r\n    struct Strategy {\r\n        address strategy;\r\n        bool isFortiFi;\r\n        uint16 bps;\r\n    }\r\n\r\n    struct Position {\r\n        Strategy strategy;\r\n        uint256 receipt;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        uint256 deposit;\r\n        Position[] positions;\r\n    }\r\n\r\n    function deposit(uint amount) external returns(uint256 tokenId, TokenInfo memory info);\r\n    function add(uint amount, uint tokenId) external returns(TokenInfo memory info);\r\n    function withdraw(uint amount) external;\r\n    function rebalance(uint tokenId) external returns(TokenInfo memory info);\r\n    function getStrategies() external view returns(Strategy[] memory strategies);\r\n}"
    },
    "contracts/vaults/interfaces/IYakRouter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\n\r\nstruct Query {\r\n    address adapter;\r\n    address tokenIn;\r\n    address tokenOut;\r\n    uint256 amountOut;\r\n}\r\nstruct Offer {\r\n    bytes amounts;\r\n    bytes adapters;\r\n    bytes path;\r\n    uint256 gasEstimate;\r\n}\r\nstruct FormattedOffer {\r\n    uint256[] amounts;\r\n    address[] adapters;\r\n    address[] path;\r\n}\r\nstruct Trade {\r\n    uint256 amountIn;\r\n    uint256 amountOut;\r\n    address[] path;\r\n    address[] adapters;\r\n}\r\n\r\ninterface IYakRouter {\r\n\r\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\r\n    event UpdatedAdapters(address[] _newAdapters);\r\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\r\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\r\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\r\n\r\n    // admin\r\n    function setTrustedTokens(address[] memory _trustedTokens) external;\r\n    function setAdapters(address[] memory _adapters) external;\r\n    function setFeeClaimer(address _claimer) external;\r\n    function setMinFee(uint256 _fee) external;\r\n\r\n    // misc\r\n    function trustedTokensCount() external view returns (uint256);\r\n    function adaptersCount() external view returns (uint256);\r\n\r\n    // query\r\n\r\n    function queryAdapter(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint8 _index\r\n    ) external returns (uint256);\r\n\r\n    function queryNoSplit(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint8[] calldata _options\r\n    ) external view returns (Query memory);\r\n\r\n    function queryNoSplit(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut\r\n    ) external view returns (Query memory);\r\n\r\n    function findBestPathWithGas(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _maxSteps,\r\n        uint256 _gasPrice\r\n    ) external view returns (FormattedOffer memory);\r\n\r\n    function findBestPath(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _maxSteps\r\n    ) external view returns (FormattedOffer memory);\r\n\r\n    // swap\r\n\r\n    function swapNoSplit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint256 _fee\r\n    ) external;\r\n\r\n    function swapNoSplitFromAVAX(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint256 _fee\r\n    ) external payable;\r\n\r\n    function swapNoSplitToAVAX(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint256 _fee\r\n    ) external; \r\n\r\n    function swapNoSplitWithPermit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint256 _fee,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external;\r\n\r\n    function swapNoSplitToAVAXWithPermit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint256 _fee,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external;\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}