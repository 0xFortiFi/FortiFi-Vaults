{
  "address": "0x03d8137b35206Dda7d6313Ba0FDE02EC4c265414",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nftContracts",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_tokenAmounts",
          "type": "uint8[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_thresholdBps",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_combineHoldings",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmounts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "combine",
          "type": "bool"
        }
      ],
      "name": "CombineNftsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "nftContracts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "tokenAmounts",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "thresholdBps",
          "type": "uint16[]"
        }
      ],
      "name": "FeesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "combineNftHoldings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setCombine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nftContracts",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_tokenAmounts",
          "type": "uint8[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_thresholdBps",
          "type": "uint16[]"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thresholdBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenAmounts",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa100ab44a25e659966686087685dd5162438f1ad8875fb85badfc4708ce5a92",
  "receipt": {
    "to": null,
    "from": "0x625d271F634eE0804CCc573C4679aA3AeE475B62",
    "contractAddress": "0x03d8137b35206Dda7d6313Ba0FDE02EC4c265414",
    "transactionIndex": 2,
    "gasUsed": "8576566",
    "logsBloom": "0x
    "blockHash": "0x9a1aef7e3057f481291243eda716cba0ee2fe7072b78993500d67f9c7b1760c1",
    "transactionHash": "0xaa100ab44a25e659966686087685dd5162438f1ad8875fb85badfc4708ce5a92",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 181792066,
        "transactionHash": "0xaa100ab44a25e659966686087685dd5162438f1ad8875fb85badfc4708ce5a92",
        "address": "0x03d8137b35206Dda7d6313Ba0FDE02EC4c265414",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000625d271f634ee0804ccc573c4679aa3aee475b62"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a1aef7e3057f481291243eda716cba0ee2fe7072b78993500d67f9c7b1760c1"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 181792066,
        "transactionHash": "0xaa100ab44a25e659966686087685dd5162438f1ad8875fb85badfc4708ce5a92",
        "address": "0x03d8137b35206Dda7d6313Ba0FDE02EC4c265414",
        "topics": [
          "0x403023d895079eb1f2e67e170a4240963ea9a82bf2d0e87afc6b17ff41814fde"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000018b90eb9c0c3840d19333e4b1d943bc04de05313000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000000000000000022600000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001c20000000000000000000000000000000000000000000000000000000000000190",
        "logIndex": 1,
        "blockHash": "0x9a1aef7e3057f481291243eda716cba0ee2fe7072b78993500d67f9c7b1760c1"
      }
    ],
    "blockNumber": 181792066,
    "cumulativeGasUsed": "8819874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x18b90eB9c0c3840d19333E4B1D943Bc04de05313"
    ],
    [
      0,
      1,
      3,
      5,
      7,
      10
    ],
    [
      800,
      600,
      550,
      500,
      450,
      400
    ],
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "682f941245e46afc6bcaa295bd3f5c39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_tokenAmounts\",\"type\":\"uint8[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_thresholdBps\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_combineHoldings\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"combine\",\"type\":\"bool\"}],\"name\":\"CombineNftsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftContracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"tokenAmounts\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"thresholdBps\",\"type\":\"uint16[]\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"combineNftHoldings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setCombine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_tokenAmounts\",\"type\":\"uint8[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_thresholdBps\",\"type\":\"uint16[]\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thresholdBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAmounts\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"When combineNftHoldings is true the contract will combine the user's balance across all NFT contracts in the nftContracts array when determining fees. Otherwise, the contract will only take  the user's highest balance out of the nftContracts.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCombine(bool)\":{\"details\":\"When true, holdings across all specified collections in nftContracts will be combined to set the NFT count that is used when determining the _feeBps in _getFees.\"},\"setFees(address[],uint8[],uint16[])\":{\"details\":\"Each amount in _tokenAmounts must have a corresponding bps value in _thresholdBps. Bps values should  decrease at each index, and token amounts should increase at each index. This maintains that the more NFTs a user holds, the lower the fee bps.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Contract to calculate fees for FortiFi Vaults\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAmounts()\":[{\"notice\":\"Error caused NFT amounts array is invalid\"}],\"InvalidArrayLength()\":[{\"notice\":\"Error caused by mismatching array lengths\"}],\"InvalidBps()\":[{\"notice\":\"Error caused when bps does not equal 10_000\"}],\"ZeroAddress()\":[{\"notice\":\"Error caused by using 0 address as a parameter\"}]},\"kind\":\"user\",\"methods\":{\"getFees(address,uint256)\":{\"notice\":\"Function to determine fees due based on a user's NFT holdings and amount of profit\"},\"setCombine(bool)\":{\"notice\":\"Function to set combineNFTHoldings state variable. \"},\"setFees(address[],uint8[],uint16[])\":{\"notice\":\"Function to set new values for NFT contracts, threshold amounts, and thresholdBps\"}},\"notice\":\"This contract is used by FortiFi Vaults to calculate fees based on a user's NFT holdings. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fee-calculators/FortiFiFeeCalculator.sol\":\"FortiFiFeeCalculator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/fee-calculators/FortiFiFeeCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// FortiFiFeeCalculator by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @notice Error caused by using 0 address as a parameter\\r\\nerror ZeroAddress();\\r\\n\\r\\n/// @notice Error caused by mismatching array lengths\\r\\nerror InvalidArrayLength();\\r\\n\\r\\n/// @notice Error caused when bps does not equal 10_000\\r\\nerror InvalidBps();\\r\\n\\r\\n/// @notice Error caused NFT amounts array is invalid\\r\\nerror InvalidAmounts();\\r\\n\\r\\n/// @title Contract to calculate fees for FortiFi Vaults\\r\\n/// @notice This contract is used by FortiFi Vaults to calculate fees based on a user's NFT holdings. \\r\\n/// @dev When combineNftHoldings is true the contract will combine the user's balance across all NFT\\r\\n/// contracts in the nftContracts array when determining fees. Otherwise, the contract will only take \\r\\n/// the user's highest balance out of the nftContracts.\\r\\ncontract FortiFiFeeCalculator is IFortiFiFeeCalculator, Ownable {\\r\\n\\r\\n    uint16 public constant BPS = 10_000;\\r\\n    bool public combineNftHoldings;\\r\\n    uint8[] public tokenAmounts;\\r\\n    uint16[] public thresholdBps;\\r\\n    address[] public nftContracts;\\r\\n    \\r\\n    constructor(address[] memory _nftContracts,\\r\\n                uint8[] memory _tokenAmounts,\\r\\n                uint16[] memory _thresholdBps,\\r\\n                bool _combineHoldings) {\\r\\n\\r\\n        setFees(_nftContracts, _tokenAmounts, _thresholdBps);\\r\\n        combineNftHoldings = _combineHoldings;\\r\\n    }\\r\\n\\r\\n    event FeesSet(address[] nftContracts, uint8[] tokenAmounts, uint16[] thresholdBps);\\r\\n    event CombineNftsSet(bool combine);\\r\\n\\r\\n    /// @notice Function to determine fees due based on a user's NFT holdings and amount of profit\\r\\n    function getFees(address _user, uint256 _amount) external view override returns(uint256) {\\r\\n        if (combineNftHoldings) {\\r\\n            return _getCombinedFees(_user, _amount);\\r\\n        } \\r\\n\\r\\n        return _getFees(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new values for NFT contracts, threshold amounts, and thresholdBps\\r\\n    /// @dev Each amount in _tokenAmounts must have a corresponding bps value in _thresholdBps. Bps values should \\r\\n    /// decrease at each index, and token amounts should increase at each index. This maintains that the more NFTs\\r\\n    /// a user holds, the lower the fee bps.\\r\\n    function setFees(address[] memory _nftContracts, uint8[] memory _tokenAmounts, uint16[] memory _thresholdBps) public onlyOwner {\\r\\n        uint256 _length = _nftContracts.length;\\r\\n        if (_length == 0) revert InvalidArrayLength();\\r\\n\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            if (_nftContracts[i] == address(0)) revert ZeroAddress();\\r\\n        }\\r\\n\\r\\n        if (_tokenAmounts.length != _thresholdBps.length ||\\r\\n                !_validateAmountsAndBps(_tokenAmounts, _thresholdBps)) revert InvalidArrayLength();\\r\\n        \\r\\n        nftContracts = _nftContracts;\\r\\n        tokenAmounts = _tokenAmounts;\\r\\n        thresholdBps = _thresholdBps;\\r\\n\\r\\n        emit FeesSet(_nftContracts, _tokenAmounts, _thresholdBps);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set combineNFTHoldings state variable. \\r\\n    /// @dev When true, holdings across all specified collections in nftContracts will be combined to set the\\r\\n    /// NFT count that is used when determining the _feeBps in _getFees.\\r\\n    function setCombine(bool _bool) external onlyOwner {\\r\\n        combineNftHoldings = _bool;\\r\\n        emit CombineNftsSet(_bool);\\r\\n    }\\r\\n\\r\\n    /// @notice Validate that arrays meet specifications\\r\\n    function _validateAmountsAndBps(uint8[] memory _amounts, uint16[] memory _bps) internal pure returns(bool) {\\r\\n        if (_amounts.length == 0 ||\\r\\n                _amounts[0] != 0) revert InvalidAmounts();\\r\\n        uint256 _length = _bps.length;\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            if (i > 0) {\\r\\n                if (_bps[i] >= _bps[i-1]) revert InvalidBps();\\r\\n                if (_amounts[i] <= _amounts[i-1]) revert InvalidAmounts();\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Get fees for user\\r\\n    function _getFees(address _user, uint256 _amount) internal view returns (uint256) {\\r\\n        uint256 _length = nftContracts.length;\\r\\n        uint256 _amountLength = tokenAmounts.length;\\r\\n        uint16 _feeBps = thresholdBps[0];\\r\\n\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            IERC721 _nft = IERC721(nftContracts[i]);\\r\\n            uint256 _balance = _nft.balanceOf(_user);\\r\\n\\r\\n            if (_balance > 0) {\\r\\n                for (uint256 j = 1; j < _amountLength; j++) {\\r\\n                    if (_balance < tokenAmounts[j]) {\\r\\n                        uint16 _bps = thresholdBps[j - 1];\\r\\n                        if (_bps < _feeBps) {\\r\\n                            _feeBps = _bps;\\r\\n                        }\\r\\n                        break;\\r\\n                    } else if (_balance == tokenAmounts[j] || j == (_amountLength - 1)) {\\r\\n                        uint16 _bps = thresholdBps[j];\\r\\n                        if (_bps < _feeBps) {\\r\\n                            _feeBps = _bps;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } \\r\\n        }\\r\\n\\r\\n        // return 0 fee if amount is too small\\r\\n        if (_amount * _feeBps < BPS) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return _amount * _feeBps / BPS;\\r\\n    }\\r\\n\\r\\n    /// @notice Get fees for user when combineNFTHoldings is true.\\r\\n    function _getCombinedFees(address _user, uint256 _amount) internal view returns (uint256) {\\r\\n        uint256 _length = nftContracts.length;\\r\\n        uint256 _amountLength = tokenAmounts.length;\\r\\n        uint256 _balance = 0;\\r\\n        uint16 _feeBps = thresholdBps[0];\\r\\n\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            IERC721 _nft = IERC721(nftContracts[i]);\\r\\n            _balance += _nft.balanceOf(_user);\\r\\n        }\\r\\n\\r\\n        if (_balance > 0) {\\r\\n            for (uint256 j = 1; j < _amountLength; j++) {\\r\\n                if (_balance < tokenAmounts[j]) {\\r\\n                    uint16 _bps = thresholdBps[j - 1];\\r\\n                    if (_bps < _feeBps) {\\r\\n                        _feeBps = _bps;\\r\\n                    }\\r\\n                    break;\\r\\n                } else if (_balance == tokenAmounts[j] || j == (_amountLength - 1)) {\\r\\n                    uint16 _bps = thresholdBps[j];\\r\\n                    if (_bps < _feeBps) {\\r\\n                        _feeBps = _bps;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } \\r\\n\\r\\n        // return 0 fee if amount is too small\\r\\n        if (_amount * _feeBps < BPS) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return _amount * _feeBps / BPS;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x49c898fe96f29c8ad6c337a21d67aafc88b06685c0160da508dc0d2e60b870f1\",\"license\":\"GPL-3.0-only\"},\"contracts/fee-calculators/interfaces/IFortiFiFeeCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiFeeCalculator Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiFeeCalculator\\r\\ninterface IFortiFiFeeCalculator {\\r\\n    function getFees(address user, uint256 amount) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x16e344e0c95704f9c49d93cbc4a8a2604b457cfad9b42964b57eba47a2fd2f27\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c2038038062001c2083398101604081905262000034916200071b565b6200003f3362000072565b6200004c848484620000c2565b60008054911515600160a01b0260ff60a01b199092169190911790555062000972915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b825160008190036200014657604051634ec4810560e11b815260040160405180910390fd5b60005b81811015620001b75760006001600160a01b031685828151811062000172576200017262000833565b60200260200101516001600160a01b031603620001a25760405163d92e233d60e01b815260040160405180910390fd5b80620001ae816200085f565b91505062000149565b5081518351141580620001d35750620001d1838362000277565b155b15620001f257604051634ec4810560e11b815260040160405180910390fd5b835162000207906003906020870190620003d9565b5082516200021d90600190602086019062000443565b50815162000233906002906020850190620004eb565b507f403023d895079eb1f2e67e170a4240963ea9a82bf2d0e87afc6b17ff41814fde8484846040516200026993929190620008bc565b60405180910390a150505050565b6000825160001480620002ab5750826000815181106200029b576200029b62000833565b602002602001015160ff16600014155b15620002ca57604051636c2b7e2d60e11b815260040160405180910390fd5b815160005b81811015620003cc578015620003b75783620002ed6001836200095c565b8151811062000300576200030062000833565b602002602001015161ffff1684828151811062000321576200032162000833565b602002602001015161ffff16106200034c5760405163c6cc5d7f60e01b815260040160405180910390fd5b846200035a6001836200095c565b815181106200036d576200036d62000833565b602002602001015160ff168582815181106200038d576200038d62000833565b602002602001015160ff1611620003b757604051636c2b7e2d60e11b815260040160405180910390fd5b80620003c3816200085f565b915050620002cf565b5060019150505b92915050565b82805482825590600052602060002090810192821562000431579160200282015b828111156200043157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003fa565b506200043f92915062000587565b5090565b82805482825590600052602060002090601f01602090048101928215620004315791602002820160005b83821115620004ad57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200046d565b8015620004dc5782816101000a81549060ff0219169055600101602081600001049283019260010302620004ad565b50506200043f92915062000587565b82805482825590600052602060002090600f01601090048101928215620004315791602002820160005b838211156200055757835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000515565b8015620004dc5782816101000a81549061ffff021916905560020160208160010104928301926001030262000557565b5b808211156200043f576000815560010162000588565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620005df57620005df6200059e565b604052919050565b60006001600160401b038211156200060357620006036200059e565b5060051b60200190565b600082601f8301126200061f57600080fd5b81516020620006386200063283620005e7565b620005b4565b82815260059290921b840181019181810190868411156200065857600080fd5b8286015b848110156200068657805160ff81168114620006785760008081fd5b83529183019183016200065c565b509695505050505050565b600082601f830112620006a357600080fd5b81516020620006b66200063283620005e7565b82815260059290921b84018101918181019086841115620006d657600080fd5b8286015b848110156200068657805161ffff81168114620006f75760008081fd5b8352918301918301620006da565b805180151581146200071657600080fd5b919050565b600080600080608085870312156200073257600080fd5b84516001600160401b03808211156200074a57600080fd5b818701915087601f8301126200075f57600080fd5b81516020620007726200063283620005e7565b82815260059290921b8401810191818101908b8411156200079257600080fd5b948201945b83861015620007c95785516001600160a01b0381168114620007b95760008081fd5b8252948201949082019062000797565b918a0151919850909350505080821115620007e357600080fd5b620007f1888389016200060d565b945060408701519150808211156200080857600080fd5b50620008178782880162000691565b925050620008286060860162000705565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000874576200087462000849565b5060010190565b600081518084526020808501945080840160005b83811015620008b157815161ffff16875295820195908201906001016200088f565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b82811015620009005781516001600160a01b031684529284019290840190600101620008d9565b5050508381038285015285518082528683019183019060005b818110156200093a57835160ff168352928401929184019160010162000919565b505084810360408601526200095081876200087b565b98975050505050505050565b81810381811115620003d357620003d362000849565b61129e80620009826000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063925af0ad11610071578063925af0ad146101285780639ad280c01461013b5780639b52401b14610160578063e604a50514610173578063efb36c1414610197578063f2fde38b146101b857600080fd5b80630bb4d82a146100ae578063249d39e9146100de578063715018a6146100fa57806383df57c8146101045780638da5cb5b14610117575b600080fd5b6100c16100bc366004610dc4565b6101cb565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761271081565b60405161ffff90911681526020016100d5565b6101026101f5565b005b610102610112366004610ddd565b610234565b6000546001600160a01b03166100c1565b6100e7610136366004610dc4565b6102b6565b61014e610149366004610dc4565b6102ee565b60405160ff90911681526020016100d5565b61010261016e366004610f74565b610322565b60005461018790600160a01b900460ff1681565b60405190151581526020016100d5565b6101aa6101a5366004611058565b61048d565b6040519081526020016100d5565b6101026101c6366004611082565b6104c4565b600381815481106101db57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146102285760405162461bcd60e51b815260040161021f9061109d565b60405180910390fd5b610232600061055f565b565b6000546001600160a01b0316331461025e5760405162461bcd60e51b815260040161021f9061109d565b60008054821515600160a01b0260ff60a01b199091161790556040517f84d96694db408e58df256997df18730ccab56df8741b6b857690a31463e0bd8e906102ab90831515815260200190565b60405180910390a150565b600281815481106102c657600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b600181815481106102fe57600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6000546001600160a01b0316331461034c5760405162461bcd60e51b815260040161021f9061109d565b8251600081900361037057604051634ec4810560e11b815260040160405180910390fd5b60005b818110156103d95760006001600160a01b0316858281518110610398576103986110d2565b60200260200101516001600160a01b0316036103c75760405163d92e233d60e01b815260040160405180910390fd5b806103d1816110fe565b915050610373565b50815183511415806103f257506103f083836105af565b155b1561041057604051634ec4810560e11b815260040160405180910390fd5b8351610423906003906020870190610c12565b508251610437906001906020860190610c77565b50815161044b906002906020850190610d18565b507f403023d895079eb1f2e67e170a4240963ea9a82bf2d0e87afc6b17ff41814fde84848460405161047f93929190611156565b60405180910390a150505050565b60008054600160a01b900460ff16156104b1576104aa83836106f3565b90506104be565b6104bb838361098a565b90505b92915050565b6000546001600160a01b031633146104ee5760405162461bcd60e51b815260040161021f9061109d565b6001600160a01b0381166105535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021f565b61055c8161055f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008251600014806105df5750826000815181106105cf576105cf6110d2565b602002602001015160ff16600014155b156105fd57604051636c2b7e2d60e11b815260040160405180910390fd5b815160005b818110156106e85780156106d6578361061c6001836111f0565b8151811061062c5761062c6110d2565b602002602001015161ffff1684828151811061064a5761064a6110d2565b602002602001015161ffff16106106745760405163c6cc5d7f60e01b815260040160405180910390fd5b846106806001836111f0565b81518110610690576106906110d2565b602002602001015160ff168582815181106106ad576106ad6110d2565b602002602001015160ff16116106d657604051636c2b7e2d60e11b815260040160405180910390fd5b806106e0816110fe565b915050610602565b506001949350505050565b60035460015460028054600093929184918291908290610715576107156110d2565b600091825260208220601082040154600f9091166002026101000a900461ffff1691505b848110156107f057600060038281548110610756576107566110d2565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038b81166004830152909116915081906370a0823190602401602060405180830381865afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611203565b6107da908561121c565b93505080806107e8906110fe565b915050610739565b5081156109405760015b8381101561093e5760018181548110610815576108156110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416831015610894576000600261084b6001846111f0565b8154811061085b5761085b6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff9081169150831681101561088e578092505b5061093e565b600181815481106108a7576108a76110d2565b60009182526020918290209181049091015460ff601f9092166101000a9004168314806108dd57506108da6001856111f0565b81145b1561092c576000600282815481106108f7576108f76110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff9081169150831681101561092a578092505b505b80610936816110fe565b9150506107fa565b505b61271061095161ffff83168861122f565b10156109645760009450505050506104be565b61271061097561ffff83168861122f565b61097f9190611246565b979650505050505050565b600354600154600280546000939291849182906109a9576109a96110d2565b600091825260208220601082040154600f9091166002026101000a900461ffff1691505b83811015610bc9576000600382815481106109ea576109ea6110d2565b60009182526020822001546040516370a0823160e01b81526001600160a01b038b81166004830152909116925082906370a0823190602401602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190611203565b90508015610bb45760015b85811015610bb25760018181548110610a8957610a896110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416821015610b085760006002610abf6001846111f0565b81548110610acf57610acf6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff90811691508616811015610b02578095505b50610bb2565b60018181548110610b1b57610b1b6110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416821480610b515750610b4e6001876111f0565b81145b15610ba057600060028281548110610b6b57610b6b6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff90811691508616811015610b9e578095505b505b80610baa816110fe565b915050610a6e565b505b50508080610bc1906110fe565b9150506109cd565b50612710610bdb61ffff83168761122f565b1015610bed57600093505050506104be565b612710610bfe61ffff83168761122f565b610c089190611246565b9695505050505050565b828054828255906000526020600020908101928215610c67579160200282015b82811115610c6757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610c32565b50610c73929150610daf565b5090565b82805482825590600052602060002090601f01602090048101928215610c675791602002820160005b83821115610cde57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610ca0565b8015610d0b5782816101000a81549060ff0219169055600101602081600001049283019260010302610cde565b5050610c73929150610daf565b82805482825590600052602060002090600f01601090048101928215610c675791602002820160005b83821115610d8157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610d41565b8015610d0b5782816101000a81549061ffff0219169055600201602081600101049283019260010302610d81565b5b80821115610c735760008155600101610db0565b600060208284031215610dd657600080fd5b5035919050565b600060208284031215610def57600080fd5b81358015158114610dff57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e4557610e45610e06565b604052919050565b600067ffffffffffffffff821115610e6757610e67610e06565b5060051b60200190565b80356001600160a01b0381168114610e8857600080fd5b919050565b600082601f830112610e9e57600080fd5b81356020610eb3610eae83610e4d565b610e1c565b82815260059290921b84018101918181019086841115610ed257600080fd5b8286015b84811015610efd57803560ff81168114610ef05760008081fd5b8352918301918301610ed6565b509695505050505050565b600082601f830112610f1957600080fd5b81356020610f29610eae83610e4d565b82815260059290921b84018101918181019086841115610f4857600080fd5b8286015b84811015610efd57803561ffff81168114610f675760008081fd5b8352918301918301610f4c565b600080600060608486031215610f8957600080fd5b833567ffffffffffffffff80821115610fa157600080fd5b818601915086601f830112610fb557600080fd5b81356020610fc5610eae83610e4d565b82815260059290921b8401810191818101908a841115610fe457600080fd5b948201945b8386101561100957610ffa86610e71565b82529482019490820190610fe9565b9750508701359250508082111561101f57600080fd5b61102b87838801610e8d565b9350604086013591508082111561104157600080fd5b5061104e86828701610f08565b9150509250925092565b6000806040838503121561106b57600080fd5b61107483610e71565b946020939093013593505050565b60006020828403121561109457600080fd5b6104bb82610e71565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611110576111106110e8565b5060010190565b600081518084526020808501945080840160005b8381101561114b57815161ffff168752958201959082019060010161112b565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156111985781516001600160a01b031684529284019290840190600101611173565b5050508381038285015285518082528683019183019060005b818110156111d057835160ff16835292840192918401916001016111b1565b505084810360408601526111e48187611117565b98975050505050505050565b818103818111156104be576104be6110e8565b60006020828403121561121557600080fd5b5051919050565b808201808211156104be576104be6110e8565b80820281158282048414176104be576104be6110e8565b60008261126357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220dd3d05b6eb20f16dc94f69e9ee3d5c3890807a850dbab73f2d9c4263cb32f07864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063925af0ad11610071578063925af0ad146101285780639ad280c01461013b5780639b52401b14610160578063e604a50514610173578063efb36c1414610197578063f2fde38b146101b857600080fd5b80630bb4d82a146100ae578063249d39e9146100de578063715018a6146100fa57806383df57c8146101045780638da5cb5b14610117575b600080fd5b6100c16100bc366004610dc4565b6101cb565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761271081565b60405161ffff90911681526020016100d5565b6101026101f5565b005b610102610112366004610ddd565b610234565b6000546001600160a01b03166100c1565b6100e7610136366004610dc4565b6102b6565b61014e610149366004610dc4565b6102ee565b60405160ff90911681526020016100d5565b61010261016e366004610f74565b610322565b60005461018790600160a01b900460ff1681565b60405190151581526020016100d5565b6101aa6101a5366004611058565b61048d565b6040519081526020016100d5565b6101026101c6366004611082565b6104c4565b600381815481106101db57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146102285760405162461bcd60e51b815260040161021f9061109d565b60405180910390fd5b610232600061055f565b565b6000546001600160a01b0316331461025e5760405162461bcd60e51b815260040161021f9061109d565b60008054821515600160a01b0260ff60a01b199091161790556040517f84d96694db408e58df256997df18730ccab56df8741b6b857690a31463e0bd8e906102ab90831515815260200190565b60405180910390a150565b600281815481106102c657600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b600181815481106102fe57600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6000546001600160a01b0316331461034c5760405162461bcd60e51b815260040161021f9061109d565b8251600081900361037057604051634ec4810560e11b815260040160405180910390fd5b60005b818110156103d95760006001600160a01b0316858281518110610398576103986110d2565b60200260200101516001600160a01b0316036103c75760405163d92e233d60e01b815260040160405180910390fd5b806103d1816110fe565b915050610373565b50815183511415806103f257506103f083836105af565b155b1561041057604051634ec4810560e11b815260040160405180910390fd5b8351610423906003906020870190610c12565b508251610437906001906020860190610c77565b50815161044b906002906020850190610d18565b507f403023d895079eb1f2e67e170a4240963ea9a82bf2d0e87afc6b17ff41814fde84848460405161047f93929190611156565b60405180910390a150505050565b60008054600160a01b900460ff16156104b1576104aa83836106f3565b90506104be565b6104bb838361098a565b90505b92915050565b6000546001600160a01b031633146104ee5760405162461bcd60e51b815260040161021f9061109d565b6001600160a01b0381166105535760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021f565b61055c8161055f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008251600014806105df5750826000815181106105cf576105cf6110d2565b602002602001015160ff16600014155b156105fd57604051636c2b7e2d60e11b815260040160405180910390fd5b815160005b818110156106e85780156106d6578361061c6001836111f0565b8151811061062c5761062c6110d2565b602002602001015161ffff1684828151811061064a5761064a6110d2565b602002602001015161ffff16106106745760405163c6cc5d7f60e01b815260040160405180910390fd5b846106806001836111f0565b81518110610690576106906110d2565b602002602001015160ff168582815181106106ad576106ad6110d2565b602002602001015160ff16116106d657604051636c2b7e2d60e11b815260040160405180910390fd5b806106e0816110fe565b915050610602565b506001949350505050565b60035460015460028054600093929184918291908290610715576107156110d2565b600091825260208220601082040154600f9091166002026101000a900461ffff1691505b848110156107f057600060038281548110610756576107566110d2565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038b81166004830152909116915081906370a0823190602401602060405180830381865afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611203565b6107da908561121c565b93505080806107e8906110fe565b915050610739565b5081156109405760015b8381101561093e5760018181548110610815576108156110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416831015610894576000600261084b6001846111f0565b8154811061085b5761085b6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff9081169150831681101561088e578092505b5061093e565b600181815481106108a7576108a76110d2565b60009182526020918290209181049091015460ff601f9092166101000a9004168314806108dd57506108da6001856111f0565b81145b1561092c576000600282815481106108f7576108f76110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff9081169150831681101561092a578092505b505b80610936816110fe565b9150506107fa565b505b61271061095161ffff83168861122f565b10156109645760009450505050506104be565b61271061097561ffff83168861122f565b61097f9190611246565b979650505050505050565b600354600154600280546000939291849182906109a9576109a96110d2565b600091825260208220601082040154600f9091166002026101000a900461ffff1691505b83811015610bc9576000600382815481106109ea576109ea6110d2565b60009182526020822001546040516370a0823160e01b81526001600160a01b038b81166004830152909116925082906370a0823190602401602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190611203565b90508015610bb45760015b85811015610bb25760018181548110610a8957610a896110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416821015610b085760006002610abf6001846111f0565b81548110610acf57610acf6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff90811691508616811015610b02578095505b50610bb2565b60018181548110610b1b57610b1b6110d2565b60009182526020918290209181049091015460ff601f9092166101000a900416821480610b515750610b4e6001876111f0565b81145b15610ba057600060028281548110610b6b57610b6b6110d2565b60009182526020909120601082040154600f9091166002026101000a900461ffff90811691508616811015610b9e578095505b505b80610baa816110fe565b915050610a6e565b505b50508080610bc1906110fe565b9150506109cd565b50612710610bdb61ffff83168761122f565b1015610bed57600093505050506104be565b612710610bfe61ffff83168761122f565b610c089190611246565b9695505050505050565b828054828255906000526020600020908101928215610c67579160200282015b82811115610c6757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610c32565b50610c73929150610daf565b5090565b82805482825590600052602060002090601f01602090048101928215610c675791602002820160005b83821115610cde57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610ca0565b8015610d0b5782816101000a81549060ff0219169055600101602081600001049283019260010302610cde565b5050610c73929150610daf565b82805482825590600052602060002090600f01601090048101928215610c675791602002820160005b83821115610d8157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302610d41565b8015610d0b5782816101000a81549061ffff0219169055600201602081600101049283019260010302610d81565b5b80821115610c735760008155600101610db0565b600060208284031215610dd657600080fd5b5035919050565b600060208284031215610def57600080fd5b81358015158114610dff57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e4557610e45610e06565b604052919050565b600067ffffffffffffffff821115610e6757610e67610e06565b5060051b60200190565b80356001600160a01b0381168114610e8857600080fd5b919050565b600082601f830112610e9e57600080fd5b81356020610eb3610eae83610e4d565b610e1c565b82815260059290921b84018101918181019086841115610ed257600080fd5b8286015b84811015610efd57803560ff81168114610ef05760008081fd5b8352918301918301610ed6565b509695505050505050565b600082601f830112610f1957600080fd5b81356020610f29610eae83610e4d565b82815260059290921b84018101918181019086841115610f4857600080fd5b8286015b84811015610efd57803561ffff81168114610f675760008081fd5b8352918301918301610f4c565b600080600060608486031215610f8957600080fd5b833567ffffffffffffffff80821115610fa157600080fd5b818601915086601f830112610fb557600080fd5b81356020610fc5610eae83610e4d565b82815260059290921b8401810191818101908a841115610fe457600080fd5b948201945b8386101561100957610ffa86610e71565b82529482019490820190610fe9565b9750508701359250508082111561101f57600080fd5b61102b87838801610e8d565b9350604086013591508082111561104157600080fd5b5061104e86828701610f08565b9150509250925092565b6000806040838503121561106b57600080fd5b61107483610e71565b946020939093013593505050565b60006020828403121561109457600080fd5b6104bb82610e71565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611110576111106110e8565b5060010190565b600081518084526020808501945080840160005b8381101561114b57815161ffff168752958201959082019060010161112b565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156111985781516001600160a01b031684529284019290840190600101611173565b5050508381038285015285518082528683019183019060005b818110156111d057835160ff16835292840192918401916001016111b1565b505084810360408601526111e48187611117565b98975050505050505050565b818103818111156104be576104be6110e8565b60006020828403121561121557600080fd5b5051919050565b808201808211156104be576104be6110e8565b80820281158282048414176104be576104be6110e8565b60008261126357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220dd3d05b6eb20f16dc94f69e9ee3d5c3890807a850dbab73f2d9c4263cb32f07864736f6c63430008150033",
  "devdoc": {
    "details": "When combineNftHoldings is true the contract will combine the user's balance across all NFT contracts in the nftContracts array when determining fees. Otherwise, the contract will only take  the user's highest balance out of the nftContracts.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCombine(bool)": {
        "details": "When true, holdings across all specified collections in nftContracts will be combined to set the NFT count that is used when determining the _feeBps in _getFees."
      },
      "setFees(address[],uint8[],uint16[])": {
        "details": "Each amount in _tokenAmounts must have a corresponding bps value in _thresholdBps. Bps values should  decrease at each index, and token amounts should increase at each index. This maintains that the more NFTs a user holds, the lower the fee bps."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Contract to calculate fees for FortiFi Vaults",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidAmounts()": [
        {
          "notice": "Error caused NFT amounts array is invalid"
        }
      ],
      "InvalidArrayLength()": [
        {
          "notice": "Error caused by mismatching array lengths"
        }
      ],
      "InvalidBps()": [
        {
          "notice": "Error caused when bps does not equal 10_000"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error caused by using 0 address as a parameter"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getFees(address,uint256)": {
        "notice": "Function to determine fees due based on a user's NFT holdings and amount of profit"
      },
      "setCombine(bool)": {
        "notice": "Function to set combineNFTHoldings state variable. "
      },
      "setFees(address[],uint8[],uint16[])": {
        "notice": "Function to set new values for NFT contracts, threshold amounts, and thresholdBps"
      }
    },
    "notice": "This contract is used by FortiFi Vaults to calculate fees based on a user's NFT holdings. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/fee-calculators/FortiFiFeeCalculator.sol:FortiFiFeeCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4076,
        "contract": "contracts/fee-calculators/FortiFiFeeCalculator.sol:FortiFiFeeCalculator",
        "label": "combineNftHoldings",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4079,
        "contract": "contracts/fee-calculators/FortiFiFeeCalculator.sol:FortiFiFeeCalculator",
        "label": "tokenAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 4082,
        "contract": "contracts/fee-calculators/FortiFiFeeCalculator.sol:FortiFiFeeCalculator",
        "label": "thresholdBps",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 4085,
        "contract": "contracts/fee-calculators/FortiFiFeeCalculator.sol:FortiFiFeeCalculator",
        "label": "nftContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}