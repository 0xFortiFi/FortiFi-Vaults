{
  "address": "0x2Adf67fDcd80cafcA0201Ef6c3C4daF39A26Fda8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCalculator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeOracle",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isFortiFi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSAMS",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMASS.Strategy[]",
          "name": "_strategies",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CantAddToReceipt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantWithdrawStrategyReceipts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToRefund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBps",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMinDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStrategies",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyStrategies",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IMASS.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ApprovalsRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IMASS.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCalculator",
          "type": "address"
        }
      ],
      "name": "FeeCalculatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeManager",
          "type": "address"
        }
      ],
      "name": "FeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "NativeOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PauseStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IMASS.TokenInfo",
          "name": "tokenInfo",
          "type": "tuple"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "slippage",
          "type": "uint16"
        }
      ],
      "name": "SlippageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isFortiFi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSAMS",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IMASS.Strategy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "StrategiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_DEADLINE_BUFFER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WNATIVE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IMASS.TokenInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IMASS.TokenInfo",
          "name": "_info",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCalc",
      "outputs": [
        {
          "internalType": "contract IFortiFiFeeCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMgr",
      "outputs": [
        {
          "internalType": "contract IFortiFiFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategies",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isFortiFi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSAMS",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMASS.Strategy[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeOracle",
      "outputs": [
        {
          "internalType": "contract IFortiFiPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "rebalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposit",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "strategy",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "depositToken",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "router",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "oracle",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isFortiFi",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSAMS",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint16",
                      "name": "bps",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint8",
                      "name": "decimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IMASS.Strategy",
                  "name": "strategy",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "receipt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IMASS.Position[]",
              "name": "positions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IMASS.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_bps",
          "type": "uint16[]"
        }
      ],
      "name": "setBpsForStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setFeeCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setNativeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_amount",
          "type": "uint16"
        }
      ],
      "name": "setSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isFortiFi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSAMS",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMASS.Strategy[]",
          "name": "_strategies",
          "type": "tuple[]"
        }
      ],
      "name": "setStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isFortiFi",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSAMS",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
  "receipt": {
    "to": null,
    "from": "0x625d271F634eE0804CCc573C4679aA3AeE475B62",
    "contractAddress": "0x2Adf67fDcd80cafcA0201Ef6c3C4daF39A26Fda8",
    "transactionIndex": 6,
    "gasUsed": "6208226",
    "logsBloom": "0x
    "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636",
    "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0x2Adf67fDcd80cafcA0201Ef6c3C4daF39A26Fda8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000625d271f634ee0804ccc573c4679aa3aee475b62"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x000000000000000000000000f964894470afc11037f6bcb38609f77e9eba9851"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 19,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x000000000000000000000000b97d7c44ca03aba8d41fdac81683312e4acbba00"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 20,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 21,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 22,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x000000000000000000000000fc7427aeb2c76487aef5c20736c2197f139d898b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 23,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 24,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 25,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x000000000000000000000000c8ceea18c2e168c6e767422c8d144c55545d23e9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 26,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 27,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002adf67fdcd80cafca0201ef6c3c4daf39a26fda8",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 28,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0x2Adf67fDcd80cafcA0201Ef6c3C4daF39A26Fda8",
        "topics": [
          "0x3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a6"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 41805564,
        "transactionHash": "0x24fa39eea970e5fbd32e7e91abded9e50f6dc838b4198a21ac2381e77e4042d3",
        "address": "0x2Adf67fDcd80cafcA0201Ef6c3C4daF39A26Fda8",
        "topics": [
          "0xe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e77"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000b97d7c44ca03aba8d41fdac81683312e4acbba00000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c700000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000157c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000fc7427aeb2c76487aef5c20736c2197f139d898b000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c700000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ca0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000c8ceea18c2e168c6e767422c8d144c55545d23e90000000000000000000000002b2c81e08f1af8835a78bb2a90ae924ace0ea4be00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d40000000000000000000000000c53b73efdde61874c945395a813253326de8eea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ca0000000000000000000000000000000000000000000000000000000000000012",
        "logIndex": 30,
        "blockHash": "0xdeef4a144d9aa87c0f50a812b22c11f54c68dfb764d3c8772eb9b4cfc00bc636"
      }
    ],
    "blockNumber": 41805564,
    "cumulativeGasUsed": "7165633",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "FortiFi WAVAX MASS Vault",
    "ffWAVAX",
    "ipfs://bafybeic35wrmxrotb2e2rnnqe6a3twakuoy4vxtlpu3yscqaj2g44s4cya/WAVAX.json",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xf964894470AfC11037f6BCB38609f77e9EBA9851",
    "0xC15711C7C8DEAc7A360f9B8826E7c151088D0d8C",
    "0xdFABbc3d82b8234A88A9f64faAB1f514a857a3dF",
    [
      {
        "strategy": "0xb97D7C44cA03abA8d41FDaC81683312e4ACbba00",
        "depositToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "router": "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
        "oracle": "0x0000000000000000000000000000000000000000",
        "isFortiFi": false,
        "isSAMS": false,
        "bps": 5500,
        "decimals": 18
      },
      {
        "strategy": "0xfc7427AEb2c76487Aef5c20736C2197F139d898b",
        "depositToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "router": "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
        "oracle": "0x0000000000000000000000000000000000000000",
        "isFortiFi": true,
        "isSAMS": false,
        "bps": 2250,
        "decimals": 18
      },
      {
        "strategy": "0xc8cEeA18c2E168C6e767422c8d144c55545D23e9",
        "depositToken": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "router": "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
        "oracle": "0x0C53b73EfDdE61874C945395a813253326dE8eEA",
        "isFortiFi": false,
        "isSAMS": false,
        "bps": 2250,
        "decimals": 18
      }
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "0605e568590dca4063b361095bad8b7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCalculator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeOracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy[]\",\"name\":\"_strategies\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantAddToReceipt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantWithdrawStrategyReceipts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToRefund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStrategies\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyStrategies\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ApprovalsRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCalculator\",\"type\":\"address\"}],\"name\":\"FeeCalculatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NativeOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PauseStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"}],\"name\":\"SlippageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IMASS.Strategy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"StrategiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_DEADLINE_BUFFER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCalc\",\"outputs\":[{\"internalType\":\"contract IFortiFiFeeCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMgr\",\"outputs\":[{\"internalType\":\"contract IFortiFiFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeOracle\",\"outputs\":[{\"internalType\":\"contract IFortiFiPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rebalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"receipt\",\"type\":\"uint256\"}],\"internalType\":\"struct IMASS.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IMASS.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_bps\",\"type\":\"uint16[]\"}],\"name\":\"setBpsForStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setFeeCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setNativeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IMASS.Strategy[]\",\"name\":\"_strategies\",\"type\":\"tuple[]\"}],\"name\":\"setStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFortiFi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSAMS\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"deposit(uint256)\":{\"details\":\"The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token.  The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt  tokens received for later withdrawal.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalance(uint256)\":{\"details\":\"This function utilizes the internal _deposit and _withdraw functions to rebalance based on  the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total  deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo before completing the transaction.\"},\"refreshApprovals()\":{\"details\":\"Since contract never holds deposit tokens max approvals should not matter. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"withdraw(uint256)\":{\"details\":\"Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due,  and the fee manager will distribute those fees before transfering the user their proceeds.\"}},\"title\":\"Contract for FortiFi Wrapped Native MASS Vaults\",\"version\":1},\"userdoc\":{\"errors\":{\"CantAddToReceipt()\":[{\"notice\":\"Error caused when strategies change and a receipt cannot be added to without rebalancing\"}],\"CantWithdrawStrategyReceipts()\":[{\"notice\":\"Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\"}],\"ContractPaused()\":[{\"notice\":\"Error caused when trying to transact with contract while paused\"}],\"DuplicateStrategy()\":[{\"notice\":\"Error caused by trying to set a strategy more than once\"}],\"FailedToRefund()\":[{\"notice\":\"Error thrown when refunding native token fails\"}],\"InvalidArrayLength()\":[{\"notice\":\"Error caused by mismatching array lengths\"}],\"InvalidBps()\":[{\"notice\":\"Error caused when bps does not equal 10_000\"}],\"InvalidDeposit()\":[{\"notice\":\"Error caused by trying to deposit 0\"}],\"InvalidMinDeposit()\":[{\"notice\":\"Error caused by trying to set minDeposit below BPS\"}],\"InvalidOracle()\":[{\"notice\":\"Error caused when trying to set oracle to an invalid address\"}],\"InvalidSlippage()\":[{\"notice\":\"Error caused by trying to set a slippage too high\"}],\"NoStrategies()\":[{\"notice\":\"Error caused when strategies array is empty\"}],\"NotTokenOwner()\":[{\"notice\":\"Error caused by trying to use a token not owned by user\"}],\"SwapFailed()\":[{\"notice\":\"Error caused when swap fails\"}],\"TooManyStrategies()\":[{\"notice\":\"Error caused by trying to set too many strategies\"}],\"ZeroAddress()\":[{\"notice\":\"Error caused by using 0 address as a parameter\"}]},\"kind\":\"user\",\"methods\":{\"add(uint256,uint256)\":{\"notice\":\"This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their  deposit without needing to burn/withdraw first. \"},\"deposit(uint256)\":{\"notice\":\"This function is used when a user does not already have a receipt (ERC1155). \"},\"flipPaused()\":{\"notice\":\"Function to flip paused state\"},\"getStrategies()\":{\"notice\":\"View function that returns all strategies\"},\"rebalance(uint256)\":{\"notice\":\"This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. \"},\"recoverERC20(address,uint256)\":{\"notice\":\"Emergency function to recover stuck ERC20 tokens\"},\"refreshApprovals()\":{\"notice\":\"Function to set max approvals for router and strategies. \"},\"setBpsForStrategies(uint16[])\":{\"notice\":\"This function allows for changing the allocations of current strategies\"},\"setFeeCalculator(address)\":{\"notice\":\"Function to set new FortiFiFeeCalculator contract\"},\"setFeeManager(address)\":{\"notice\":\"Function to set new FortiFiFeeManager contract\"},\"setMinDeposit(uint256)\":{\"notice\":\"Function to set minimum deposit\"},\"setNativeOracle(address)\":{\"notice\":\"Function to set new native oracle contract\"},\"setSlippage(uint16)\":{\"notice\":\"Function to set slippage used in swap functions. Must be 1-5% (100-500)\"},\"setStrategies((address,address,address,address,bool,bool,uint16,uint8)[])\":{\"notice\":\"This function sets up the underlying strategies used by the vault.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Override to allow FortiFiStrategy contracts to verify that specified vaults implement IMASS interface\"},\"withdraw(uint256)\":{\"notice\":\"This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. \"}},\"notice\":\"This contract allows for the deposit of wrapped native tokens, which is then swapped into various assets and deposited in to  multiple yield-bearing strategies. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/FortiFiWNativeMASSVault.sol\":\"FortiFiWNativeMASSVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe243a49f159c97fdd011edb7a8ed1b48175f0fa6b8592bb6dcccac7e22d8c37b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/fee-calculators/interfaces/IFortiFiFeeCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiFeeCalculator Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiFeeCalculator\\r\\ninterface IFortiFiFeeCalculator {\\r\\n    function getFees(address user, uint256 amount) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x16e344e0c95704f9c49d93cbc4a8a2604b457cfad9b42964b57eba47a2fd2f27\",\"license\":\"GPL-3.0-only\"},\"contracts/fee-managers/interfaces/IFortiFiFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiFeeManager Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiFeeManager\\r\\ninterface IFortiFiFeeManager {\\r\\n    function collectFees(address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x806f418262cceb182e6f70442d42d1b55c3ab5b0ecad9fc5993b7c07c3d4deb3\",\"license\":\"GPL-3.0-only\"},\"contracts/oracles/interfaces/IFortiFiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiPriceOracle Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiPriceOracle\\r\\ninterface IFortiFiPriceOracle {\\r\\n    function getPrice() external view returns(uint256);\\r\\n    function token() external view returns(address);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\",\"keccak256\":\"0x0de4b5cc230d6051e2384a2ea04cba82bb24d11389c4743f1cd3cb5b9f152337\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IStrategy Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for basic strategies used by FortiFi SAMS Vaults\\r\\ninterface IStrategy {\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function deposit(uint amount) external;\\r\\n    function depositToFortress(uint amount, address user, uint tokenId) external;\\r\\n    function withdraw(uint amount) external;\\r\\n    function withdrawFromFortress(uint amount, address user, uint tokenId) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x6160822e06a8d6c823da363871470ba4e5f33338cb1d89f332b9fd3ee4b60c67\",\"license\":\"GPL-3.0-only\"},\"contracts/vaults/FortiFiWNativeMASSVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// FortiFiWNativeMASSVault by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../strategies/interfaces/IStrategy.sol\\\";\\r\\nimport \\\"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\\\";\\r\\nimport \\\"../fee-managers/interfaces/IFortiFiFeeManager.sol\\\";\\r\\nimport \\\"../oracles/interfaces/IFortiFiPriceOracle.sol\\\";\\r\\nimport \\\"./interfaces/IMASS.sol\\\";\\r\\nimport \\\"./interfaces/ISAMS.sol\\\";\\r\\nimport \\\"./interfaces/IRouter.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @notice Error caused by trying to set a strategy more than once\\r\\nerror DuplicateStrategy();\\r\\n\\r\\n/// @notice Error caused by trying to set too many strategies\\r\\nerror TooManyStrategies();\\r\\n\\r\\n/// @notice Error caused by using 0 address as a parameter\\r\\nerror ZeroAddress();\\r\\n\\r\\n/// @notice Error caused by trying to deposit 0\\r\\nerror InvalidDeposit();\\r\\n\\r\\n/// @notice Error caused by trying to withdraw 0\\r\\nerror InvalidWithdrawal();\\r\\n\\r\\n/// @notice Error caused by trying to use a token not owned by user\\r\\nerror NotTokenOwner();\\r\\n\\r\\n/// @notice Error thrown when refunding native token fails\\r\\nerror FailedToRefund();\\r\\n\\r\\n/// @notice Error caused when strategies array is empty\\r\\nerror NoStrategies();\\r\\n\\r\\n/// @notice Error caused when strategies change and a receipt cannot be added to without rebalancing\\r\\nerror CantAddToReceipt();\\r\\n\\r\\n/// @notice Error caused when swap fails\\r\\nerror SwapFailed();\\r\\n\\r\\n/// @notice Error caused when trying to use a token with less decimals than USDC\\r\\nerror InvalidDecimals();\\r\\n\\r\\n/// @notice Error caused when trying to set oracle to an invalid address\\r\\nerror InvalidOracle();\\r\\n\\r\\n/// @notice Error caused by trying to set minDeposit below BPS\\r\\nerror InvalidMinDeposit();\\r\\n\\r\\n/// @notice Error caused by trying to set a slippage too high\\r\\nerror InvalidSlippage();\\r\\n\\r\\n/// @notice Error caused by mismatching array lengths\\r\\nerror InvalidArrayLength();\\r\\n\\r\\n/// @notice Error caused when bps does not equal 10_000\\r\\nerror InvalidBps();\\r\\n\\r\\n/// @notice Error caused when trying to transact with contract while paused\\r\\nerror ContractPaused();\\r\\n\\r\\n/// @notice Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\\r\\nerror CantWithdrawStrategyReceipts();\\r\\n\\r\\n/// @title Contract for FortiFi Wrapped Native MASS Vaults\\r\\n/// @notice This contract allows for the deposit of wrapped native tokens, which is then swapped into various assets and deposited in to \\r\\n/// multiple yield-bearing strategies. \\r\\ncontract FortiFiWNativeMASSVault is IMASS, ERC1155Supply, IERC1155Receiver, Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    address public immutable wrappedNative;\\r\\n    uint8 public constant WNATIVE_DECIMALS = 18;\\r\\n    uint16 public constant SWAP_DEADLINE_BUFFER = 1800;\\r\\n    uint16 public constant BPS = 10_000;\\r\\n    uint16 public slippageBps = 100;\\r\\n    uint256 public minDeposit = 30_000;\\r\\n    uint256 public nextToken = 1;\\r\\n    bool public paused = true;\\r\\n\\r\\n    IFortiFiFeeCalculator public feeCalc;\\r\\n    IFortiFiFeeManager public feeMgr;\\r\\n    IFortiFiPriceOracle public nativeOracle;\\r\\n\\r\\n    Strategy[] public strategies;\\r\\n\\r\\n    mapping(uint256 => TokenInfo) public tokenInfo;\\r\\n\\r\\n    event Deposit(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\\r\\n    event Add(address indexed depositor, uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\\r\\n    event Rebalance(uint256 indexed tokenId, uint256 amount, TokenInfo tokenInfo);\\r\\n    event Withdrawal(address indexed depositor, uint256 indexed tokenId, uint256 amountWithdrawn, uint256 profit, uint256 fee);\\r\\n    event ApprovalsRefreshed();\\r\\n    event StrategiesSet(Strategy[]);\\r\\n    event MinDepositSet(uint256 minAmount);\\r\\n    event SlippageSet(uint16 slippage);\\r\\n    event FeeManagerSet(address feeManager);\\r\\n    event FeeCalculatorSet(address feeCalculator);\\r\\n    event NativeOracleSet(address oracle);\\r\\n    event PauseStateUpdated(bool paused);\\r\\n\\r\\n    /// @notice Used to restrict function access while paused.\\r\\n    modifier whileNotPaused() {\\r\\n        if (paused) revert ContractPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory _name, \\r\\n        string memory _symbol, \\r\\n        string memory _metadata,\\r\\n        address _wrappedNative,\\r\\n        address _feeManager,\\r\\n        address _feeCalculator,\\r\\n        address _nativeOracle,\\r\\n        Strategy[] memory _strategies) ERC1155(_metadata) {\\r\\n        if (_wrappedNative == address(0)) revert ZeroAddress();\\r\\n        if (_feeManager == address(0)) revert ZeroAddress();\\r\\n        if (_feeCalculator == address(0)) revert ZeroAddress();\\r\\n        if (_nativeOracle == address(0)) revert ZeroAddress();\\r\\n        name = _name; \\r\\n        symbol = _symbol;\\r\\n        wrappedNative = _wrappedNative;\\r\\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\\r\\n        feeMgr = IFortiFiFeeManager(_feeManager);\\r\\n        nativeOracle = IFortiFiPriceOracle(_nativeOracle);\\r\\n        setStrategies(_strategies);\\r\\n    }\\r\\n\\r\\n    receive() external payable { \\r\\n    }\\r\\n\\r\\n    /// @notice This function is used when a user does not already have a receipt (ERC1155). \\r\\n    /// @dev The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token. \\r\\n    /// The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt \\r\\n    /// tokens received for later withdrawal.\\r\\n    function deposit(uint256 _amount) external override nonReentrant whileNotPaused returns(uint256 _tokenId, TokenInfo memory _info) {\\r\\n        if (_amount < minDeposit) revert InvalidDeposit();\\r\\n        IERC20(wrappedNative).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        _tokenId = _mintReceipt();\\r\\n        _deposit(_amount, _tokenId, false);\\r\\n        _info = tokenInfo[_tokenId];\\r\\n\\r\\n        // refund left over tokens, if any\\r\\n        _refund(_info);\\r\\n\\r\\n        emit Deposit(msg.sender, _tokenId, _amount, _info);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their \\r\\n    /// deposit without needing to burn/withdraw first. \\r\\n    function add(uint256 _amount, uint256 _tokenId) external override nonReentrant whileNotPaused returns(TokenInfo memory _info) {\\r\\n        if (_amount < minDeposit) revert InvalidDeposit();\\r\\n        IERC20(wrappedNative).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\\r\\n        _deposit(_amount, _tokenId, true);\\r\\n        _info = tokenInfo[_tokenId];\\r\\n\\r\\n        // refund left over tokens, if any\\r\\n        _refund(_info);\\r\\n\\r\\n        emit Add(msg.sender, _tokenId, _amount, _info);\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. \\r\\n    /// @dev Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due, \\r\\n    /// and the fee manager will distribute those fees before transfering the user their proceeds.\\r\\n    function withdraw(uint256 _tokenId) external override nonReentrant {\\r\\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\\r\\n        _burn(msg.sender, _tokenId, 1);\\r\\n\\r\\n        (uint256 _amount, uint256 _profit) = _withdraw(_tokenId);\\r\\n        uint256 _fee = feeCalc.getFees(msg.sender, _profit);\\r\\n        feeMgr.collectFees(wrappedNative, _fee);\\r\\n        \\r\\n        IERC20(wrappedNative).safeTransfer(msg.sender, _amount - _fee);\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\t    if (!success) revert FailedToRefund();\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _tokenId, _amount, _profit, _fee);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set minimum deposit\\r\\n    function setMinDeposit(uint256 _amount) external onlyOwner {\\r\\n        if (_amount < 30_000) revert InvalidMinDeposit();\\r\\n        minDeposit = _amount;\\r\\n        emit MinDepositSet(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set slippage used in swap functions. Must be 1-5% (100-500)\\r\\n    function setSlippage(uint16 _amount) external onlyOwner {\\r\\n        if (_amount < 100 || _amount > 500) revert InvalidSlippage();\\r\\n        slippageBps = _amount;\\r\\n        emit SlippageSet(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new FortiFiFeeManager contract\\r\\n    function setFeeManager(address _contract) external onlyOwner {\\r\\n        if (_contract == address(0)) revert ZeroAddress();\\r\\n        feeMgr = IFortiFiFeeManager(_contract);\\r\\n        emit FeeManagerSet(_contract);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new FortiFiFeeCalculator contract\\r\\n    function setFeeCalculator(address _contract) external onlyOwner {\\r\\n        if (_contract == address(0)) revert ZeroAddress();\\r\\n        feeCalc = IFortiFiFeeCalculator(_contract);\\r\\n        emit FeeCalculatorSet(_contract);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new native oracle contract\\r\\n    function setNativeOracle(address _contract) external onlyOwner {\\r\\n        if (_contract == address(0)) revert ZeroAddress();\\r\\n        nativeOracle = IFortiFiPriceOracle(_contract);\\r\\n        emit NativeOracleSet(_contract);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to flip paused state\\r\\n    function flipPaused() external onlyOwner {\\r\\n        paused = !paused;\\r\\n        emit PauseStateUpdated(paused);\\r\\n    }\\r\\n\\r\\n    /// @notice Emergency function to recover stuck ERC20 tokens\\r\\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\\r\\n        uint256 _length = strategies.length;\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            if (_token == strategies[i].strategy) {\\r\\n                revert CantWithdrawStrategyReceipts();\\r\\n            }\\r\\n        }\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set max approvals for router and strategies. \\r\\n    /// @dev Since contract never holds deposit tokens max approvals should not matter. \\r\\n    function refreshApprovals() public {\\r\\n        uint256 _length = strategies.length;\\r\\n        IERC20 _depositToken = IERC20(wrappedNative);\\r\\n\\r\\n        _depositToken.approve(address(feeMgr), type(uint256).max);\\r\\n        for(uint256 i = 0; i < _length; i++) {\\r\\n            IERC20(strategies[i].depositToken).approve(strategies[i].strategy, type(uint256).max);\\r\\n            IERC20(strategies[i].depositToken).approve(strategies[i].router, type(uint256).max);\\r\\n            _depositToken.approve(strategies[i].router, type(uint256).max);\\r\\n        }\\r\\n        emit ApprovalsRefreshed();\\r\\n    }\\r\\n\\r\\n    /// @notice This function sets up the underlying strategies used by the vault.\\r\\n    function setStrategies(Strategy[] memory _strategies) public onlyOwner {\\r\\n        uint256 _length = _strategies.length;\\r\\n        if (_length == 0) revert NoStrategies();\\r\\n        if (_length > 4) revert TooManyStrategies();\\r\\n\\r\\n        address[] memory _holdStrategies = new address[](_length);\\r\\n\\r\\n        uint16 _bps = 0;\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            _bps += _strategies[i].bps;\\r\\n        }\\r\\n        if (_bps != BPS) revert InvalidBps();\\r\\n\\r\\n        delete strategies; // remove old array, if any\\r\\n\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            if (_strategies[i].strategy == address(0)) revert ZeroAddress();\\r\\n            if (_strategies[i].depositToken == address(0)) revert ZeroAddress();\\r\\n            if (_strategies[i].router == address(0)) revert ZeroAddress();\\r\\n            if (_strategies[i].depositToken != wrappedNative &&\\r\\n                (_strategies[i].oracle == address(0) ||\\r\\n                 _strategies[i].depositToken != IFortiFiPriceOracle(_strategies[i].oracle).token() ||\\r\\n                 IFortiFiPriceOracle(_strategies[i].oracle).decimals() != nativeOracle.decimals()) \\r\\n               ) revert InvalidOracle();\\r\\n            for (uint256 j = 0; j < i; j++) {\\r\\n                if (_holdStrategies[j] == _strategies[i].strategy) revert DuplicateStrategy();\\r\\n            }\\r\\n            _holdStrategies[i] = _strategies[i].strategy;\\r\\n            strategies.push(_strategies[i]);\\r\\n        }\\r\\n\\r\\n        refreshApprovals();\\r\\n        emit StrategiesSet(_strategies);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows for changing the allocations of current strategies\\r\\n    function setBpsForStrategies(uint16[] calldata _bps) external onlyOwner {\\r\\n        uint256 _length = strategies.length;\\r\\n        if (_bps.length != _length) revert InvalidArrayLength();\\r\\n        uint256 _totalBps = 0;\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            strategies[i].bps = _bps[i];\\r\\n            _totalBps += _bps[i];\\r\\n        }\\r\\n        if (_totalBps != BPS) revert InvalidBps();\\r\\n        emit StrategiesSet(strategies);\\r\\n    }\\r\\n\\r\\n    /// @notice This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. \\r\\n    /// @dev This function utilizes the internal _deposit and _withdraw functions to rebalance based on \\r\\n    /// the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total \\r\\n    /// deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo\\r\\n    /// before completing the transaction.\\r\\n    function rebalance(uint256 _tokenId) public override nonReentrant whileNotPaused returns(TokenInfo memory) {\\r\\n        if (balanceOf(msg.sender, _tokenId) == 0) revert NotTokenOwner();\\r\\n        uint256 _originalDeposit = tokenInfo[_tokenId].deposit;\\r\\n\\r\\n        // withdraw from strategies first\\r\\n        (uint256 _amount, ) = _withdraw(_tokenId);\\r\\n\\r\\n        //delete token info\\r\\n        delete tokenInfo[_tokenId];\\r\\n\\r\\n        // deposit to (possibly new) strategies\\r\\n        _deposit(_amount, _tokenId, false);\\r\\n\\r\\n        // set deposit to original deposit to ensure withdrawal profit calculations are correct\\r\\n        tokenInfo[_tokenId].deposit = _originalDeposit;\\r\\n        TokenInfo memory _info = tokenInfo[_tokenId];\\r\\n\\r\\n        // refund left over tokens, if any\\r\\n        _refund(_info);\\r\\n\\r\\n        emit Rebalance(_tokenId, _amount, _info);\\r\\n        return _info;\\r\\n    }\\r\\n\\r\\n    /// @notice View function that returns all strategies\\r\\n    function getStrategies() public view override returns(Strategy[] memory) {\\r\\n        return strategies;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to mint ERC1155 receipts and advance nextToken state variable\\r\\n    function _mintReceipt() internal returns(uint256 _tokenId) {\\r\\n        _tokenId = nextToken;\\r\\n        _mint(msg.sender, _tokenId, 1, \\\"\\\");\\r\\n        nextToken += 1;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal swap function for deposits.\\r\\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\\r\\n    /// since this contract does not hold strategy deposit tokens, return contract balance after swap.\\r\\n    function _swapFromDepositTokenDirect(uint256 _amount, Strategy memory _strat) internal returns(uint256) {\\r\\n        address _strategyDepositToken = _strat.depositToken;\\r\\n        address[] memory _route = new address[](2);\\r\\n        IRouter _router = IRouter(_strat.router);\\r\\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\\r\\n        \\r\\n        _route[0] = wrappedNative;\\r\\n        _route[1] = _strategyDepositToken;\\r\\n\\r\\n        uint256 _latestPriceNative = nativeOracle.getPrice();\\r\\n        uint256 _latestPriceTokenB = _oracle.getPrice();\\r\\n        uint256 _swapAmount = _amount * _latestPriceNative * 10**18 / _latestPriceTokenB / 10**18 / 10**(WNATIVE_DECIMALS - _strat.decimals);\\r\\n\\r\\n        _router.swapExactTokensForTokens(_amount, \\r\\n            (_swapAmount * (BPS - slippageBps) / BPS), \\r\\n            _route, \\r\\n            address(this), \\r\\n            block.timestamp + SWAP_DEADLINE_BUFFER);\\r\\n\\r\\n        uint256 _strategyDepositTokenBalance = IERC20(_strategyDepositToken).balanceOf(address(this));\\r\\n        if (_strategyDepositTokenBalance == 0) revert SwapFailed();\\r\\n\\r\\n        return _strategyDepositTokenBalance;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal swap function for withdrawals\\r\\n    /// @dev This function can use any uniswapV2-style router to swap from deposited tokens to the strategy deposit tokens.\\r\\n    function _swapToDepositTokenDirect(uint256 _amount, Strategy memory _strat) internal {\\r\\n        address _strategyDepositToken = _strat.depositToken;\\r\\n        address[] memory _route = new address[](2);\\r\\n        IRouter _router = IRouter(_strat.router);\\r\\n        IFortiFiPriceOracle _oracle = IFortiFiPriceOracle(_strat.oracle);\\r\\n\\r\\n        _route[0] = _strategyDepositToken;\\r\\n        _route[1] = wrappedNative;\\r\\n        \\r\\n        uint256 _latestPriceNative = nativeOracle.getPrice();\\r\\n        uint256 _latestPriceTokenB = _oracle.getPrice();\\r\\n        uint256 _swapAmount = _amount * _latestPriceTokenB / 10**18 / _latestPriceNative * 10**18 * 10**(WNATIVE_DECIMALS - _strat.decimals);\\r\\n\\r\\n        _router.swapExactTokensForTokens(_amount, \\r\\n            (_swapAmount * (BPS - slippageBps) / BPS), \\r\\n            _route, \\r\\n            address(this), \\r\\n            block.timestamp + SWAP_DEADLINE_BUFFER);\\r\\n\\r\\n        uint256 _depositTokenBalance = IERC20(wrappedNative).balanceOf(address(this));\\r\\n        if (_depositTokenBalance == 0) revert SwapFailed();\\r\\n    }\\r\\n\\r\\n    /// @notice Internal deposit function.\\r\\n    /// @dev This function will loop through the strategies in order split/swap/deposit the user's deposited tokens. \\r\\n    /// The function handles additions slightly differently, requiring that the current strategies match the \\r\\n    /// strategies that were set at the time of original deposit. \\r\\n    function _deposit(uint256 _amount, uint256 _tokenId, bool _isAdd) internal {\\r\\n        TokenInfo storage _info = tokenInfo[_tokenId];\\r\\n        uint256 _remainder = _amount;\\r\\n\\r\\n        uint256 _length = strategies.length;\\r\\n        for (uint256 i = 0; i < _length; i++) {\\r\\n            Strategy memory _strategy = strategies[i];\\r\\n\\r\\n            // cannot add to deposit if strategies have changed. must rebalance first\\r\\n            if (_isAdd) {\\r\\n                if (_strategy.strategy != _info.positions[i].strategy.strategy) revert CantAddToReceipt();\\r\\n            }\\r\\n            \\r\\n            bool _isSAMS = _strategy.isSAMS;\\r\\n            uint256 _receiptToken = 0;\\r\\n            uint256 _depositAmount = 0;\\r\\n\\r\\n            // split deposit and swap if necessary\\r\\n            if (i == (_length - 1)) {\\r\\n                if (wrappedNative != _strategy.depositToken) {\\r\\n                    _depositAmount = _swapFromDepositTokenDirect(_remainder, _strategy);\\r\\n                } else {\\r\\n                    _depositAmount = _remainder;\\r\\n                }    \\r\\n            } else {\\r\\n                uint256 _split = _amount * _strategy.bps / BPS;\\r\\n                if (wrappedNative != _strategy.depositToken) {\\r\\n                    _depositAmount = _swapFromDepositTokenDirect(_split, _strategy);\\r\\n                } else {\\r\\n                    _depositAmount = _split;\\r\\n                }    \\r\\n                _remainder -= _split;\\r\\n            }\\r\\n            \\r\\n            if (_isSAMS) {\\r\\n                if (_isAdd) {\\r\\n                    _addSAMS(_depositAmount, _strategy.strategy, _info.positions[i].receipt);\\r\\n                } else {\\r\\n                    // if position is new, deposit and push to positions\\r\\n                    _receiptToken = _depositSAMS(_depositAmount, _strategy.strategy);\\r\\n                    _info.positions.push(Position({strategy: _strategy, receipt: _receiptToken}));\\r\\n                }\\r\\n            } else {\\r\\n                IStrategy _strat = IStrategy(_strategy.strategy);\\r\\n\\r\\n                // set current receipt balance\\r\\n                uint256 _receiptBalance = _strat.balanceOf(address(this));\\r\\n\\r\\n                // deposit based on type of strategy\\r\\n                if (_strategy.isFortiFi) {\\r\\n                    _strat.depositToFortress(_depositAmount, msg.sender, _tokenId);\\r\\n                } else {\\r\\n                    _strat.deposit(_depositAmount);\\r\\n                }\\r\\n\\r\\n                if (_isAdd) {\\r\\n                    _info.positions[i].receipt += _strat.balanceOf(address(this)) - _receiptBalance;\\r\\n                } else {\\r\\n                    _info.positions.push(Position({strategy: _strategy, receipt: _strat.balanceOf(address(this)) - _receiptBalance}));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _info.deposit += _amount;\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to deposit to SAMS vault\\r\\n    function _depositSAMS(uint256 _amount, address _strategy) internal returns (uint256 _receiptToken) {\\r\\n        ISAMS _sams = ISAMS(_strategy);\\r\\n        ISAMS.TokenInfo memory _receiptInfo;\\r\\n\\r\\n        (_receiptToken, _receiptInfo) = _sams.deposit(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to add to SAMS vault\\r\\n    function _addSAMS(uint256 _amount, address _strategy, uint256 _tokenId) internal {\\r\\n        ISAMS _sams = ISAMS(_strategy);\\r\\n        ISAMS.TokenInfo memory _receiptInfo;\\r\\n\\r\\n        _receiptInfo = _sams.add(_amount, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal withdraw function that withdraws from strategies and calculates profits.\\r\\n    function _withdraw(uint256 _tokenId) internal returns(uint256 _proceeds, uint256 _profit) {\\r\\n        TokenInfo memory _info = tokenInfo[_tokenId];\\r\\n        uint256 _length = _info.positions.length;\\r\\n        _proceeds = 0;\\r\\n\\r\\n        for (uint256 i = 0 ; i < _length; i++) {\\r\\n            // withdraw based on the type of underlying strategy, if not SAMS check if FortiFi strategy\\r\\n            if (_info.positions[i].strategy.isSAMS) {\\r\\n                ISAMS _strat = ISAMS(_info.positions[i].strategy.strategy);\\r\\n                _strat.withdraw(_info.positions[i].receipt);\\r\\n            } else {\\r\\n                IStrategy _strat = IStrategy(_info.positions[i].strategy.strategy);\\r\\n                if (_info.positions[i].strategy.isFortiFi) {\\r\\n                    _strat.withdrawFromFortress(_info.positions[i].receipt, msg.sender, _tokenId);\\r\\n                } else {\\r\\n                    _strat.withdraw(_info.positions[i].receipt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // swap out for deposit tokens if needed\\r\\n            if (_info.positions[i].strategy.depositToken != wrappedNative) {\\r\\n                uint256 _strategyDepositTokenProceeds = IERC20(_info.positions[i].strategy.depositToken).balanceOf(address(this));\\r\\n                _swapToDepositTokenDirect(_strategyDepositTokenProceeds, _info.positions[i].strategy);\\r\\n            }  \\r\\n        }\\r\\n\\r\\n        _proceeds = IERC20(wrappedNative).balanceOf(address(this));\\r\\n        \\r\\n        if (_proceeds > _info.deposit) {\\r\\n            _profit = _proceeds - _info.deposit;\\r\\n        } else {\\r\\n            _profit = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to refund left over tokens from deposit/add/rebalance transactions\\r\\n    function _refund(TokenInfo memory _info) internal {\\r\\n        // Refund left over deposit tokens, if any\\r\\n        uint256 _depositTokenBalance = IERC20(wrappedNative).balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            _info.deposit -= _depositTokenBalance;\\r\\n            IERC20(wrappedNative).safeTransfer(msg.sender, _depositTokenBalance);\\r\\n        }\\r\\n\\r\\n        // Refund left over native tokens, if any\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\t    if (!success) revert FailedToRefund();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory,\\r\\n        uint256[] memory,\\r\\n        bytes memory\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    /// @notice Override to allow FortiFiStrategy contracts to verify that specified vaults implement IMASS interface\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155,IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            interfaceId == type(IMASS).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x01c6d8d8fe5bf854045517dc50cbb430823f479250020d07b5edad5bef8a5cfa\",\"license\":\"GPL-3.0-only\"},\"contracts/vaults/interfaces/IMASS.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IMASS Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFi MASS Vaults\\r\\ninterface IMASS {\\r\\n    struct Strategy {\\r\\n        address strategy;\\r\\n        address depositToken;\\r\\n        address router;\\r\\n        address oracle;\\r\\n        bool isFortiFi;\\r\\n        bool isSAMS;\\r\\n        uint16 bps;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n\\r\\n    struct Position {\\r\\n        Strategy strategy;\\r\\n        uint256 receipt;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint256 deposit;\\r\\n        Position[] positions;\\r\\n    }\\r\\n\\r\\n    function deposit(uint amount) external returns(uint256 tokenId, TokenInfo memory info);\\r\\n    function add(uint amount, uint tokenId) external returns(TokenInfo memory info);\\r\\n    function withdraw(uint amount) external;\\r\\n    function rebalance(uint tokenId) external returns(TokenInfo memory info);\\r\\n    function getStrategies() external view returns(Strategy[] memory strategies);\\r\\n}\",\"keccak256\":\"0x01f8adb5e72ccc4608b06581295683eafcd994748ecf07f239b65c209206a2ba\",\"license\":\"GPL-3.0-only\"},\"contracts/vaults/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IRouter Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Simple router interface for FortiFi MASS Vaults\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n            uint amountIn,\\r\\n            uint amountOutMin,\\r\\n            address[] calldata path,\\r\\n            address to,\\r\\n            uint deadline\\r\\n        ) external returns (uint[] memory amounts);\\r\\n    \\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x4a42dc368d5784f2a81a961ea0e0de2cd3cee00d16b21c0271914ebd0f1768b4\",\"license\":\"GPL-3.0-only\"},\"contracts/vaults/interfaces/ISAMS.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// ISAMS Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFi SAMS Vaults\\r\\ninterface ISAMS {\\r\\n    struct Strategy {\\r\\n        address strategy;\\r\\n        bool isFortiFi;\\r\\n        uint16 bps;\\r\\n    }\\r\\n\\r\\n    struct Position {\\r\\n        Strategy strategy;\\r\\n        uint256 receipt;\\r\\n    }\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint256 deposit;\\r\\n        Position[] positions;\\r\\n    }\\r\\n\\r\\n    function deposit(uint amount) external returns(uint256 tokenId, TokenInfo memory info);\\r\\n    function add(uint amount, uint tokenId) external returns(TokenInfo memory info);\\r\\n    function withdraw(uint amount) external;\\r\\n    function rebalance(uint tokenId) external returns(TokenInfo memory info);\\r\\n    function getStrategies() external view returns(Strategy[] memory strategies);\\r\\n}\",\"keccak256\":\"0x46cbf33f56f0dc490922477645374eadae737a0d7847e6d2811613186d062f13\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040526008805461ffff191660641790556175306009556001600a819055600b805460ff191690911790553480156200003957600080fd5b50604051620072ef380380620072ef8339810160408190526200005c9162000f86565b8562000068816200019e565b506200007433620001b0565b60016005556001600160a01b038516620000a15760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038416620000c95760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038316620000f15760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216620001195760405163d92e233d60e01b815260040160405180910390fd5b600662000127898262001119565b50600762000136888262001119565b506001600160a01b03858116608052600b8054610100600160a81b03191661010086841602179055600c80546001600160a01b031990811687841617909155600d8054909116918416919091179055620001908162000202565b50505050505050506200136e565b6002620001ac828262001119565b5050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6004546001600160a01b03163314620002615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b8051600081900362000286576040516356de305560e01b815260040160405180910390fd5b6004811115620002a95760405163607ed4ff60e11b815260040160405180910390fd5b6000816001600160401b03811115620002c657620002c662000d06565b604051908082528060200260200182016040528015620002f0578160200160208202803683370190505b5090506000805b838110156200034557848181518110620003155762000315620011e5565b602002602001015160c00151826200032e919062001211565b9150806200033c8162001236565b915050620002f7565b5061ffff8116612710146200036d5760405163c6cc5d7f60e01b815260040160405180910390fd5b6200037b600e600062000c92565b60005b83811015620008f35760006001600160a01b0316858281518110620003a757620003a7620011e5565b6020026020010151600001516001600160a01b031603620003db5760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b0316858281518110620003fb57620003fb620011e5565b6020026020010151602001516001600160a01b0316036200042f5760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b03168582815181106200044f576200044f620011e5565b6020026020010151604001516001600160a01b031603620004835760405163d92e233d60e01b815260040160405180910390fd5b6080516001600160a01b0316858281518110620004a457620004a4620011e5565b6020026020010151602001516001600160a01b031614158015620006ca575060006001600160a01b0316858281518110620004e357620004e3620011e5565b6020026020010151606001516001600160a01b03161480620005bb5750848181518110620005155762000515620011e5565b6020026020010151606001516001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200055f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000585919062001252565b6001600160a01b0316858281518110620005a357620005a3620011e5565b6020026020010151602001516001600160a01b031614155b80620006ca5750600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000616573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200063c919062001277565b60ff16858281518110620006545762000654620011e5565b6020026020010151606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c4919062001277565b60ff1614155b15620006e957604051639589a27d60e01b815260040160405180910390fd5b60005b8181101562000779578582815181106200070a576200070a620011e5565b6020026020010151600001516001600160a01b0316848281518110620007345762000734620011e5565b60200260200101516001600160a01b031603620007645760405163cc5fde6960e01b815260040160405180910390fd5b80620007708162001236565b915050620006ec565b508481815181106200078f576200078f620011e5565b602002602001015160000151838281518110620007b057620007b0620011e5565b60200260200101906001600160a01b031690816001600160a01b031681525050600e858281518110620007e757620007e7620011e5565b602090810291909101810151825460018181018555600094855293839020825160049092020180546001600160a01b039283166001600160a01b03199182161782559383015194810180549583169585169590951790945560408201516002850180549183169190941617909255606081015160039093018054608083015160a084015160c085015160e09095015160ff16600160c01b0260ff60c01b1961ffff909616600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b03199095169890971697909717929092171693909317929092171691909117905580620008ea8162001236565b9150506200037e565b50620008fe6200093d565b7fe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e77846040516200092f919062001295565b60405180910390a150505050565b600e54608051600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af115801562000998573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009be919062001350565b5060005b8281101562000c6457600e8181548110620009e157620009e1620011e5565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e838154811062000a2a5762000a2a620011e5565b600091825260209091206004918202015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af115801562000a8c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab2919062001350565b50600e818154811062000ac95762000ac9620011e5565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e838154811062000b125762000b12620011e5565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af115801562000b77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9d919062001350565b50816001600160a01b031663095ea7b3600e838154811062000bc35762000bc3620011e5565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af115801562000c28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c4e919062001350565b508062000c5b8162001236565b915050620009c2565b506040517f3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a690600090a15050565b508054600082556004029060005260206000209081019062000cb5919062000cb8565b50565b5b8082111562000d025780546001600160a01b031990811682556001820180548216905560028201805490911690556003810180546001600160c81b031916905560040162000cb9565b5090565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171562000d425762000d4262000d06565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000d735762000d7362000d06565b604052919050565b600082601f83011262000d8d57600080fd5b81516001600160401b0381111562000da95762000da962000d06565b602062000dbf601f8301601f1916820162000d48565b828152858284870101111562000dd457600080fd5b60005b8381101562000df457858101830151828201840152820162000dd7565b506000928101909101919091529392505050565b80516001600160a01b038116811462000e2057600080fd5b919050565b8051801515811462000e2057600080fd5b805160ff8116811462000e2057600080fd5b600082601f83011262000e5a57600080fd5b815160206001600160401b0382111562000e785762000e7862000d06565b62000e88818360051b0162000d48565b82815260089290921b8401810191818101908684111562000ea857600080fd5b8286015b8481101562000f7b57610100818903121562000ec85760008081fd5b62000ed262000d1c565b62000edd8262000e08565b815262000eec85830162000e08565b85820152604062000eff81840162000e08565b90820152606062000f1283820162000e08565b90820152608062000f2583820162000e25565b9082015260a062000f3883820162000e25565b9082015260c08281015161ffff8116811462000f545760008081fd5b9082015260e062000f6783820162000e36565b908201528352918301916101000162000eac565b509695505050505050565b600080600080600080600080610100898b03121562000fa457600080fd5b88516001600160401b038082111562000fbc57600080fd5b62000fca8c838d0162000d7b565b995060208b015191508082111562000fe157600080fd5b62000fef8c838d0162000d7b565b985060408b01519150808211156200100657600080fd5b620010148c838d0162000d7b565b97506200102460608c0162000e08565b96506200103460808c0162000e08565b95506200104460a08c0162000e08565b94506200105460c08c0162000e08565b935060e08b01519150808211156200106b57600080fd5b506200107a8b828c0162000e48565b9150509295985092959890939650565b600181811c908216806200109f57607f821691505b602082108103620010c057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200111457600081815260208120601f850160051c81016020861015620010ef5750805b601f850160051c820191505b818110156200111057828155600101620010fb565b5050505b505050565b81516001600160401b0381111562001135576200113562000d06565b6200114d816200114684546200108a565b84620010c6565b602080601f8311600181146200118557600084156200116c5750858301515b600019600386901b1c1916600185901b17855562001110565b600085815260208120601f198616915b82811015620011b65788860151825594840194600190910190840162001195565b5085821015620011d55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b61ffff8181168382160190808211156200122f576200122f620011fb565b5092915050565b6000600182016200124b576200124b620011fb565b5060010190565b6000602082840312156200126557600080fd5b620012708262000e08565b9392505050565b6000602082840312156200128a57600080fd5b620012708262000e36565b602080825282518282018190526000919060409081850190868401855b828110156200134357815180516001600160a01b03908116865287820151811688870152868201511686860152606080820151620012fa828801826001600160a01b03169052565b505060808181015115159086015260a08082015115159086015260c08082015161ffff169086015260e09081015160ff16908501526101009093019290850190600101620012b2565b5091979650505050505050565b6000602082840312156200136357600080fd5b620012708262000e25565b608051615efc620013f36000396000818161084901528181610c5101528181610cd901528181610efc0152818161155701528181611b2b0152818161220201528181612dfd01528181612f400152818161340b0152818161348601528181613a1501528181613ab201528181613f58015281816141a301526144aa0152615efc6000f3fe6080604052600436106102755760003560e01c80638c66d04f1161014f578063bf2c7001116100c1578063f23a6e611161007a578063f23a6e611461086b578063f242432a14610897578063f2fde38b146108b7578063f41d5661146108d7578063f4993018146108f7578063f7c854691461091757600080fd5b8063bf2c700114610713578063cbb117a314610733578063cc33c87514610749578063d574ea3d14610776578063e985e9c5146107ee578063eb6d3a111461083757600080fd5b8063a22cb46511610113578063a22cb46514610611578063ab37fbb714610631578063b49a60bb14610651578063b6b55f2514610673578063bc197c81146106a1578063bd85b039146106e657600080fd5b80638c66d04f146105885780638da5cb5b146105a85780638fcc9cfb146105c65780639499ac54146105e657806395d89b41146105fc57600080fd5b8063472d35b9116101e8578063715018a6116101ac578063715018a6146104ba57806372981aab146104cf57806372a9ad2a146104ef578063771602f7146105165780638980f11f146105435780638c4cc0df1461056357600080fd5b8063472d35b9146104095780634e1273f4146104295780634f558e7914610456578063578c71d9146104855780635c975abb146104a057600080fd5b8063249d39e91161023a578063249d39e91461035e5780632e1a7d4d146103875780632eb2c2d6146103a9578063333171bb146103c957806341b3d185146103de57806343d57a64146103f457600080fd5b8062fdd58e1461028157806301ffc9a7146102b457806306fdde03146102e45780630e89341c14610306578063127fec131461032657600080fd5b3661027c57005b600080fd5b34801561028d57600080fd5b506102a161029c366004614d06565b610937565b6040519081526020015b60405180910390f35b3480156102c057600080fd5b506102d46102cf366004614d48565b6109d1565b60405190151581526020016102ab565b3480156102f057600080fd5b506102f9610a2c565b6040516102ab9190614db5565b34801561031257600080fd5b506102f9610321366004614dc8565b610aba565b34801561033257600080fd5b50600d54610346906001600160a01b031681565b6040516001600160a01b0390911681526020016102ab565b34801561036a57600080fd5b5061037461271081565b60405161ffff90911681526020016102ab565b34801561039357600080fd5b506103a76103a2366004614dc8565b610b4e565b005b3480156103b557600080fd5b506103a76103c4366004614f8e565b610dc1565b3480156103d557600080fd5b506103a7610e58565b3480156103ea57600080fd5b506102a160095481565b34801561040057600080fd5b506103a7610ecf565b34801561041557600080fd5b506103a761042436600461503b565b611223565b34801561043557600080fd5b50610449610444366004615058565b6112c9565b6040516102ab919061515f565b34801561046257600080fd5b506102d4610471366004614dc8565b600090815260036020526040902054151590565b34801561049157600080fd5b506008546103749061ffff1681565b3480156104ac57600080fd5b50600b546102d49060ff1681565b3480156104c657600080fd5b506103a76113f2565b3480156104db57600080fd5b506103a76104ea36600461503b565b611428565b3480156104fb57600080fd5b50610504601281565b60405160ff90911681526020016102ab565b34801561052257600080fd5b50610536610531366004615172565b6114c7565b6040516102ab9190615269565b34801561054f57600080fd5b506103a761055e366004614d06565b61171e565b34801561056f57600080fd5b50600b546103469061010090046001600160a01b031681565b34801561059457600080fd5b506103a76105a336600461503b565b6117d2565b3480156105b457600080fd5b506004546001600160a01b0316610346565b3480156105d257600080fd5b506103a76105e1366004614dc8565b611879565b3480156105f257600080fd5b506102a1600a5481565b34801561060857600080fd5b506102f96118fb565b34801561061d57600080fd5b506103a761062c366004615295565b611908565b34801561063d57600080fd5b506103a761064c3660046152e9565b611917565b34801561065d57600080fd5b506106666119bb565b6040516102ab9190615306565b34801561067f57600080fd5b5061069361068e366004614dc8565b611a91565b6040516102ab929190615355565b3480156106ad57600080fd5b506106cd6106bc366004614f8e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016102ab565b3480156106f257600080fd5b506102a1610701366004614dc8565b60009081526003602052604090205490565b34801561071f57600080fd5b506103a761072e36600461536e565b611cd3565b34801561073f57600080fd5b5061037461070881565b34801561075557600080fd5b506102a1610764366004614dc8565b600f6020526000908152604090205481565b34801561078257600080fd5b50610796610791366004614dc8565b611e3b565b604080516001600160a01b03998a16815297891660208901529588169587019590955295909216606085015215156080840152151560a083015261ffff90921660c082015260ff90911660e0820152610100016102ab565b3480156107fa57600080fd5b506102d46108093660046153e2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561084357600080fd5b506103467f000000000000000000000000000000000000000000000000000000000000000081565b34801561087757600080fd5b506106cd610886366004615410565b63f23a6e6160e01b95945050505050565b3480156108a357600080fd5b506103a76108b2366004615410565b611eb1565b3480156108c357600080fd5b506103a76108d236600461503b565b611f38565b3480156108e357600080fd5b506103a76108f2366004615492565b611fd3565b34801561090357600080fd5b50610536610912366004614dc8565b612693565b34801561092357600080fd5b50600c54610346906001600160a01b031681565b60006001600160a01b0383166109a85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b1480610a0257506001600160e01b031982166303a24d0760e21b145b80610a1d57506001600160e01b03198216632bee9c0f60e21b145b806109cb57506109cb826128bd565b60068054610a39906155cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a65906155cc565b8015610ab25780601f10610a8757610100808354040283529160200191610ab2565b820191906000526020600020905b815481529060010190602001808311610a9557829003601f168201915b505050505081565b606060028054610ac9906155cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610af5906155cc565b8015610b425780601f10610b1757610100808354040283529160200191610b42565b820191906000526020600020905b815481529060010190602001808311610b2557829003601f168201915b50505050509050919050565b600260055403610b705760405162461bcd60e51b815260040161099f90615606565b6002600555610b7f3382610937565b600003610b9f576040516359dc379f60e01b815260040160405180910390fd5b610bab3382600161290d565b600080610bb783612a86565b600b54604051633becdb0560e21b8152336004820152602481018390529294509092506000916101009091046001600160a01b03169063efb36c1490604401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c37919061563d565b600c5460405163280cff3560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905292935091169063a033fcd490604401600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b50505050610d00338285610ccf919061566c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fde565b4715610d7157604051600090339047908381818185875af1925050503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b5050905080610d6f57604051631d73cefb60e31b815260040160405180910390fd5b505b6040805184815260208101849052908101829052849033907f887e73c01568cecc3fe477a39c098f6599306a7592db9c8941dfc71ff9046d069060600160405180910390a3505060016005555050565b6001600160a01b038516331480610ddd5750610ddd8533610809565b610e445760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161099f565b610e518585858585613041565b5050505050565b6004546001600160a01b03163314610e825760405162461bcd60e51b815260040161099f9061567f565b600b805460ff8082161560ff1990921682179092556040519116151581527fb31006682779d0ac02864bee834675baf4592a679bfe75edd5e5847b52ef6f6e9060200160405180910390a1565b600e54600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201527f00000000000000000000000000000000000000000000000000000000000000009182169063095ea7b3906044016020604051808303816000875af1158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b91906156b4565b5060005b828110156111f557600e8181548110610f8a57610f8a6156d1565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e8381548110610fd057610fd06156d1565b600091825260209091206004918202015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906156b4565b50600e8181548110611069576110696156d1565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e83815481106110af576110af6156d1565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113791906156b4565b50816001600160a01b031663095ea7b3600e838154811061115a5761115a6156d1565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af11580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e291906156b4565b50806111ed816156e7565b915050610f6f565b506040517f3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a690600090a15050565b6004546001600160a01b0316331461124d5760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166112745760405163d92e233d60e01b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf5f580614969fb819b8af01f7cc62fe0e0146feaf98d7aee42e76bb0bee8e63906020015b60405180910390a150565b6060815183511461132e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161099f565b600083516001600160401b0381111561134957611349614de1565b604051908082528060200260200182016040528015611372578160200160208202803683370190505b50905060005b84518110156113ea576113bd858281518110611396576113966156d1565b60200260200101518583815181106113b0576113b06156d1565b6020026020010151610937565b8282815181106113cf576113cf6156d1565b60209081029190910101526113e3816156e7565b9050611378565b509392505050565b6004546001600160a01b0316331461141c5760405162461bcd60e51b815260040161099f9061567f565b611426600061322c565b565b6004546001600160a01b031633146114525760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166114795760405163d92e233d60e01b815260040160405180910390fd5b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcd0529c079af8a237ba57f5ee5b8714708bb73cd54ec1669ef986cde7feecbc1906020016112be565b6040805180820190915260008152606060208201526002600554036114fe5760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff16156115275760405163ab35696f60e01b815260040160405180910390fd5b60095483101561154a57604051635972996f60e11b815260040160405180910390fd5b61157f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661327e565b6115893383610937565b6000036115a9576040516359dc379f60e01b815260040160405180910390fd5b6115b5838360016132bc565b600f60008381526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156116bc57600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101611602565b505050508152505090506116cf816139fd565b81336001600160a01b03167fbc5fb7ab880388ee1f0cf8f1e0cd41d18d11761351afeeca7e258706436f194b858460405161170b929190615355565b60405180910390a3600160055592915050565b6004546001600160a01b031633146117485760405162461bcd60e51b815260040161099f9061567f565b600e5460005b818110156117b857600e8181548110611769576117696156d1565b60009182526020909120600490910201546001600160a01b03908116908516036117a65760405163118539e960e01b815260040160405180910390fd5b806117b0816156e7565b91505061174e565b506117cd6001600160a01b0384163384612fde565b505050565b6004546001600160a01b031633146117fc5760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166118235760405163d92e233d60e01b815260040160405180910390fd5b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fff482b94e6650f33ebd5a4b656f2524de0c552f315fb3270f47aeaef3d72a63e906020016112be565b6004546001600160a01b031633146118a35760405162461bcd60e51b815260040161099f9061567f565b6175308110156118c657604051634f4940eb60e11b815260040160405180910390fd5b60098190556040518181527fc50a7f0bdf88c216b2541b0bdea26f22305460e39ffc672ec1a7501732c5ba81906020016112be565b60078054610a39906155cc565b611913338383613b48565b5050565b6004546001600160a01b031633146119415760405162461bcd60e51b815260040161099f9061567f565b60648161ffff16108061195957506101f48161ffff16115b156119775760405163334ee9a160e01b815260040160405180910390fd5b6008805461ffff191661ffff83169081179091556040519081527ff81c5fcf3aecd6806cef1d458fedb8ca3fb79150451dc8c8d1aef6215c4a82d8906020016112be565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015611a8857600084815260209081902060408051610100810182526004860290920180546001600160a01b0390811684526001808301548216858701526002830154821693850193909352600390910154908116606084015260ff600160a01b8204811615156080850152600160a81b82048116151560a085015261ffff600160b01b83041660c0850152600160c01b9091041660e083015290835290920191016119df565b50505050905090565b6000611ab0604051806040016040528060008152602001606081525090565b600260055403611ad25760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff1615611afb5760405163ab35696f60e01b815260040160405180910390fd5b600954831015611b1e57604051635972996f60e11b815260040160405180910390fd5b611b536001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661327e565b611b5b613c28565b9150611b69838360006132bc565b600f60008381526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015611c7057600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101611bb6565b50505050815250509050611c83816139fd565b81336001600160a01b03167fa2f5e09d47150876983b7f4f0c3100d002901dcf94d43e590e285aca6bf691f08584604051611cbf929190615355565b60405180910390a360016005559092909150565b6004546001600160a01b03163314611cfd5760405162461bcd60e51b815260040161099f9061567f565b600e54818114611d2057604051634ec4810560e11b815260040160405180910390fd5b6000805b82811015611dda57848482818110611d3e57611d3e6156d1565b9050602002016020810190611d5391906152e9565b600e8281548110611d6657611d666156d1565b906000526020600020906004020160030160166101000a81548161ffff021916908361ffff160217905550848482818110611da357611da36156d1565b9050602002016020810190611db891906152e9565b611dc69061ffff1683615700565b915080611dd2816156e7565b915050611d24565b506127108114611dfd5760405163c6cc5d7f60e01b815260040160405180910390fd5b7fe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e77600e604051611e2d9190615713565b60405180910390a150505050565b600e8181548110611e4b57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509082169282169181169060ff600160a01b8204811691600160a81b810482169161ffff600160b01b83041691600160c01b90041688565b6001600160a01b038516331480611ecd5750611ecd8533610809565b611f2b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161099f565b610e518585858585613c68565b6004546001600160a01b03163314611f625760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b038116611fc75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161099f565b611fd08161322c565b50565b6004546001600160a01b03163314611ffd5760405162461bcd60e51b815260040161099f9061567f565b80516000819003612021576040516356de305560e01b815260040160405180910390fd5b60048111156120435760405163607ed4ff60e11b815260040160405180910390fd5b6000816001600160401b0381111561205d5761205d614de1565b604051908082528060200260200182016040528015612086578160200160208202803683370190505b5090506000805b838110156120d2578481815181106120a7576120a76156d1565b602002602001015160c00151826120be91906157f7565b9150806120ca816156e7565b91505061208d565b5061ffff8116612710146120f95760405163c6cc5d7f60e01b815260040160405180910390fd5b612105600e6000614c04565b60005b8381101561265b5760006001600160a01b031685828151811061212d5761212d6156d1565b6020026020010151600001516001600160a01b0316036121605760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b031685828151811061217d5761217d6156d1565b6020026020010151602001516001600160a01b0316036121b05760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b03168582815181106121cd576121cd6156d1565b6020026020010151604001516001600160a01b0316036122005760405163d92e233d60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061223c5761223c6156d1565b6020026020010151602001516001600160a01b03161415801561244a575060006001600160a01b0316858281518110612277576122776156d1565b6020026020010151606001516001600160a01b0316148061234557508481815181106122a5576122a56156d1565b6020026020010151606001516001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123129190615819565b6001600160a01b031685828151811061232d5761232d6156d1565b6020026020010151602001516001600160a01b031614155b8061244a5750600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561239e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c29190615836565b60ff168582815181106123d7576123d76156d1565b6020026020010151606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190615836565b60ff1614155b1561246857604051639589a27d60e01b815260040160405180910390fd5b60005b818110156124ed57858281518110612485576124856156d1565b6020026020010151600001516001600160a01b03168482815181106124ac576124ac6156d1565b60200260200101516001600160a01b0316036124db5760405163cc5fde6960e01b815260040160405180910390fd5b806124e5816156e7565b91505061246b565b50848181518110612500576125006156d1565b60200260200101516000015183828151811061251e5761251e6156d1565b60200260200101906001600160a01b031690816001600160a01b031681525050600e858281518110612552576125526156d1565b602090810291909101810151825460018181018555600094855293839020825160049092020180546001600160a01b039283166001600160a01b03199182161782559383015194810180549583169585169590951790945560408201516002850180549183169190941617909255606081015160039093018054608083015160a084015160c085015160e09095015160ff16600160c01b0260ff60c01b1961ffff909616600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b03199095169890971697909717929092171693909317929092171691909117905580612653816156e7565b915050612108565b50612664610ecf565b7fe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e7784604051611e2d9190615306565b6040805180820190915260008152606060208201526002600554036126ca5760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff16156126f35760405163ab35696f60e01b815260040160405180910390fd5b6126fd3383610937565b60000361271d576040516359dc379f60e01b815260040160405180910390fd5b6000828152600f60205260408120549061273684612a86565b506000858152600f602052604081208181559192506127586001830182614c25565b5050612766818560006132bc565b6000848152600f60209081526040808320858155815180830183528681526001820180548451818702810187019095528085529194929385840193909290879084015b8282101561286357600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b909204909116610120850152918352600401548284015290835290920191016127a9565b50505050815250509050612876816139fd565b847fc54037560ab0b32bc339e4f0bedd21a5daefe3a944527ac3bb8c32d5d4647ca683836040516128a8929190615355565b60405180910390a26001600555949350505050565b60006001600160e01b03198216636cdb3d1360e11b14806128ee57506001600160e01b031982166303a24d0760e21b145b806109cb57506301ffc9a760e01b6001600160e01b03198316146109cb565b6001600160a01b03831661296f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161099f565b3361299e8185600061298087613d94565b61298987613d94565b60405180602001604052806000815250613ddf565b6000838152602081815260408083206001600160a01b038816845290915290205482811015612a1b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161099f565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000806000600f60008581526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015612b9257600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101612ad8565b5050509152505060208101515160009450909150835b81811015612f2a5782602001518181518110612bc657612bc66156d1565b60200260200101516000015160a0015115612c8c57600083602001518281518110612bf357612bf36156d1565b602002602001015160000151600001519050806001600160a01b0316632e1a7d4d85602001518481518110612c2a57612c2a6156d1565b6020026020010151602001516040518263ffffffff1660e01b8152600401612c5491815260200190565b600060405180830381600087803b158015612c6e57600080fd5b505af1158015612c82573d6000803e3d6000fd5b5050505050612dfb565b600083602001518281518110612ca457612ca46156d1565b60200260200101516000015160000151905083602001518281518110612ccc57612ccc6156d1565b6020026020010151600001516080015115612d7757806001600160a01b031663ba251fba85602001518481518110612d0657612d066156d1565b60209081029190910181015101516040516001600160e01b031960e084901b1681526004810191909152336024820152604481018a9052606401600060405180830381600087803b158015612d5a57600080fd5b505af1158015612d6e573d6000803e3d6000fd5b50505050612df9565b806001600160a01b0316632e1a7d4d85602001518481518110612d9c57612d9c6156d1565b6020026020010151602001516040518263ffffffff1660e01b8152600401612dc691815260200190565b600060405180830381600087803b158015612de057600080fd5b505af1158015612df4573d6000803e3d6000fd5b505050505b505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683602001518281518110612e3b57612e3b6156d1565b602002602001015160000151602001516001600160a01b031614612f1857600083602001518281518110612e7157612e716156d1565b6020908102919091018101515101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee9919061563d565b9050612f168185602001518481518110612f0557612f056156d1565b602002602001015160000151613eeb565b505b80612f22816156e7565b915050612ba8565b506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb3919061563d565b8251909450841115612fd2578151612fcb908561566c565b9250612fd7565b600092505b5050915091565b6040516001600160a01b0383166024820152604481018290526117cd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614245565b81518351146130a35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161099f565b6001600160a01b0384166130c95760405162461bcd60e51b815260040161099f90615853565b336130d8818787878787613ddf565b60005b84518110156131be5760008582815181106130f8576130f86156d1565b602002602001015190506000858381518110613116576131166156d1565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156131665760405162461bcd60e51b815260040161099f90615898565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906131a3908490615700565b92505081905550505050806131b7906156e7565b90506130db565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161320e9291906158e2565b60405180910390a4613224818787878787614317565b505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526132b69085906323b872dd60e01b9060840161300a565b50505050565b6000828152600f60205260408120600e5490918591905b818110156139db576000600e82815481106132f0576132f06156d1565b60009182526020918290206040805161010081018252600490930290910180546001600160a01b0390811684526001820154811694840194909452600281015484169183019190915260030154918216606082015260ff600160a01b8304811615156080830152600160a81b83048116151560a083015261ffff600160b01b84041660c0830152600160c01b90920490911660e0820152905085156133e2578460010182815481106133a4576133a46156d1565b600091825260209091206005909102015481516001600160a01b039081169116146133e2576040516379c896e960e01b815260040160405180910390fd5b60a08101516000806133f560018761566c565b85036134505783602001516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613449576134428785614472565b90506134d6565b50856134d6565b60c08401516000906127109061346a9061ffff168e615910565b6134749190615927565b905084602001516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146134c4576134bd8186614472565b91506134c8565b8091505b6134d2818961566c565b9750505b821561364057881561351c576135178185600001518a6001018881548110613500576135006156d1565b9060005260206000209060050201600401546147ac565b6139c4565b61352a818560000151614839565b60408051808201825286815260208082018481526001808e018054808301825560009182529084902094518051600590920290950180546001600160a01b039283166001600160a01b0319918216178255948601519281018054938316938616939093179092559484015160028201805491871691909416179092556060830151600383018054608086015160a087015160c088015160e09098015160ff16600160c01b0260ff60c01b1961ffff909916600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b031990951696909a16959095179290921716969096179590951793909316929092179092555160049091015591506139c4565b83516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ad919061563d565b9050856080015115613725576040516329c9aa1960e01b815260048101849052336024820152604481018d90526001600160a01b038316906329c9aa1990606401600060405180830381600087803b15801561370857600080fd5b505af115801561371c573d6000803e3d6000fd5b50505050613780565b60405163b6b55f2560e01b8152600481018490526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b15801561376757600080fd5b505af115801561377b573d6000803e3d6000fd5b505050505b8a1561383a576040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa1580156137cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f0919061563d565b6137fa919061566c565b8a600101888154811061380f5761380f6156d1565b9060005260206000209060050201600401600082825461382f9190615700565b909155506139c19050565b60408051808201825287815290516370a0823160e01b815230600482015260018c019190602082019084906001600160a01b038716906370a0823190602401602060405180830381865afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba919061563d565b6138c4919061566c565b9052815460018181018455600093845260209384902083518051600590940290910180546001600160a01b039485166001600160a01b031991821617825582870151938201805494861694821694909417909355604082015160028201805491861691909416179092556060810151600383018054608084015160a085015160c086015160e09096015160ff16600160c01b0260ff60c01b1961ffff909716600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b031990951696909916959095179290921716959095179490941791909116179091559101516004909101555b50505b5050505080806139d3906156e7565b9150506132d3565b50858360000160008282546139f09190615700565b9091555050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a88919061563d565b90508015613ad9578082600001818151613aa2919061566c565b905250613ad96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612fde565b471561191357604051600090339047908381818185875af1925050503d8060008114613b21576040519150601f19603f3d011682016040523d82523d6000602084013e613b26565b606091505b50509050806117cd57604051631d73cefb60e31b815260040160405180910390fd5b816001600160a01b0316836001600160a01b031603613bbb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161099f565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000600a549050613c4b33826001604051806020016040528060008152506148c9565b6001600a6000828254613c5e9190615700565b9250508190555090565b6001600160a01b038416613c8e5760405162461bcd60e51b815260040161099f90615853565b33613cad818787613c9e88613d94565b613ca788613d94565b87613ddf565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015613cee5760405162461bcd60e51b815260040161099f90615898565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290613d2b908490615700565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613d8b8288888888886149c6565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613dce57613dce6156d1565b602090810291909101015292915050565b6001600160a01b038516613e665760005b8351811015613e6457828181518110613e0b57613e0b6156d1565b602002602001015160036000868481518110613e2957613e296156d1565b602002602001015181526020019081526020016000206000828254613e4e9190615700565b90915550613e5d9050816156e7565b9050613df0565b505b6001600160a01b0384166132245760005b8351811015613d8b57828181518110613e9257613e926156d1565b602002602001015160036000868481518110613eb057613eb06156d1565b602002602001015181526020019081526020016000206000828254613ed5919061566c565b90915550613ee49050816156e7565b9050613e77565b602081015160408051600280825260608201909252600091816020016020820280368337505050604084015160608501518251929350909184908490600090613f3657613f366156d1565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000083600181518110613f8a57613f8a6156d1565b6001600160a01b03928316602091820292909201810191909152600d5460408051634c6afee560e11b8152905160009492909216926398d5fdca926004808401938290030181865afa158015613fe4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614008919061563d565b90506000826001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561404a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406e919061563d565b905060008760e0015160126140839190615949565b61408e90600a615a46565b83670de0b6b3a76400006140a2858d615910565b6140ac9190615927565b6140b69190615927565b6140c890670de0b6b3a7640000615910565b6140d29190615910565b6008549091506001600160a01b038616906338ed1739908b90612710906140fd9061ffff1682615a55565b61410b9061ffff1686615910565b6141159190615927565b893061412361070842615700565b6040518663ffffffff1660e01b8152600401614143959493929190615a70565b6000604051808303816000875af1158015614162573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261418a9190810190615ae1565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156141f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614216919061563d565b9050806000036142395760405163081ceff360e41b815260040160405180910390fd5b50505050505050505050565b600061429a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a819092919063ffffffff16565b8051909150156117cd57808060200190518101906142b891906156b4565b6117cd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161099f565b6001600160a01b0384163b156132245760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061435b9089908990889088908890600401615b71565b6020604051808303816000875af1925050508015614396575060408051601f3d908101601f1916820190925261439391810190615bc3565b60015b614442576143a2615be0565b806308c379a0036143db57506143b6615bfc565b806143c157506143dd565b8060405162461bcd60e51b815260040161099f9190614db5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161099f565b6001600160e01b0319811663bc197c8160e01b14613d8b5760405162461bcd60e51b815260040161099f90615c85565b6020818101516040805160028082526060820183526000948593908301908036833750505060408501516060860151825192935090917f00000000000000000000000000000000000000000000000000000000000000009084906000906144db576144db6156d1565b60200260200101906001600160a01b031690816001600160a01b031681525050838360018151811061450f5761450f6156d1565b6001600160a01b03928316602091820292909201810191909152600d5460408051634c6afee560e11b8152905160009492909216926398d5fdca926004808401938290030181865afa158015614569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458d919061563d565b90506000826001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f3919061563d565b905060008860e0015160126146089190615949565b61461390600a615a46565b670de0b6b3a764000083614627868e615910565b61463990670de0b6b3a7640000615910565b6146439190615927565b61464d9190615927565b6146579190615927565b6008549091506001600160a01b038616906338ed1739908c90612710906146829061ffff1682615a55565b6146909061ffff1686615910565b61469a9190615927565b89306146a861070842615700565b6040518663ffffffff1660e01b81526004016146c8959493929190615a70565b6000604051808303816000875af11580156146e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261470f9190810190615ae1565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015614757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061477b919061563d565b90508060000361479e5760405163081ceff360e41b815260040160405180910390fd5b9a9950505050505050505050565b604080518082019091526000815260606020820152829060405163771602f760e01b815260048101869052602481018490526001600160a01b0383169063771602f7906044016000604051808303816000875af1158015614811573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132249190810190615df8565b604080518082018252600080825260606020830152915163b6b55f2560e01b8152600481018590528391906001600160a01b0383169063b6b55f25906024016000604051808303816000875af1158015614897573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148bf9190810190615e34565b5095945050505050565b6001600160a01b0384166149295760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161099f565b3361493a81600087613c9e88613d94565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061496a908490615700565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e51816000878787875b6001600160a01b0384163b156132245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190614a0a9089908990889088908890600401615e70565b6020604051808303816000875af1925050508015614a45575060408051601f3d908101601f19168201909252614a4291810190615bc3565b60015b614a51576143a2615be0565b6001600160e01b0319811663f23a6e6160e01b14613d8b5760405162461bcd60e51b815260040161099f90615c85565b6060614a908484600085614a9a565b90505b9392505050565b606082471015614afb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161099f565b6001600160a01b0385163b614b525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161099f565b600080866001600160a01b03168587604051614b6e9190615eaa565b60006040518083038185875af1925050503d8060008114614bab576040519150601f19603f3d011682016040523d82523d6000602084013e614bb0565b606091505b5091509150614bc0828286614bcb565b979650505050505050565b60608315614bda575081614a93565b825115614bea5782518084602001fd5b8160405162461bcd60e51b815260040161099f9190614db5565b5080546000825560040290600052602060002090810190611fd09190614c46565b5080546000825560050290600052602060002090810190611fd09190614c92565b5b80821115614c8e5780546001600160a01b031990811682556001820180548216905560028201805490911690556003810180546001600160c81b0319169055600401614c47565b5090565b5b80821115614c8e5780546001600160a01b031990811682556001820180548216905560028201805490911690556003810180546001600160c81b031916905560006004820155600501614c93565b6001600160a01b0381168114611fd057600080fd5b8035614d0181614ce1565b919050565b60008060408385031215614d1957600080fd5b8235614d2481614ce1565b946020939093013593505050565b6001600160e01b031981168114611fd057600080fd5b600060208284031215614d5a57600080fd5b8135614a9381614d32565b60005b83811015614d80578181015183820152602001614d68565b50506000910152565b60008151808452614da1816020860160208601614d65565b601f01601f19169290920160200192915050565b602081526000614a936020830184614d89565b600060208284031215614dda57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b61010081018181106001600160401b0382111715614e1757614e17614de1565b60405250565b604081018181106001600160401b0382111715614e1757614e17614de1565b606081018181106001600160401b0382111715614e1757614e17614de1565b601f8201601f191681016001600160401b0381118282101715614e8057614e80614de1565b6040525050565b60006001600160401b03821115614ea057614ea0614de1565b5060051b60200190565b600082601f830112614ebb57600080fd5b81356020614ec882614e87565b604051614ed58282614e5b565b83815260059390931b8501820192828101915086841115614ef557600080fd5b8286015b84811015614f105780358352918301918301614ef9565b509695505050505050565b600082601f830112614f2c57600080fd5b81356001600160401b03811115614f4557614f45614de1565b604051614f5c601f8301601f191660200182614e5b565b818152846020838601011115614f7157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614fa657600080fd5b8535614fb181614ce1565b94506020860135614fc181614ce1565b935060408601356001600160401b0380821115614fdd57600080fd5b614fe989838a01614eaa565b94506060880135915080821115614fff57600080fd5b61500b89838a01614eaa565b9350608088013591508082111561502157600080fd5b5061502e88828901614f1b565b9150509295509295909350565b60006020828403121561504d57600080fd5b8135614a9381614ce1565b6000806040838503121561506b57600080fd5b82356001600160401b038082111561508257600080fd5b818501915085601f83011261509657600080fd5b813560206150a382614e87565b6040516150b08282614e5b565b83815260059390931b85018201928281019150898411156150d057600080fd5b948201945b838610156150f75785356150e881614ce1565b825294820194908201906150d5565b9650508601359250508082111561510d57600080fd5b5061511a85828601614eaa565b9150509250929050565b600081518084526020808501945080840160005b8381101561515457815187529582019590820190600101615138565b509495945050505050565b602081526000614a936020830184615124565b6000806040838503121561518557600080fd5b50508035926020909101359150565b60018060a01b038082511683528060208301511660208401528060408301511660408401528060608301511660608401525060808101511515608083015260a0810151151560a083015260c08101516151f360c084018261ffff169052565b5060e08101516117cd60e084018260ff169052565b600060408301825184526020808401516040828701528281518085526060880191508383019450600092505b80831015614f10578451615249838251615194565b840151610100830152938301936001929092019161012090910190615234565b602081526000614a936020830184615208565b8015158114611fd057600080fd5b8035614d018161527c565b600080604083850312156152a857600080fd5b82356152b381614ce1565b915060208301356152c38161527c565b809150509250929050565b61ffff81168114611fd057600080fd5b8035614d01816152ce565b6000602082840312156152fb57600080fd5b8135614a93816152ce565b6020808252825182820181905260009190848201906040850190845b8181101561534957615335838551615194565b928401926101009290920191600101615322565b50909695505050505050565b828152604060208201526000614a906040830184615208565b6000806020838503121561538157600080fd5b82356001600160401b038082111561539857600080fd5b818501915085601f8301126153ac57600080fd5b8135818111156153bb57600080fd5b8660208260051b85010111156153d057600080fd5b60209290920196919550909350505050565b600080604083850312156153f557600080fd5b823561540081614ce1565b915060208301356152c381614ce1565b600080600080600060a0868803121561542857600080fd5b853561543381614ce1565b9450602086013561544381614ce1565b9350604086013592506060860135915060808601356001600160401b0381111561546c57600080fd5b61502e88828901614f1b565b60ff81168114611fd057600080fd5b8035614d0181615478565b600060208083850312156154a557600080fd5b82356001600160401b038111156154bb57600080fd5b8301601f810185136154cc57600080fd5b80356154d781614e87565b604080516154e58382614e5b565b83815260089390931b840185019285810192508884111561550557600080fd5b938501935b838510156155c057610100858a0312156155245760008081fd5b815161552f81614df7565b61553886614cf6565b8152615545878701614cf6565b87820152615554838701614cf6565b838201526060615565818801614cf6565b90820152608061557687820161528a565b9082015260a061558787820161528a565b9082015260c06155988782016152de565b9082015260e06155a9878201615487565b90820152835261010094909401939185019161550a565b98975050505050505050565b600181811c908216806155e057607f821691505b60208210810361560057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561564f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109cb576109cb615656565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156156c657600080fd5b8151614a938161527c565b634e487b7160e01b600052603260045260246000fd5b6000600182016156f9576156f9615656565b5060010190565b808201808211156109cb576109cb615656565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156157ea576157618461575484546001600160a01b031690565b6001600160a01b03169052565b60018201546001600160a01b039081168588015260028301548116868601526003830154908116606086015260ff60a082811c8216151560808801526157af818801838560a81c1615159052565b5060c06157c881880161ffff8560b01c1661ffff169052565b60ff92901c161660e08501526101009093019260049190910190600101615737565b5091979650505050505050565b61ffff81811683821601908082111561581257615812615656565b5092915050565b60006020828403121561582b57600080fd5b8151614a9381614ce1565b60006020828403121561584857600080fd5b8151614a9381615478565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006158f56040830185615124565b82810360208401526159078185615124565b95945050505050565b80820281158282048414176109cb576109cb615656565b60008261594457634e487b7160e01b600052601260045260246000fd5b500490565b60ff82811682821603908111156109cb576109cb615656565b600181815b8085111561599d57816000190482111561598357615983615656565b8085161561599057918102915b93841c9390800290615967565b509250929050565b6000826159b4575060016109cb565b816159c1575060006109cb565b81600181146159d757600281146159e1576159fd565b60019150506109cb565b60ff8411156159f2576159f2615656565b50506001821b6109cb565b5060208310610133831016604e8410600b8410161715615a20575081810a6109cb565b615a2a8383615962565b8060001904821115615a3e57615a3e615656565b029392505050565b6000614a9360ff8416836159a5565b61ffff82811682821603908082111561581257615812615656565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015615ac05784516001600160a01b031683529383019391830191600101615a9b565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215615af457600080fd5b82516001600160401b03811115615b0a57600080fd5b8301601f81018513615b1b57600080fd5b8051615b2681614e87565b604051615b338282614e5b565b82815260059290921b8301840191848101915087831115615b5357600080fd5b928401925b82841015614bc057835182529284019290840190615b58565b6001600160a01b0386811682528516602082015260a060408201819052600090615b9d90830186615124565b8281036060840152615baf8186615124565b905082810360808401526155c08185614d89565b600060208284031215615bd557600080fd5b8151614a9381614d32565b600060033d1115615bf95760046000803e5060005160e01c5b90565b600060443d1015615c0a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615c3957505050505090565b8285019150815181811115615c515750505050505090565b843d8701016020828501011115615c6b5750505050505090565b615c7a60208286010187614e5b565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60006040808385031215615ce057600080fd5b8051615ceb81614e1d565b809250835181526020808501516001600160401b03811115615d0c57600080fd5b8501601f81018713615d1d57600080fd5b8051615d2881614e87565b8551615d348282614e5b565b82815260079290921b8301840191848101915089831115615d5457600080fd5b928401925b82841015615de657838a036080811215615d735760008081fd5b8751615d7e81614e1d565b606080831215615d8e5760008081fd5b89519250615d9b83614e3c565b8651615da681614ce1565b835286880151615db58161527c565b83890152868a0151615dc6816152ce565b838b01529181529085015186820152825260809093019290840190615d59565b80858701525050505050505092915050565b600060208284031215615e0a57600080fd5b81516001600160401b03811115615e2057600080fd5b615e2c84828501615ccd565b949350505050565b60008060408385031215615e4757600080fd5b8251915060208301516001600160401b03811115615e6457600080fd5b61511a85828601615ccd565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614bc090830184614d89565b60008251615ebc818460208701614d65565b919091019291505056fea2646970667358221220eccd49e558b16fdadabd8001cb367a070661d6ed448067e41d89e0103bdfc9df64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106102755760003560e01c80638c66d04f1161014f578063bf2c7001116100c1578063f23a6e611161007a578063f23a6e611461086b578063f242432a14610897578063f2fde38b146108b7578063f41d5661146108d7578063f4993018146108f7578063f7c854691461091757600080fd5b8063bf2c700114610713578063cbb117a314610733578063cc33c87514610749578063d574ea3d14610776578063e985e9c5146107ee578063eb6d3a111461083757600080fd5b8063a22cb46511610113578063a22cb46514610611578063ab37fbb714610631578063b49a60bb14610651578063b6b55f2514610673578063bc197c81146106a1578063bd85b039146106e657600080fd5b80638c66d04f146105885780638da5cb5b146105a85780638fcc9cfb146105c65780639499ac54146105e657806395d89b41146105fc57600080fd5b8063472d35b9116101e8578063715018a6116101ac578063715018a6146104ba57806372981aab146104cf57806372a9ad2a146104ef578063771602f7146105165780638980f11f146105435780638c4cc0df1461056357600080fd5b8063472d35b9146104095780634e1273f4146104295780634f558e7914610456578063578c71d9146104855780635c975abb146104a057600080fd5b8063249d39e91161023a578063249d39e91461035e5780632e1a7d4d146103875780632eb2c2d6146103a9578063333171bb146103c957806341b3d185146103de57806343d57a64146103f457600080fd5b8062fdd58e1461028157806301ffc9a7146102b457806306fdde03146102e45780630e89341c14610306578063127fec131461032657600080fd5b3661027c57005b600080fd5b34801561028d57600080fd5b506102a161029c366004614d06565b610937565b6040519081526020015b60405180910390f35b3480156102c057600080fd5b506102d46102cf366004614d48565b6109d1565b60405190151581526020016102ab565b3480156102f057600080fd5b506102f9610a2c565b6040516102ab9190614db5565b34801561031257600080fd5b506102f9610321366004614dc8565b610aba565b34801561033257600080fd5b50600d54610346906001600160a01b031681565b6040516001600160a01b0390911681526020016102ab565b34801561036a57600080fd5b5061037461271081565b60405161ffff90911681526020016102ab565b34801561039357600080fd5b506103a76103a2366004614dc8565b610b4e565b005b3480156103b557600080fd5b506103a76103c4366004614f8e565b610dc1565b3480156103d557600080fd5b506103a7610e58565b3480156103ea57600080fd5b506102a160095481565b34801561040057600080fd5b506103a7610ecf565b34801561041557600080fd5b506103a761042436600461503b565b611223565b34801561043557600080fd5b50610449610444366004615058565b6112c9565b6040516102ab919061515f565b34801561046257600080fd5b506102d4610471366004614dc8565b600090815260036020526040902054151590565b34801561049157600080fd5b506008546103749061ffff1681565b3480156104ac57600080fd5b50600b546102d49060ff1681565b3480156104c657600080fd5b506103a76113f2565b3480156104db57600080fd5b506103a76104ea36600461503b565b611428565b3480156104fb57600080fd5b50610504601281565b60405160ff90911681526020016102ab565b34801561052257600080fd5b50610536610531366004615172565b6114c7565b6040516102ab9190615269565b34801561054f57600080fd5b506103a761055e366004614d06565b61171e565b34801561056f57600080fd5b50600b546103469061010090046001600160a01b031681565b34801561059457600080fd5b506103a76105a336600461503b565b6117d2565b3480156105b457600080fd5b506004546001600160a01b0316610346565b3480156105d257600080fd5b506103a76105e1366004614dc8565b611879565b3480156105f257600080fd5b506102a1600a5481565b34801561060857600080fd5b506102f96118fb565b34801561061d57600080fd5b506103a761062c366004615295565b611908565b34801561063d57600080fd5b506103a761064c3660046152e9565b611917565b34801561065d57600080fd5b506106666119bb565b6040516102ab9190615306565b34801561067f57600080fd5b5061069361068e366004614dc8565b611a91565b6040516102ab929190615355565b3480156106ad57600080fd5b506106cd6106bc366004614f8e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016102ab565b3480156106f257600080fd5b506102a1610701366004614dc8565b60009081526003602052604090205490565b34801561071f57600080fd5b506103a761072e36600461536e565b611cd3565b34801561073f57600080fd5b5061037461070881565b34801561075557600080fd5b506102a1610764366004614dc8565b600f6020526000908152604090205481565b34801561078257600080fd5b50610796610791366004614dc8565b611e3b565b604080516001600160a01b03998a16815297891660208901529588169587019590955295909216606085015215156080840152151560a083015261ffff90921660c082015260ff90911660e0820152610100016102ab565b3480156107fa57600080fd5b506102d46108093660046153e2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561084357600080fd5b506103467f000000000000000000000000000000000000000000000000000000000000000081565b34801561087757600080fd5b506106cd610886366004615410565b63f23a6e6160e01b95945050505050565b3480156108a357600080fd5b506103a76108b2366004615410565b611eb1565b3480156108c357600080fd5b506103a76108d236600461503b565b611f38565b3480156108e357600080fd5b506103a76108f2366004615492565b611fd3565b34801561090357600080fd5b50610536610912366004614dc8565b612693565b34801561092357600080fd5b50600c54610346906001600160a01b031681565b60006001600160a01b0383166109a85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b1480610a0257506001600160e01b031982166303a24d0760e21b145b80610a1d57506001600160e01b03198216632bee9c0f60e21b145b806109cb57506109cb826128bd565b60068054610a39906155cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a65906155cc565b8015610ab25780601f10610a8757610100808354040283529160200191610ab2565b820191906000526020600020905b815481529060010190602001808311610a9557829003601f168201915b505050505081565b606060028054610ac9906155cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610af5906155cc565b8015610b425780601f10610b1757610100808354040283529160200191610b42565b820191906000526020600020905b815481529060010190602001808311610b2557829003601f168201915b50505050509050919050565b600260055403610b705760405162461bcd60e51b815260040161099f90615606565b6002600555610b7f3382610937565b600003610b9f576040516359dc379f60e01b815260040160405180910390fd5b610bab3382600161290d565b600080610bb783612a86565b600b54604051633becdb0560e21b8152336004820152602481018390529294509092506000916101009091046001600160a01b03169063efb36c1490604401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c37919061563d565b600c5460405163280cff3560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905292935091169063a033fcd490604401600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b50505050610d00338285610ccf919061566c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fde565b4715610d7157604051600090339047908381818185875af1925050503d8060008114610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b5050905080610d6f57604051631d73cefb60e31b815260040160405180910390fd5b505b6040805184815260208101849052908101829052849033907f887e73c01568cecc3fe477a39c098f6599306a7592db9c8941dfc71ff9046d069060600160405180910390a3505060016005555050565b6001600160a01b038516331480610ddd5750610ddd8533610809565b610e445760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161099f565b610e518585858585613041565b5050505050565b6004546001600160a01b03163314610e825760405162461bcd60e51b815260040161099f9061567f565b600b805460ff8082161560ff1990921682179092556040519116151581527fb31006682779d0ac02864bee834675baf4592a679bfe75edd5e5847b52ef6f6e9060200160405180910390a1565b600e54600c5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201527f00000000000000000000000000000000000000000000000000000000000000009182169063095ea7b3906044016020604051808303816000875af1158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b91906156b4565b5060005b828110156111f557600e8181548110610f8a57610f8a6156d1565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e8381548110610fd057610fd06156d1565b600091825260209091206004918202015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105591906156b4565b50600e8181548110611069576110696156d1565b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600e83815481106110af576110af6156d1565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113791906156b4565b50816001600160a01b031663095ea7b3600e838154811061115a5761115a6156d1565b600091825260209091206004918202016002015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260001960248201526044016020604051808303816000875af11580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e291906156b4565b50806111ed816156e7565b915050610f6f565b506040517f3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a690600090a15050565b6004546001600160a01b0316331461124d5760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166112745760405163d92e233d60e01b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf5f580614969fb819b8af01f7cc62fe0e0146feaf98d7aee42e76bb0bee8e63906020015b60405180910390a150565b6060815183511461132e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161099f565b600083516001600160401b0381111561134957611349614de1565b604051908082528060200260200182016040528015611372578160200160208202803683370190505b50905060005b84518110156113ea576113bd858281518110611396576113966156d1565b60200260200101518583815181106113b0576113b06156d1565b6020026020010151610937565b8282815181106113cf576113cf6156d1565b60209081029190910101526113e3816156e7565b9050611378565b509392505050565b6004546001600160a01b0316331461141c5760405162461bcd60e51b815260040161099f9061567f565b611426600061322c565b565b6004546001600160a01b031633146114525760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166114795760405163d92e233d60e01b815260040160405180910390fd5b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcd0529c079af8a237ba57f5ee5b8714708bb73cd54ec1669ef986cde7feecbc1906020016112be565b6040805180820190915260008152606060208201526002600554036114fe5760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff16156115275760405163ab35696f60e01b815260040160405180910390fd5b60095483101561154a57604051635972996f60e11b815260040160405180910390fd5b61157f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661327e565b6115893383610937565b6000036115a9576040516359dc379f60e01b815260040160405180910390fd5b6115b5838360016132bc565b600f60008381526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156116bc57600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101611602565b505050508152505090506116cf816139fd565b81336001600160a01b03167fbc5fb7ab880388ee1f0cf8f1e0cd41d18d11761351afeeca7e258706436f194b858460405161170b929190615355565b60405180910390a3600160055592915050565b6004546001600160a01b031633146117485760405162461bcd60e51b815260040161099f9061567f565b600e5460005b818110156117b857600e8181548110611769576117696156d1565b60009182526020909120600490910201546001600160a01b03908116908516036117a65760405163118539e960e01b815260040160405180910390fd5b806117b0816156e7565b91505061174e565b506117cd6001600160a01b0384163384612fde565b505050565b6004546001600160a01b031633146117fc5760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b0381166118235760405163d92e233d60e01b815260040160405180910390fd5b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fff482b94e6650f33ebd5a4b656f2524de0c552f315fb3270f47aeaef3d72a63e906020016112be565b6004546001600160a01b031633146118a35760405162461bcd60e51b815260040161099f9061567f565b6175308110156118c657604051634f4940eb60e11b815260040160405180910390fd5b60098190556040518181527fc50a7f0bdf88c216b2541b0bdea26f22305460e39ffc672ec1a7501732c5ba81906020016112be565b60078054610a39906155cc565b611913338383613b48565b5050565b6004546001600160a01b031633146119415760405162461bcd60e51b815260040161099f9061567f565b60648161ffff16108061195957506101f48161ffff16115b156119775760405163334ee9a160e01b815260040160405180910390fd5b6008805461ffff191661ffff83169081179091556040519081527ff81c5fcf3aecd6806cef1d458fedb8ca3fb79150451dc8c8d1aef6215c4a82d8906020016112be565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015611a8857600084815260209081902060408051610100810182526004860290920180546001600160a01b0390811684526001808301548216858701526002830154821693850193909352600390910154908116606084015260ff600160a01b8204811615156080850152600160a81b82048116151560a085015261ffff600160b01b83041660c0850152600160c01b9091041660e083015290835290920191016119df565b50505050905090565b6000611ab0604051806040016040528060008152602001606081525090565b600260055403611ad25760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff1615611afb5760405163ab35696f60e01b815260040160405180910390fd5b600954831015611b1e57604051635972996f60e11b815260040160405180910390fd5b611b536001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661327e565b611b5b613c28565b9150611b69838360006132bc565b600f60008381526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015611c7057600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101611bb6565b50505050815250509050611c83816139fd565b81336001600160a01b03167fa2f5e09d47150876983b7f4f0c3100d002901dcf94d43e590e285aca6bf691f08584604051611cbf929190615355565b60405180910390a360016005559092909150565b6004546001600160a01b03163314611cfd5760405162461bcd60e51b815260040161099f9061567f565b600e54818114611d2057604051634ec4810560e11b815260040160405180910390fd5b6000805b82811015611dda57848482818110611d3e57611d3e6156d1565b9050602002016020810190611d5391906152e9565b600e8281548110611d6657611d666156d1565b906000526020600020906004020160030160166101000a81548161ffff021916908361ffff160217905550848482818110611da357611da36156d1565b9050602002016020810190611db891906152e9565b611dc69061ffff1683615700565b915080611dd2816156e7565b915050611d24565b506127108114611dfd5760405163c6cc5d7f60e01b815260040160405180910390fd5b7fe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e77600e604051611e2d9190615713565b60405180910390a150505050565b600e8181548110611e4b57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509082169282169181169060ff600160a01b8204811691600160a81b810482169161ffff600160b01b83041691600160c01b90041688565b6001600160a01b038516331480611ecd5750611ecd8533610809565b611f2b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161099f565b610e518585858585613c68565b6004546001600160a01b03163314611f625760405162461bcd60e51b815260040161099f9061567f565b6001600160a01b038116611fc75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161099f565b611fd08161322c565b50565b6004546001600160a01b03163314611ffd5760405162461bcd60e51b815260040161099f9061567f565b80516000819003612021576040516356de305560e01b815260040160405180910390fd5b60048111156120435760405163607ed4ff60e11b815260040160405180910390fd5b6000816001600160401b0381111561205d5761205d614de1565b604051908082528060200260200182016040528015612086578160200160208202803683370190505b5090506000805b838110156120d2578481815181106120a7576120a76156d1565b602002602001015160c00151826120be91906157f7565b9150806120ca816156e7565b91505061208d565b5061ffff8116612710146120f95760405163c6cc5d7f60e01b815260040160405180910390fd5b612105600e6000614c04565b60005b8381101561265b5760006001600160a01b031685828151811061212d5761212d6156d1565b6020026020010151600001516001600160a01b0316036121605760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b031685828151811061217d5761217d6156d1565b6020026020010151602001516001600160a01b0316036121b05760405163d92e233d60e01b815260040160405180910390fd5b60006001600160a01b03168582815181106121cd576121cd6156d1565b6020026020010151604001516001600160a01b0316036122005760405163d92e233d60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061223c5761223c6156d1565b6020026020010151602001516001600160a01b03161415801561244a575060006001600160a01b0316858281518110612277576122776156d1565b6020026020010151606001516001600160a01b0316148061234557508481815181106122a5576122a56156d1565b6020026020010151606001516001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123129190615819565b6001600160a01b031685828151811061232d5761232d6156d1565b6020026020010151602001516001600160a01b031614155b8061244a5750600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561239e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c29190615836565b60ff168582815181106123d7576123d76156d1565b6020026020010151606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124449190615836565b60ff1614155b1561246857604051639589a27d60e01b815260040160405180910390fd5b60005b818110156124ed57858281518110612485576124856156d1565b6020026020010151600001516001600160a01b03168482815181106124ac576124ac6156d1565b60200260200101516001600160a01b0316036124db5760405163cc5fde6960e01b815260040160405180910390fd5b806124e5816156e7565b91505061246b565b50848181518110612500576125006156d1565b60200260200101516000015183828151811061251e5761251e6156d1565b60200260200101906001600160a01b031690816001600160a01b031681525050600e858281518110612552576125526156d1565b602090810291909101810151825460018181018555600094855293839020825160049092020180546001600160a01b039283166001600160a01b03199182161782559383015194810180549583169585169590951790945560408201516002850180549183169190941617909255606081015160039093018054608083015160a084015160c085015160e09095015160ff16600160c01b0260ff60c01b1961ffff909616600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b03199095169890971697909717929092171693909317929092171691909117905580612653816156e7565b915050612108565b50612664610ecf565b7fe862432e937cd267ceb992c0e53d27a0d6127517fdff76f2977ef09b6f369e7784604051611e2d9190615306565b6040805180820190915260008152606060208201526002600554036126ca5760405162461bcd60e51b815260040161099f90615606565b6002600555600b5460ff16156126f35760405163ab35696f60e01b815260040160405180910390fd5b6126fd3383610937565b60000361271d576040516359dc379f60e01b815260040160405180910390fd5b6000828152600f60205260408120549061273684612a86565b506000858152600f602052604081208181559192506127586001830182614c25565b5050612766818560006132bc565b6000848152600f60209081526040808320858155815180830183528681526001820180548451818702810187019095528085529194929385840193909290879084015b8282101561286357600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b909204909116610120850152918352600401548284015290835290920191016127a9565b50505050815250509050612876816139fd565b847fc54037560ab0b32bc339e4f0bedd21a5daefe3a944527ac3bb8c32d5d4647ca683836040516128a8929190615355565b60405180910390a26001600555949350505050565b60006001600160e01b03198216636cdb3d1360e11b14806128ee57506001600160e01b031982166303a24d0760e21b145b806109cb57506301ffc9a760e01b6001600160e01b03198316146109cb565b6001600160a01b03831661296f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161099f565b3361299e8185600061298087613d94565b61298987613d94565b60405180602001604052806000815250613ddf565b6000838152602081815260408083206001600160a01b038816845290915290205482811015612a1b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161099f565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000806000600f60008581526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015612b9257600084815260209081902060408051610140810182526005860290920180546001600160a01b0390811692840192835260018083015482166060860152600283015482166080860152600383015491821660a086015260ff600160a01b83048116151560c0870152600160a81b83048116151560e087015261ffff600160b01b840416610100870152600160c01b90920490911661012085015291835260040154828401529083529092019101612ad8565b5050509152505060208101515160009450909150835b81811015612f2a5782602001518181518110612bc657612bc66156d1565b60200260200101516000015160a0015115612c8c57600083602001518281518110612bf357612bf36156d1565b602002602001015160000151600001519050806001600160a01b0316632e1a7d4d85602001518481518110612c2a57612c2a6156d1565b6020026020010151602001516040518263ffffffff1660e01b8152600401612c5491815260200190565b600060405180830381600087803b158015612c6e57600080fd5b505af1158015612c82573d6000803e3d6000fd5b5050505050612dfb565b600083602001518281518110612ca457612ca46156d1565b60200260200101516000015160000151905083602001518281518110612ccc57612ccc6156d1565b6020026020010151600001516080015115612d7757806001600160a01b031663ba251fba85602001518481518110612d0657612d066156d1565b60209081029190910181015101516040516001600160e01b031960e084901b1681526004810191909152336024820152604481018a9052606401600060405180830381600087803b158015612d5a57600080fd5b505af1158015612d6e573d6000803e3d6000fd5b50505050612df9565b806001600160a01b0316632e1a7d4d85602001518481518110612d9c57612d9c6156d1565b6020026020010151602001516040518263ffffffff1660e01b8152600401612dc691815260200190565b600060405180830381600087803b158015612de057600080fd5b505af1158015612df4573d6000803e3d6000fd5b505050505b505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683602001518281518110612e3b57612e3b6156d1565b602002602001015160000151602001516001600160a01b031614612f1857600083602001518281518110612e7157612e716156d1565b6020908102919091018101515101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee9919061563d565b9050612f168185602001518481518110612f0557612f056156d1565b602002602001015160000151613eeb565b505b80612f22816156e7565b915050612ba8565b506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb3919061563d565b8251909450841115612fd2578151612fcb908561566c565b9250612fd7565b600092505b5050915091565b6040516001600160a01b0383166024820152604481018290526117cd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614245565b81518351146130a35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161099f565b6001600160a01b0384166130c95760405162461bcd60e51b815260040161099f90615853565b336130d8818787878787613ddf565b60005b84518110156131be5760008582815181106130f8576130f86156d1565b602002602001015190506000858381518110613116576131166156d1565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156131665760405162461bcd60e51b815260040161099f90615898565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906131a3908490615700565b92505081905550505050806131b7906156e7565b90506130db565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161320e9291906158e2565b60405180910390a4613224818787878787614317565b505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526132b69085906323b872dd60e01b9060840161300a565b50505050565b6000828152600f60205260408120600e5490918591905b818110156139db576000600e82815481106132f0576132f06156d1565b60009182526020918290206040805161010081018252600490930290910180546001600160a01b0390811684526001820154811694840194909452600281015484169183019190915260030154918216606082015260ff600160a01b8304811615156080830152600160a81b83048116151560a083015261ffff600160b01b84041660c0830152600160c01b90920490911660e0820152905085156133e2578460010182815481106133a4576133a46156d1565b600091825260209091206005909102015481516001600160a01b039081169116146133e2576040516379c896e960e01b815260040160405180910390fd5b60a08101516000806133f560018761566c565b85036134505783602001516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614613449576134428785614472565b90506134d6565b50856134d6565b60c08401516000906127109061346a9061ffff168e615910565b6134749190615927565b905084602001516001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146134c4576134bd8186614472565b91506134c8565b8091505b6134d2818961566c565b9750505b821561364057881561351c576135178185600001518a6001018881548110613500576135006156d1565b9060005260206000209060050201600401546147ac565b6139c4565b61352a818560000151614839565b60408051808201825286815260208082018481526001808e018054808301825560009182529084902094518051600590920290950180546001600160a01b039283166001600160a01b0319918216178255948601519281018054938316938616939093179092559484015160028201805491871691909416179092556060830151600383018054608086015160a087015160c088015160e09098015160ff16600160c01b0260ff60c01b1961ffff909916600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b031990951696909a16959095179290921716969096179590951793909316929092179092555160049091015591506139c4565b83516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ad919061563d565b9050856080015115613725576040516329c9aa1960e01b815260048101849052336024820152604481018d90526001600160a01b038316906329c9aa1990606401600060405180830381600087803b15801561370857600080fd5b505af115801561371c573d6000803e3d6000fd5b50505050613780565b60405163b6b55f2560e01b8152600481018490526001600160a01b0383169063b6b55f2590602401600060405180830381600087803b15801561376757600080fd5b505af115801561377b573d6000803e3d6000fd5b505050505b8a1561383a576040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa1580156137cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f0919061563d565b6137fa919061566c565b8a600101888154811061380f5761380f6156d1565b9060005260206000209060050201600401600082825461382f9190615700565b909155506139c19050565b60408051808201825287815290516370a0823160e01b815230600482015260018c019190602082019084906001600160a01b038716906370a0823190602401602060405180830381865afa158015613896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ba919061563d565b6138c4919061566c565b9052815460018181018455600093845260209384902083518051600590940290910180546001600160a01b039485166001600160a01b031991821617825582870151938201805494861694821694909417909355604082015160028201805491861691909416179092556060810151600383018054608084015160a085015160c086015160e09096015160ff16600160c01b0260ff60c01b1961ffff909716600160b01b0261ffff60b01b19921515600160a81b029290921662ffffff60a81b19931515600160a01b026001600160a81b031990951696909916959095179290921716959095179490941791909116179091559101516004909101555b50505b5050505080806139d3906156e7565b9150506132d3565b50858360000160008282546139f09190615700565b9091555050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a88919061563d565b90508015613ad9578082600001818151613aa2919061566c565b905250613ad96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612fde565b471561191357604051600090339047908381818185875af1925050503d8060008114613b21576040519150601f19603f3d011682016040523d82523d6000602084013e613b26565b606091505b50509050806117cd57604051631d73cefb60e31b815260040160405180910390fd5b816001600160a01b0316836001600160a01b031603613bbb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161099f565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000600a549050613c4b33826001604051806020016040528060008152506148c9565b6001600a6000828254613c5e9190615700565b9250508190555090565b6001600160a01b038416613c8e5760405162461bcd60e51b815260040161099f90615853565b33613cad818787613c9e88613d94565b613ca788613d94565b87613ddf565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015613cee5760405162461bcd60e51b815260040161099f90615898565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290613d2b908490615700565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613d8b8288888888886149c6565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613dce57613dce6156d1565b602090810291909101015292915050565b6001600160a01b038516613e665760005b8351811015613e6457828181518110613e0b57613e0b6156d1565b602002602001015160036000868481518110613e2957613e296156d1565b602002602001015181526020019081526020016000206000828254613e4e9190615700565b90915550613e5d9050816156e7565b9050613df0565b505b6001600160a01b0384166132245760005b8351811015613d8b57828181518110613e9257613e926156d1565b602002602001015160036000868481518110613eb057613eb06156d1565b602002602001015181526020019081526020016000206000828254613ed5919061566c565b90915550613ee49050816156e7565b9050613e77565b602081015160408051600280825260608201909252600091816020016020820280368337505050604084015160608501518251929350909184908490600090613f3657613f366156d1565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000083600181518110613f8a57613f8a6156d1565b6001600160a01b03928316602091820292909201810191909152600d5460408051634c6afee560e11b8152905160009492909216926398d5fdca926004808401938290030181865afa158015613fe4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614008919061563d565b90506000826001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561404a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061406e919061563d565b905060008760e0015160126140839190615949565b61408e90600a615a46565b83670de0b6b3a76400006140a2858d615910565b6140ac9190615927565b6140b69190615927565b6140c890670de0b6b3a7640000615910565b6140d29190615910565b6008549091506001600160a01b038616906338ed1739908b90612710906140fd9061ffff1682615a55565b61410b9061ffff1686615910565b6141159190615927565b893061412361070842615700565b6040518663ffffffff1660e01b8152600401614143959493929190615a70565b6000604051808303816000875af1158015614162573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261418a9190810190615ae1565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156141f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614216919061563d565b9050806000036142395760405163081ceff360e41b815260040160405180910390fd5b50505050505050505050565b600061429a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a819092919063ffffffff16565b8051909150156117cd57808060200190518101906142b891906156b4565b6117cd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161099f565b6001600160a01b0384163b156132245760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061435b9089908990889088908890600401615b71565b6020604051808303816000875af1925050508015614396575060408051601f3d908101601f1916820190925261439391810190615bc3565b60015b614442576143a2615be0565b806308c379a0036143db57506143b6615bfc565b806143c157506143dd565b8060405162461bcd60e51b815260040161099f9190614db5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161099f565b6001600160e01b0319811663bc197c8160e01b14613d8b5760405162461bcd60e51b815260040161099f90615c85565b6020818101516040805160028082526060820183526000948593908301908036833750505060408501516060860151825192935090917f00000000000000000000000000000000000000000000000000000000000000009084906000906144db576144db6156d1565b60200260200101906001600160a01b031690816001600160a01b031681525050838360018151811061450f5761450f6156d1565b6001600160a01b03928316602091820292909201810191909152600d5460408051634c6afee560e11b8152905160009492909216926398d5fdca926004808401938290030181865afa158015614569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458d919061563d565b90506000826001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f3919061563d565b905060008860e0015160126146089190615949565b61461390600a615a46565b670de0b6b3a764000083614627868e615910565b61463990670de0b6b3a7640000615910565b6146439190615927565b61464d9190615927565b6146579190615927565b6008549091506001600160a01b038616906338ed1739908c90612710906146829061ffff1682615a55565b6146909061ffff1686615910565b61469a9190615927565b89306146a861070842615700565b6040518663ffffffff1660e01b81526004016146c8959493929190615a70565b6000604051808303816000875af11580156146e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261470f9190810190615ae1565b506040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015614757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061477b919061563d565b90508060000361479e5760405163081ceff360e41b815260040160405180910390fd5b9a9950505050505050505050565b604080518082019091526000815260606020820152829060405163771602f760e01b815260048101869052602481018490526001600160a01b0383169063771602f7906044016000604051808303816000875af1158015614811573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132249190810190615df8565b604080518082018252600080825260606020830152915163b6b55f2560e01b8152600481018590528391906001600160a01b0383169063b6b55f25906024016000604051808303816000875af1158015614897573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148bf9190810190615e34565b5095945050505050565b6001600160a01b0384166149295760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161099f565b3361493a81600087613c9e88613d94565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061496a908490615700565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e51816000878787875b6001600160a01b0384163b156132245760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190614a0a9089908990889088908890600401615e70565b6020604051808303816000875af1925050508015614a45575060408051601f3d908101601f19168201909252614a4291810190615bc3565b60015b614a51576143a2615be0565b6001600160e01b0319811663f23a6e6160e01b14613d8b5760405162461bcd60e51b815260040161099f90615c85565b6060614a908484600085614a9a565b90505b9392505050565b606082471015614afb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161099f565b6001600160a01b0385163b614b525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161099f565b600080866001600160a01b03168587604051614b6e9190615eaa565b60006040518083038185875af1925050503d8060008114614bab576040519150601f19603f3d011682016040523d82523d6000602084013e614bb0565b606091505b5091509150614bc0828286614bcb565b979650505050505050565b60608315614bda575081614a93565b825115614bea5782518084602001fd5b8160405162461bcd60e51b815260040161099f9190614db5565b5080546000825560040290600052602060002090810190611fd09190614c46565b5080546000825560050290600052602060002090810190611fd09190614c92565b5b80821115614c8e5780546001600160a01b031990811682556001820180548216905560028201805490911690556003810180546001600160c81b0319169055600401614c47565b5090565b5b80821115614c8e5780546001600160a01b031990811682556001820180548216905560028201805490911690556003810180546001600160c81b031916905560006004820155600501614c93565b6001600160a01b0381168114611fd057600080fd5b8035614d0181614ce1565b919050565b60008060408385031215614d1957600080fd5b8235614d2481614ce1565b946020939093013593505050565b6001600160e01b031981168114611fd057600080fd5b600060208284031215614d5a57600080fd5b8135614a9381614d32565b60005b83811015614d80578181015183820152602001614d68565b50506000910152565b60008151808452614da1816020860160208601614d65565b601f01601f19169290920160200192915050565b602081526000614a936020830184614d89565b600060208284031215614dda57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b61010081018181106001600160401b0382111715614e1757614e17614de1565b60405250565b604081018181106001600160401b0382111715614e1757614e17614de1565b606081018181106001600160401b0382111715614e1757614e17614de1565b601f8201601f191681016001600160401b0381118282101715614e8057614e80614de1565b6040525050565b60006001600160401b03821115614ea057614ea0614de1565b5060051b60200190565b600082601f830112614ebb57600080fd5b81356020614ec882614e87565b604051614ed58282614e5b565b83815260059390931b8501820192828101915086841115614ef557600080fd5b8286015b84811015614f105780358352918301918301614ef9565b509695505050505050565b600082601f830112614f2c57600080fd5b81356001600160401b03811115614f4557614f45614de1565b604051614f5c601f8301601f191660200182614e5b565b818152846020838601011115614f7157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614fa657600080fd5b8535614fb181614ce1565b94506020860135614fc181614ce1565b935060408601356001600160401b0380821115614fdd57600080fd5b614fe989838a01614eaa565b94506060880135915080821115614fff57600080fd5b61500b89838a01614eaa565b9350608088013591508082111561502157600080fd5b5061502e88828901614f1b565b9150509295509295909350565b60006020828403121561504d57600080fd5b8135614a9381614ce1565b6000806040838503121561506b57600080fd5b82356001600160401b038082111561508257600080fd5b818501915085601f83011261509657600080fd5b813560206150a382614e87565b6040516150b08282614e5b565b83815260059390931b85018201928281019150898411156150d057600080fd5b948201945b838610156150f75785356150e881614ce1565b825294820194908201906150d5565b9650508601359250508082111561510d57600080fd5b5061511a85828601614eaa565b9150509250929050565b600081518084526020808501945080840160005b8381101561515457815187529582019590820190600101615138565b509495945050505050565b602081526000614a936020830184615124565b6000806040838503121561518557600080fd5b50508035926020909101359150565b60018060a01b038082511683528060208301511660208401528060408301511660408401528060608301511660608401525060808101511515608083015260a0810151151560a083015260c08101516151f360c084018261ffff169052565b5060e08101516117cd60e084018260ff169052565b600060408301825184526020808401516040828701528281518085526060880191508383019450600092505b80831015614f10578451615249838251615194565b840151610100830152938301936001929092019161012090910190615234565b602081526000614a936020830184615208565b8015158114611fd057600080fd5b8035614d018161527c565b600080604083850312156152a857600080fd5b82356152b381614ce1565b915060208301356152c38161527c565b809150509250929050565b61ffff81168114611fd057600080fd5b8035614d01816152ce565b6000602082840312156152fb57600080fd5b8135614a93816152ce565b6020808252825182820181905260009190848201906040850190845b8181101561534957615335838551615194565b928401926101009290920191600101615322565b50909695505050505050565b828152604060208201526000614a906040830184615208565b6000806020838503121561538157600080fd5b82356001600160401b038082111561539857600080fd5b818501915085601f8301126153ac57600080fd5b8135818111156153bb57600080fd5b8660208260051b85010111156153d057600080fd5b60209290920196919550909350505050565b600080604083850312156153f557600080fd5b823561540081614ce1565b915060208301356152c381614ce1565b600080600080600060a0868803121561542857600080fd5b853561543381614ce1565b9450602086013561544381614ce1565b9350604086013592506060860135915060808601356001600160401b0381111561546c57600080fd5b61502e88828901614f1b565b60ff81168114611fd057600080fd5b8035614d0181615478565b600060208083850312156154a557600080fd5b82356001600160401b038111156154bb57600080fd5b8301601f810185136154cc57600080fd5b80356154d781614e87565b604080516154e58382614e5b565b83815260089390931b840185019285810192508884111561550557600080fd5b938501935b838510156155c057610100858a0312156155245760008081fd5b815161552f81614df7565b61553886614cf6565b8152615545878701614cf6565b87820152615554838701614cf6565b838201526060615565818801614cf6565b90820152608061557687820161528a565b9082015260a061558787820161528a565b9082015260c06155988782016152de565b9082015260e06155a9878201615487565b90820152835261010094909401939185019161550a565b98975050505050505050565b600181811c908216806155e057607f821691505b60208210810361560057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561564f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109cb576109cb615656565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156156c657600080fd5b8151614a938161527c565b634e487b7160e01b600052603260045260246000fd5b6000600182016156f9576156f9615656565b5060010190565b808201808211156109cb576109cb615656565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156157ea576157618461575484546001600160a01b031690565b6001600160a01b03169052565b60018201546001600160a01b039081168588015260028301548116868601526003830154908116606086015260ff60a082811c8216151560808801526157af818801838560a81c1615159052565b5060c06157c881880161ffff8560b01c1661ffff169052565b60ff92901c161660e08501526101009093019260049190910190600101615737565b5091979650505050505050565b61ffff81811683821601908082111561581257615812615656565b5092915050565b60006020828403121561582b57600080fd5b8151614a9381614ce1565b60006020828403121561584857600080fd5b8151614a9381615478565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006158f56040830185615124565b82810360208401526159078185615124565b95945050505050565b80820281158282048414176109cb576109cb615656565b60008261594457634e487b7160e01b600052601260045260246000fd5b500490565b60ff82811682821603908111156109cb576109cb615656565b600181815b8085111561599d57816000190482111561598357615983615656565b8085161561599057918102915b93841c9390800290615967565b509250929050565b6000826159b4575060016109cb565b816159c1575060006109cb565b81600181146159d757600281146159e1576159fd565b60019150506109cb565b60ff8411156159f2576159f2615656565b50506001821b6109cb565b5060208310610133831016604e8410600b8410161715615a20575081810a6109cb565b615a2a8383615962565b8060001904821115615a3e57615a3e615656565b029392505050565b6000614a9360ff8416836159a5565b61ffff82811682821603908082111561581257615812615656565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015615ac05784516001600160a01b031683529383019391830191600101615a9b565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215615af457600080fd5b82516001600160401b03811115615b0a57600080fd5b8301601f81018513615b1b57600080fd5b8051615b2681614e87565b604051615b338282614e5b565b82815260059290921b8301840191848101915087831115615b5357600080fd5b928401925b82841015614bc057835182529284019290840190615b58565b6001600160a01b0386811682528516602082015260a060408201819052600090615b9d90830186615124565b8281036060840152615baf8186615124565b905082810360808401526155c08185614d89565b600060208284031215615bd557600080fd5b8151614a9381614d32565b600060033d1115615bf95760046000803e5060005160e01c5b90565b600060443d1015615c0a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615c3957505050505090565b8285019150815181811115615c515750505050505090565b843d8701016020828501011115615c6b5750505050505090565b615c7a60208286010187614e5b565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60006040808385031215615ce057600080fd5b8051615ceb81614e1d565b809250835181526020808501516001600160401b03811115615d0c57600080fd5b8501601f81018713615d1d57600080fd5b8051615d2881614e87565b8551615d348282614e5b565b82815260079290921b8301840191848101915089831115615d5457600080fd5b928401925b82841015615de657838a036080811215615d735760008081fd5b8751615d7e81614e1d565b606080831215615d8e5760008081fd5b89519250615d9b83614e3c565b8651615da681614ce1565b835286880151615db58161527c565b83890152868a0151615dc6816152ce565b838b01529181529085015186820152825260809093019290840190615d59565b80858701525050505050505092915050565b600060208284031215615e0a57600080fd5b81516001600160401b03811115615e2057600080fd5b615e2c84828501615ccd565b949350505050565b60008060408385031215615e4757600080fd5b8251915060208301516001600160401b03811115615e6457600080fd5b61511a85828601615ccd565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614bc090830184614d89565b60008251615ebc818460208701614d65565b919091019291505056fea2646970667358221220eccd49e558b16fdadabd8001cb367a070661d6ed448067e41d89e0103bdfc9df64736f6c63430008150033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "deposit(uint256)": {
        "details": "The user must deposit at least the minDeposit, and will receive an ERC1155 non-fungible receipt token.  The receipt token will be mapped to a TokenInfo containing the amount deposited as well as the strategy receipt  tokens received for later withdrawal."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalance(uint256)": {
        "details": "This function utilizes the internal _deposit and _withdraw functions to rebalance based on  the strategies set in the contract. Since _deposit will set the TokenInfo.deposit to the total  deposited after the rebalance, we must store the original deposit and overwrite the TokenInfo before completing the transaction."
      },
      "refreshApprovals()": {
        "details": "Since contract never holds deposit tokens max approvals should not matter. "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "withdraw(uint256)": {
        "details": "Once all receipts are burned and deposit tokens received, the fee manager will calculate the fees due,  and the fee manager will distribute those fees before transfering the user their proceeds."
      }
    },
    "title": "Contract for FortiFi Wrapped Native MASS Vaults",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CantAddToReceipt()": [
        {
          "notice": "Error caused when strategies change and a receipt cannot be added to without rebalancing"
        }
      ],
      "CantWithdrawStrategyReceipts()": [
        {
          "notice": "Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens"
        }
      ],
      "ContractPaused()": [
        {
          "notice": "Error caused when trying to transact with contract while paused"
        }
      ],
      "DuplicateStrategy()": [
        {
          "notice": "Error caused by trying to set a strategy more than once"
        }
      ],
      "FailedToRefund()": [
        {
          "notice": "Error thrown when refunding native token fails"
        }
      ],
      "InvalidArrayLength()": [
        {
          "notice": "Error caused by mismatching array lengths"
        }
      ],
      "InvalidBps()": [
        {
          "notice": "Error caused when bps does not equal 10_000"
        }
      ],
      "InvalidDeposit()": [
        {
          "notice": "Error caused by trying to deposit 0"
        }
      ],
      "InvalidMinDeposit()": [
        {
          "notice": "Error caused by trying to set minDeposit below BPS"
        }
      ],
      "InvalidOracle()": [
        {
          "notice": "Error caused when trying to set oracle to an invalid address"
        }
      ],
      "InvalidSlippage()": [
        {
          "notice": "Error caused by trying to set a slippage too high"
        }
      ],
      "NoStrategies()": [
        {
          "notice": "Error caused when strategies array is empty"
        }
      ],
      "NotTokenOwner()": [
        {
          "notice": "Error caused by trying to use a token not owned by user"
        }
      ],
      "SwapFailed()": [
        {
          "notice": "Error caused when swap fails"
        }
      ],
      "TooManyStrategies()": [
        {
          "notice": "Error caused by trying to set too many strategies"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error caused by using 0 address as a parameter"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "add(uint256,uint256)": {
        "notice": "This function is used to add to a user's deposit when they already has a receipt (ERC1155). The user can add to their  deposit without needing to burn/withdraw first. "
      },
      "deposit(uint256)": {
        "notice": "This function is used when a user does not already have a receipt (ERC1155). "
      },
      "flipPaused()": {
        "notice": "Function to flip paused state"
      },
      "getStrategies()": {
        "notice": "View function that returns all strategies"
      },
      "rebalance(uint256)": {
        "notice": "This function allows a user to rebalance a receipt (ERC1155) token's underlying assets. "
      },
      "recoverERC20(address,uint256)": {
        "notice": "Emergency function to recover stuck ERC20 tokens"
      },
      "refreshApprovals()": {
        "notice": "Function to set max approvals for router and strategies. "
      },
      "setBpsForStrategies(uint16[])": {
        "notice": "This function allows for changing the allocations of current strategies"
      },
      "setFeeCalculator(address)": {
        "notice": "Function to set new FortiFiFeeCalculator contract"
      },
      "setFeeManager(address)": {
        "notice": "Function to set new FortiFiFeeManager contract"
      },
      "setMinDeposit(uint256)": {
        "notice": "Function to set minimum deposit"
      },
      "setNativeOracle(address)": {
        "notice": "Function to set new native oracle contract"
      },
      "setSlippage(uint16)": {
        "notice": "Function to set slippage used in swap functions. Must be 1-5% (100-500)"
      },
      "setStrategies((address,address,address,address,bool,bool,uint16,uint8)[])": {
        "notice": "This function sets up the underlying strategies used by the vault."
      },
      "supportsInterface(bytes4)": {
        "notice": "Override to allow FortiFiStrategy contracts to verify that specified vaults implement IMASS interface"
      },
      "withdraw(uint256)": {
        "notice": "This function is used to burn a receipt (ERC1155) and withdraw all underlying strategy receipt tokens. "
      }
    },
    "notice": "This contract allows for the deposit of wrapped native tokens, which is then swapped into various assets and deposited in to  multiple yield-bearing strategies. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 176,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 178,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1413,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2383,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2385,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2399,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "slippageBps",
        "offset": 0,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 2402,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "minDeposit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2405,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "nextToken",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2408,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2411,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "feeCalc",
        "offset": 1,
        "slot": "11",
        "type": "t_contract(IFortiFiFeeCalculator)2219"
      },
      {
        "astId": 2414,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "feeMgr",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IFortiFiFeeManager)2230"
      },
      {
        "astId": 2417,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "nativeOracle",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IFortiFiPriceOracle)2249"
      },
      {
        "astId": 2421,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "strategies",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Strategy)4498_storage)dyn_storage"
      },
      {
        "astId": 2426,
        "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(TokenInfo)4511_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Position)4504_storage)dyn_storage": {
        "base": "t_struct(Position)4504_storage",
        "encoding": "dynamic_array",
        "label": "struct IMASS.Position[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Strategy)4498_storage)dyn_storage": {
        "base": "t_struct(Strategy)4498_storage",
        "encoding": "dynamic_array",
        "label": "struct IMASS.Strategy[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFortiFiFeeCalculator)2219": {
        "encoding": "inplace",
        "label": "contract IFortiFiFeeCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IFortiFiFeeManager)2230": {
        "encoding": "inplace",
        "label": "contract IFortiFiFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFortiFiPriceOracle)2249": {
        "encoding": "inplace",
        "label": "contract IFortiFiPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TokenInfo)4511_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMASS.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)4511_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Position)4504_storage": {
        "encoding": "inplace",
        "label": "struct IMASS.Position",
        "members": [
          {
            "astId": 4501,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Strategy)4498_storage"
          },
          {
            "astId": 4503,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "receipt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Strategy)4498_storage": {
        "encoding": "inplace",
        "label": "struct IMASS.Strategy",
        "members": [
          {
            "astId": 4483,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4485,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "depositToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4487,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4489,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "oracle",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4491,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "isFortiFi",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4493,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "isSAMS",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4495,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "bps",
            "offset": 22,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 4497,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "decimals",
            "offset": 24,
            "slot": "3",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)4511_storage": {
        "encoding": "inplace",
        "label": "struct IMASS.TokenInfo",
        "members": [
          {
            "astId": 4506,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4510,
            "contract": "contracts/vaults/FortiFiWNativeMASSVault.sol:FortiFiWNativeMASSVault",
            "label": "positions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Position)4504_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}