{
  "address": "0xd174D9b3BBbf82a6D0d7631B7B08EE07B059a15e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositToFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fortress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverFromFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToFortress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFromFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9a0a11ca8a61fe3272f28358a808bcf02d802fdaa3f7cd9d784d320b52639756",
  "receipt": {
    "to": null,
    "from": "0x625d271F634eE0804CCc573C4679aA3AeE475B62",
    "contractAddress": "0xd174D9b3BBbf82a6D0d7631B7B08EE07B059a15e",
    "transactionIndex": 3,
    "gasUsed": "3973480",
    "logsBloom": "0x
    "blockHash": "0xc9b13431c46bf284d822cdec888bd2a424aa9b9f1be1220dd48c8e62cf89c87f",
    "transactionHash": "0x9a0a11ca8a61fe3272f28358a808bcf02d802fdaa3f7cd9d784d320b52639756",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 35069527,
        "transactionHash": "0x9a0a11ca8a61fe3272f28358a808bcf02d802fdaa3f7cd9d784d320b52639756",
        "address": "0xd174D9b3BBbf82a6D0d7631B7B08EE07B059a15e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000625d271f634ee0804ccc573c4679aa3aee475b62"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xc9b13431c46bf284d822cdec888bd2a424aa9b9f1be1220dd48c8e62cf89c87f"
      }
    ],
    "blockNumber": 35069527,
    "cumulativeGasUsed": "4264558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x53ccA4921522e43EF6652420c3eEC6FBfE987a55",
    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
  ],
  "numDeployments": 2,
  "solcInputHash": "fe0c4f2129bac9083c549995f6b24374",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositToFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fortress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFromFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToFortress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFromFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/FortiFiVectorStrategy.sol\":\"FortiFiVectorStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiFortress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiFortress by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ncontract FortiFiFortress is Ownable, ERC20 {\\r\\n    IStrategy private _strat;\\r\\n    IERC20 private _dToken;\\r\\n    IERC20 private _wNative;\\r\\n\\r\\n    constructor(address _strategy, address _depositToken, address _wrappedNative, address _owner) ERC20(\\\"FortiFi Fortress Receipt\\\", \\\"FFFR\\\") {\\r\\n        require(_strategy != address(0), \\\"FortiFi: Invalid strategy\\\");\\r\\n        require(_depositToken != address(0), \\\"FortiFi: Invalid deposit token\\\");\\r\\n        require(_wrappedNative != address(0), \\\"FortiFi: Invalid native token\\\");\\r\\n        require(_owner != address(0), \\\"FortiFi: Invalid owner\\\");\\r\\n        _strat = IStrategy(_strategy);\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        _wNative = IERC20(_wrappedNative);\\r\\n\\r\\n        // grant approvals\\r\\n        _dToken.approve(_strategy, type(uint256).max);\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    receive() external payable { \\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external virtual onlyOwner {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 deposit\\\");\\r\\n        require(_dToken.transferFrom(msg.sender, address(this), _amount), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n        uint256 _beforeBalance = _strat.balanceOf(address(this));\\r\\n        _strat.deposit(_amount);\\r\\n        _mint(msg.sender, (_strat.balanceOf(address(this)) - _beforeBalance));\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) external virtual onlyOwner {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 withdraw\\\");\\r\\n        _burn(msg.sender, _amount);\\r\\n        _strat.withdraw(_amount);\\r\\n        require(_dToken.transfer(msg.sender, _dToken.balanceOf(address(this))), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n    function refreshApproval() external {\\r\\n        _dToken.approve(address(_strat), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function depositToken() external view returns(address) {\\r\\n        return address(_dToken);\\r\\n    }\\r\\n\\r\\n    function strategy() external view returns(address) {\\r\\n        return address(_strat);\\r\\n    }\\r\\n\\r\\n    function recoverERC20(address _to, address _token, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_token).transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to refund left over tokens from transactions\\r\\n    function _refund() internal {\\r\\n        // Refund left over deposit tokens, if any\\r\\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            require(_dToken.transfer(msg.sender, _depositTokenBalance), \\\"FortiFi: Failed to refund ERC20\\\");\\r\\n        }\\r\\n\\r\\n        // Refund left over wrapped native tokens, if any\\r\\n        uint256 _wrappedNativeTokenBalance = _wNative.balanceOf(address(this));\\r\\n        if (_wrappedNativeTokenBalance > 0) {\\r\\n            require(_wNative.transfer(msg.sender, _wrappedNativeTokenBalance), \\\"FortiFi: Failed to refund native\\\");\\r\\n        }\\r\\n\\r\\n        // Refund left over native tokens, if any\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\t    require(success, \\\"FortiFi: Failed to refund native\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x14c766648b6403f430ce3dba6c7cf11f236084d42353586fd1d768a00c4cbb5c\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiStrategy by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IFortress.sol\\\";\\r\\nimport \\\"./FortiFiFortress.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ncontract FortiFiStrategy is Ownable, ERC20 {\\r\\n    address private _strat;\\r\\n    IERC20 private _dToken;\\r\\n    IERC20 private _wNative;\\r\\n\\r\\n    mapping(address => address) public userToFortress;\\r\\n\\r\\n    constructor(address _strategy, address _depositToken, address _wrappedNative) ERC20(\\\"FortiFi Strategy Receipt\\\", \\\"FFSR\\\") {\\r\\n        require(_strategy != address(0), \\\"FortiFi: Invalid strategy\\\");\\r\\n        require(_depositToken != address(0), \\\"FortiFi: Invalid deposit token\\\");\\r\\n        require(_wrappedNative != address(0), \\\"FortiFi: Invalid native token\\\");\\r\\n        _strat = _strategy;\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        _wNative = IERC20(_wrappedNative);\\r\\n    }\\r\\n\\r\\n    receive() external payable { \\r\\n    }\\r\\n\\r\\n    function depositToFortress(uint256 _amount, address _user) external virtual {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 deposit\\\");\\r\\n        require(_dToken.transferFrom(msg.sender, address(this), _amount), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n        IFortress _fortress;\\r\\n\\r\\n        if (userToFortress[_user] == address(0)) {\\r\\n            FortiFiFortress _fort = new FortiFiFortress(_strat, address(_dToken), address(_wNative), address(this));\\r\\n            _fortress = IFortress(address(_fort));\\r\\n            userToFortress[_user] = address(_fortress);\\r\\n        } else {\\r\\n            _fortress = IFortress(userToFortress[_user]);\\r\\n        }\\r\\n\\r\\n        uint256 _beforeBalance = _fortress.balanceOf(address(this));\\r\\n        _dToken.approve(address(_fortress), _amount);\\r\\n        _fortress.deposit(_amount);\\r\\n        _mint(msg.sender, (_fortress.balanceOf(address(this)) - _beforeBalance));\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n    function withdrawFromFortress(uint256 _amount, address _user) external {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 withdraw\\\");\\r\\n        require(userToFortress[_user] != address(0), \\\"FortiFi: No fortress\\\");\\r\\n        _burn(msg.sender, _amount);\\r\\n        IFortress(userToFortress[_user]).withdraw(_amount);\\r\\n        require(_dToken.transfer(msg.sender, _dToken.balanceOf(address(this))), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_token).transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function recoverFromFortress(address _fortress, address _token, uint256 _amount) external onlyOwner {\\r\\n        IFortress(_fortress).recoverERC20(msg.sender, _token, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to refund left over tokens from transactions\\r\\n    function _refund() internal {\\r\\n        // Refund left over deposit tokens, if any\\r\\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            require(_dToken.transfer(msg.sender, _depositTokenBalance), \\\"FortiFi: Failed to refund ERC20\\\");\\r\\n        }\\r\\n\\r\\n        // Refund left over wrapped native tokens, if any\\r\\n        uint256 _wrappedNativeTokenBalance = _wNative.balanceOf(address(this));\\r\\n        if (_wrappedNativeTokenBalance > 0) {\\r\\n            require(_wNative.transfer(msg.sender, _wrappedNativeTokenBalance), \\\"FortiFi: Failed to refund native\\\");\\r\\n        }\\r\\n\\r\\n        // Refund left over native tokens, if any\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\t    require(success, \\\"FortiFi: Failed to refund native\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x6c305838827cfb7e9983eb8fe135e40e21fd11f846c28a6654a04ddb2bae04c7\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiVectorFortress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiVectorFortress by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./FortiFiFortress.sol\\\";\\r\\nimport \\\"./interfaces/IVectorStrategy.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ncontract FortiFiVectorFortress is FortiFiFortress {\\r\\n    uint16 private constant BPS = 10_000;\\r\\n    uint256 private slippageBps = 100;\\r\\n    IVectorStrategy private _strat;\\r\\n    IERC20 private _dToken;\\r\\n    IERC20 private _wNative;\\r\\n\\r\\n    constructor(address _strategy, address _depositToken, address _wrappedNative, address _owner) \\r\\n        FortiFiFortress(_strategy, _depositToken, _wrappedNative, _owner) {\\r\\n        require(_strategy != address(0), \\\"FortiFi: Invalid strategy\\\");\\r\\n        require(_depositToken != address(0), \\\"FortiFi: Invalid deposit token\\\");\\r\\n        require(_wrappedNative != address(0), \\\"FortiFi: Invalid native token\\\");\\r\\n        require(_owner != address(0), \\\"FortiFi: Invalid owner\\\");\\r\\n        _strat = IVectorStrategy(_strategy);\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        _wNative = IERC20(_wrappedNative);\\r\\n\\r\\n        // grant approvals\\r\\n        _dToken.approve(_strategy, type(uint256).max);\\r\\n\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _amount) external override onlyOwner {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 withdraw\\\");\\r\\n        _burn(msg.sender, _amount);\\r\\n        uint256 _tokensForShares = _strat.getDepositTokensForShares(_amount);\\r\\n        uint256 _minAmount = _tokensForShares * (BPS - slippageBps) / BPS;\\r\\n        \\r\\n        _strat.withdraw(_tokensForShares, _minAmount);\\r\\n        require(_dToken.transfer(msg.sender, _dToken.balanceOf(address(this))), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n\\r\\n        if (_strat.balanceOf(address(this)) > 0) {\\r\\n            require(_strat.transfer(msg.sender, _strat.balanceOf(address(this))), \\\"FortiFi: Failed to refund\\\");\\r\\n        }\\r\\n\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n    function setSlippage(uint16 _amount) external onlyOwner {\\r\\n        slippageBps = _amount;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x935381c1d5137cd4aeff8aa50c35196daa9b75889e2a1437bc84a30467713bff\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiVectorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiVectorStrategy by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./FortiFiStrategy.sol\\\";\\r\\nimport \\\"./FortiFiVectorFortress.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ncontract FortiFiVectorStrategy is FortiFiStrategy {\\r\\n    address private _strat;\\r\\n    IERC20 private _dToken;\\r\\n    IERC20 private _wNative;\\r\\n\\r\\n    constructor(address _strategy, address _depositToken, address _wrappedNative) FortiFiStrategy(_strategy, _depositToken, _wrappedNative) {\\r\\n        require(_strategy != address(0), \\\"FortiFi: Invalid strategy\\\");\\r\\n        require(_depositToken != address(0), \\\"FortiFi: Invalid deposit token\\\");\\r\\n        require(_wrappedNative != address(0), \\\"FortiFi: Invalid native token\\\");\\r\\n        _strat = _strategy;\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        _wNative = IERC20(_wrappedNative);\\r\\n    }\\r\\n\\r\\n    function depositToFortress(uint256 _amount, address _user) external override {\\r\\n        require(_amount > 0, \\\"FortiFi: 0 deposit\\\");\\r\\n        require(_dToken.transferFrom(msg.sender, address(this), _amount), \\\"FortiFi: Failed to transfer dep.\\\");\\r\\n        IFortress _fortress;\\r\\n\\r\\n        if (userToFortress[_user] == address(0)) {\\r\\n            FortiFiVectorFortress _fort = new FortiFiVectorFortress(_strat, address(_dToken), address(_wNative), address(this));\\r\\n            _fortress = IFortress(address(_fort));\\r\\n            userToFortress[_user] = address(_fortress);\\r\\n        } else {\\r\\n            _fortress = IFortress(userToFortress[_user]);\\r\\n        }\\r\\n\\r\\n        uint256 _beforeBalance = _fortress.balanceOf(address(this));\\r\\n        _dToken.approve(address(_fortress), _amount);\\r\\n        _fortress.deposit(_amount);\\r\\n        _mint(msg.sender, (_fortress.balanceOf(address(this)) - _beforeBalance));\\r\\n        _refund();\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x24bb48520f06aef0ca564aee776e6912019b58938877bd982dcd24985f393a7d\",\"license\":\"MIT\"},\"contracts/strategies/interfaces/IFortress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortress Interface by FortiFi\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/// @title Interface for FortiFi Fortresses\\r\\ninterface IFortress {\\r\\n    function deposit(uint amount) external;\\r\\n    function withdraw(uint amount) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n    function recoverERC20(address to, address token, uint amount) external;\\r\\n}\",\"keccak256\":\"0x8cfe29b084dcb81b8b532f0113e28cd3e891fc2f67dfeff141c9024173abc69d\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IStrategy Interface by FortiFi\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/// @title Interface for basic strategies used by FortiFi SAMS Vaults\\r\\ninterface IStrategy {\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function deposit(uint amount) external;\\r\\n    function depositToFortress(uint amount, address user) external;\\r\\n    function transferFrom(address from, address to, uint amount) external returns(bool);\\r\\n    function transfer(address to, uint amount) external returns(bool);\\r\\n    function withdraw(uint amount) external;\\r\\n    function withdrawFromFortress(uint amount, address user) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0xd0cc4f460d21c9d859c9185cc4dc7d1b031eebf2a87dd90f632e387dbb754cfd\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IVectorStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IVectorStrategy Interface by FortiFi\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/// @title Interface for Vector strategies used by FortiFi SAMS Vaults\\r\\ninterface IVectorStrategy {\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function deposit(uint amount) external;\\r\\n    function transferFrom(address from, address to, uint amount) external returns(bool);\\r\\n    function transfer(address to, uint amount) external returns(bool);\\r\\n    function withdraw(uint amount, uint minAmount) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n    function getDepositTokensForShares(uint256 amount) external view returns(uint256);\\r\\n    function strategy() external view returns(address);\\r\\n}\",\"keccak256\":\"0x768eb74309608be2212f3a9ae7aaaccbbfd833d1e596e24c79462c110844fd6d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 126,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 128,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1607,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_strat",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1610,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_dToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 1613,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_wNative",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 1617,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "userToFortress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2235,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_strat",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2238,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_dToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 2241,
        "contract": "contracts/strategies/FortiFiVectorStrategy.sol:FortiFiVectorStrategy",
        "label": "_wNative",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)770"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)770": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}