{
  "address": "0x75F8330b90Aad64409f9b833fBeb88f6eA3579BD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCalculator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVaultImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFortress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyBricked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ApprovalsRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDeposited",
          "type": "uint256"
        }
      ],
      "name": "DepositToFortress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fortress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20RecoveredFromFortress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "ExtraTokensSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCalculator",
          "type": "address"
        }
      ],
      "name": "FeeCalculatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeManager",
          "type": "address"
        }
      ],
      "name": "FeeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "FortressCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "GLPRewardRouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBricked",
          "type": "bool"
        }
      ],
      "name": "SetStrategyAsBricked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newSlippage",
          "type": "uint16"
        }
      ],
      "name": "SlippageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakedGLP",
          "type": "address"
        }
      ],
      "name": "StakedGLPSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "VaultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawBrickedFromFortress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromFortress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_dToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_strat",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_wNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositToFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extraTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCalc",
      "outputs": [
        {
          "internalType": "contract IFortiFiFeeCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMgr",
      "outputs": [
        {
          "internalType": "contract IFortiFiFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFortiFiVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fortress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverFromFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "setExtraTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setFeeCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setGlpRewardRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fortresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardRouterForFortresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_amount",
          "type": "uint16"
        }
      ],
      "name": "setSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fortresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setSlippageForFortresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setStakedGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fortresses",
          "type": "address[]"
        }
      ],
      "name": "setStakedGlpForFortresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isBricked",
          "type": "bool"
        }
      ],
      "name": "setStrategyBricked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedGLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyIsBricked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultToTokenToFortress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFortress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b54fcb1e468f6af4cf4b300da294dffede97053f86601bb6614cafbbd6ec471",
  "receipt": {
    "to": null,
    "from": "0x625d271F634eE0804CCc573C4679aA3AeE475B62",
    "contractAddress": "0x75F8330b90Aad64409f9b833fBeb88f6eA3579BD",
    "transactionIndex": 2,
    "gasUsed": "4657802",
    "logsBloom": "0x
    "blockHash": "0x575d29a9c35bd5abe92b620c4c53227b869700aadcfd79177fbd0a3324e1c3cb",
    "transactionHash": "0x4b54fcb1e468f6af4cf4b300da294dffede97053f86601bb6614cafbbd6ec471",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 41605520,
        "transactionHash": "0x4b54fcb1e468f6af4cf4b300da294dffede97053f86601bb6614cafbbd6ec471",
        "address": "0x75F8330b90Aad64409f9b833fBeb88f6eA3579BD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000625d271f634ee0804ccc573c4679aa3aee475b62"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x575d29a9c35bd5abe92b620c4c53227b869700aadcfd79177fbd0a3324e1c3cb"
      }
    ],
    "blockNumber": 41605520,
    "cumulativeGasUsed": "4862625",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9f637540149f922145c06e1aa3f38dcDc32Aff5C",
    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xf0F55E8C9E23c627b253876F3B4Bf1Ef3eBA4Db0",
    "0x92581e042d0A5029430562C0959aEbdFeCBfFd36"
  ],
  "numDeployments": 8,
  "solcInputHash": "e2f833d6a04f9ddc17b0d3914e52b153",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVaultImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFortress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyBricked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ApprovalsRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"name\":\"DepositToFortress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fortress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20RecoveredFromFortress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ExtraTokensSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCalculator\",\"type\":\"address\"}],\"name\":\"FeeCalculatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"FortressCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"GLPRewardRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBricked\",\"type\":\"bool\"}],\"name\":\"SetStrategyAsBricked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSlippage\",\"type\":\"uint16\"}],\"name\":\"SlippageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakedGLP\",\"type\":\"address\"}],\"name\":\"StakedGLPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawBrickedFromFortress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromFortress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositToFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCalc\",\"outputs\":[{\"internalType\":\"contract IFortiFiFeeCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMgr\",\"outputs\":[{\"internalType\":\"contract IFortiFiFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFortiFiVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fortress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFromFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"setExtraTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setFeeCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setGlpRewardRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fortresses\",\"type\":\"address[]\"}],\"name\":\"setRewardRouterForFortresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fortresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSlippageForFortresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setStakedGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fortresses\",\"type\":\"address[]\"}],\"name\":\"setStakedGlpForFortresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBricked\",\"type\":\"bool\"}],\"name\":\"setStrategyBricked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedGLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyIsBricked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultToTokenToFortress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFortress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"depositToFortress(uint256,address,uint256)\":{\"details\":\"If a user has not deposited previously, this function will deploy a FortiFiVectorFortress contract instead of the base FortiFiFortress contract\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRouterForFortresses(address[])\":{\"details\":\"This function uses the address of the current rewardRouter variable for strategy. Update that first if necessary.\"},\"setStakedGlpForFortresses(address[])\":{\"details\":\"This function uses the address of the current stakedGLP variable for strategy. Update that first if necessary.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFromFortress(uint256,address,uint256)\":{\"details\":\"Override is required because Vector Fortresses need slippage passed in to withdrawal function\"}},\"title\":\"GLP FortiFi Strategy contract\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidDeposit()\":[{\"notice\":\"Error caused by trying to deposit 0\"}],\"InvalidSlippage()\":[{\"notice\":\"Error caused when trying to set slippage to invalid value\"}],\"InvalidVaultImplementation()\":[{\"notice\":\"Error when vault does not implement ISAMS or IMASS interface (0xafba703c)\"}],\"InvalidWithdrawal()\":[{\"notice\":\"Error caused by trying to withdraw 0\"}],\"NoFortress()\":[{\"notice\":\"Error caused when trying to withdraw from non-existent fortress\"}],\"StrategyBricked()\":[{\"notice\":\"Error caused when trying to deposit to bricked strategy\"}],\"ZeroAddress()\":[{\"notice\":\"Error caused by using 0 address as a parameter\"}]},\"kind\":\"user\",\"methods\":{\"depositToFortress(uint256,address,uint256)\":{\"notice\":\"Function to deposit\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Emergency function to recover stuck tokens\"},\"recoverFromFortress(address,address,uint256)\":{\"notice\":\"Emergency function to recover stuck tokens from Fortress\"},\"setExtraTokens(address[])\":{\"notice\":\"Set extra reward tokens for strategy\"},\"setFeeCalculator(address)\":{\"notice\":\"Function to set new FortiFiFeeCalculator contract\"},\"setFeeManager(address)\":{\"notice\":\"Function to set new FortiFiFeeManager contract\"},\"setGlpRewardRouter(address)\":{\"notice\":\"Function to set the GLP Reward Manager\"},\"setRewardRouterForFortresses(address[])\":{\"notice\":\"Function to set the GLP Reward Router Contract in FortiFiGLPFortress contracts. \"},\"setSlippage(uint16)\":{\"notice\":\"Function to set the slippage if 1% is not sufficient\"},\"setSlippageForFortresses(address[],uint256)\":{\"notice\":\"Function to set slippage for FortiFiFortress contracts\"},\"setStakedGlp(address)\":{\"notice\":\"Function to set the Staked GLP Contract\"},\"setStakedGlpForFortresses(address[])\":{\"notice\":\"Function to set the Staked GLP Contract in FortiFiGLPFortress contracts. \"},\"setStrategyBricked(bool)\":{\"notice\":\"Set strategy as bricked\"},\"setVault(address,bool)\":{\"notice\":\"Set valid vaults\"},\"withdrawFromFortress(uint256,address,uint256)\":{\"notice\":\"Function to withdraw\"}},\"notice\":\"This contract allows for FortiFi vaults to utilize GLP strategies by minting GLP with USDC and depositing into a  simple vault like Yield Yak\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/FortiFiGLPStrategy.sol\":\"FortiFiGLPStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/fee-calculators/interfaces/IFortiFiFeeCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiFeeCalculator Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiFeeCalculator\\r\\ninterface IFortiFiFeeCalculator {\\r\\n    function getFees(address user, uint256 amount) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x16e344e0c95704f9c49d93cbc4a8a2604b457cfad9b42964b57eba47a2fd2f27\",\"license\":\"GPL-3.0-only\"},\"contracts/fee-managers/interfaces/IFortiFiFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortiFiFeeManager Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFiFeeManager\\r\\ninterface IFortiFiFeeManager {\\r\\n    function collectFees(address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x806f418262cceb182e6f70442d42d1b55c3ab5b0ecad9fc5993b7c07c3d4deb3\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/FortiFiFortress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiFortress by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @notice Error caused by trying to use recoverERC20 to withdraw strategy receipt tokens\\r\\nerror CantWithdrawStrategyReceipts();\\r\\n\\r\\n/// @notice Error caused by using 0 address as a parameter\\r\\nerror ZeroAddress();\\r\\n\\r\\n/// @notice Error caused by trying to deposit 0\\r\\nerror InvalidDeposit();\\r\\n\\r\\n/// @notice Error caused by trying to withdraw 0\\r\\nerror InvalidWithdrawal();\\r\\n\\r\\n/// @notice Error thrown when refunding native token fails\\r\\nerror FailedToRefund();\\r\\n\\r\\n/// @title Base FortiFi Fortress contract\\r\\n/// @notice Fortresses are vault contracts that are specific to an individual vault receipt. By isolating deposits,\\r\\n/// Fortresses allow for balance-specific logic from underlying strategies.\\r\\ncontract FortiFiFortress is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    IStrategy public immutable _strat;\\r\\n    IERC20 public immutable _dToken;\\r\\n    IERC20 public immutable _wNative;\\r\\n\\r\\n    constructor(address _strategy, address _depositToken, address _wrappedNative) {\\r\\n        if (_strategy == address(0)) revert ZeroAddress();\\r\\n        if (_depositToken == address(0)) revert ZeroAddress();\\r\\n        if (_wrappedNative == address(0)) revert ZeroAddress();\\r\\n        _strat = IStrategy(_strategy);\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        _wNative = IERC20(_wrappedNative);\\r\\n\\r\\n        // grant approvals\\r\\n        _dToken.approve(_strategy, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    event DepositMade(uint256 amount, address indexed user);\\r\\n    event WithdrawalMade(address user);\\r\\n    event ApprovalsRefreshed();\\r\\n    event ERC20Recovered(address indexed to, address indexed token, uint256 amount);\\r\\n\\r\\n    receive() external payable { \\r\\n    }\\r\\n\\r\\n    /// @notice Function to deposit\\r\\n    function deposit(uint256 _amount, address _user) external virtual onlyOwner returns(uint256 _newStratReceipts){\\r\\n        if (_amount == 0) revert InvalidDeposit();\\r\\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _beforeBalance = _strat.balanceOf(address(this));\\r\\n\\r\\n        // deposit to underlying strategy\\r\\n        _strat.deposit(_amount);\\r\\n\\r\\n        // calculate new strategy receipt tokens received\\r\\n        _newStratReceipts = _strat.balanceOf(address(this)) - _beforeBalance;\\r\\n\\r\\n        // refund left over tokens, if any\\r\\n        _refund(_user);\\r\\n\\r\\n        emit DepositMade(_amount, _user);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to withdraw everything from vault\\r\\n    function withdraw(address _user, address[] memory _extraTokens) external virtual onlyOwner {\\r\\n        uint256 _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance == 0) revert InvalidWithdrawal();\\r\\n\\r\\n        _strat.withdraw(_balance);\\r\\n\\r\\n        // ensure no strategy receipt tokens remain\\r\\n        _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance > 0) {\\r\\n            IERC20(address(_strat)).safeTransfer(_user, _balance);\\r\\n        }\\r\\n\\r\\n        // transfer received deposit tokens and refund left over tokens, if any\\r\\n        _dToken.safeTransfer(msg.sender, _dToken.balanceOf(address(this)));\\r\\n\\r\\n        // transfer extra reward tokens\\r\\n        uint256 _length = _extraTokens.length;\\r\\n        if (_length > 0) {\\r\\n            for(uint256 i = 0; i < _length; i++) {\\r\\n                IERC20 _token = IERC20(_extraTokens[i]);\\r\\n                uint256 _tokenBalance = _token.balanceOf(address(this));\\r\\n                if (_tokenBalance > 0) {\\r\\n                    _token.safeTransfer(msg.sender, _tokenBalance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _refund(_user);\\r\\n\\r\\n        emit WithdrawalMade(_user);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to return strategy receipts to user when strategy is bricked\\r\\n    function withdrawBricked(address _user) external virtual onlyOwner {\\r\\n        uint256 _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance == 0) revert InvalidWithdrawal();\\r\\n\\r\\n        // ensure no strategy receipt tokens remain\\r\\n        _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance > 0) {\\r\\n            IERC20(address(_strat)).safeTransfer(_user, _balance);\\r\\n        }\\r\\n\\r\\n        emit WithdrawalMade(_user);\\r\\n    }\\r\\n\\r\\n    /// @notice Grant max approval to underlying strategy for deposit token\\r\\n    /// @dev Since Fortresses do not hold deposit tokens for longer than it takes to complete the \\r\\n    /// transaction there should be no risk in granting max approval\\r\\n    function refreshApproval() external {\\r\\n        _dToken.approve(address(_strat), type(uint256).max);\\r\\n        emit ApprovalsRefreshed();\\r\\n    }\\r\\n\\r\\n    /// @notice Emergency function to recover stuck tokens. \\r\\n    function recoverERC20(address _to, address _token, uint256 _amount) external onlyOwner {\\r\\n        if (_token == address(_strat)) revert CantWithdrawStrategyReceipts();\\r\\n        IERC20(_token).safeTransfer(_to, _amount);\\r\\n        emit ERC20Recovered(_to, _token, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to refund left over tokens from transactions to user who initiated vault transaction\\r\\n    function _refund(address _user) internal {\\r\\n        // Refund left over deposit tokens to strategy, if any\\r\\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\\r\\n        }\\r\\n\\r\\n        // Refund left over wrapped native tokens to user, if any\\r\\n        uint256 _wrappedNativeTokenBalance = _wNative.balanceOf(address(this));\\r\\n        if (_wrappedNativeTokenBalance > 0) {\\r\\n            _wNative.safeTransfer(_user, _wrappedNativeTokenBalance);\\r\\n        }\\r\\n\\r\\n        // Refund left over native tokens to user, if any\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool success, ) = payable(_user).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\t    if (!success) revert FailedToRefund();\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x68db15b3077837f3c8f3a3bf342c0cb43a22eec500bf092981cbd6237a2da931\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiGLPFortress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiGLPFortress by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./FortiFiFortress.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface IGLPRewardRouter {\\r\\n    function glpManager() external view returns(address);\\r\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\\r\\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IGLPManager {\\r\\n    function getPrice(bool _maximise) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title FortiFiFortress for GLP Strategy\\r\\n/// @notice This Fortress can only be used for FortiFiGLPStrategy contracts\\r\\ncontract FortiFiGLPFortress is FortiFiFortress {\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    uint16 public slippageBps = 100;\\r\\n    uint16 public constant BPS = 10000;\\r\\n\\r\\n    IERC20 public _stakedGLP;\\r\\n    IERC20 public constant FSGLP = IERC20(0x9e295B5B976a184B14aD8cd72413aD846C299660); // Avalanche fsGLP\\r\\n\\r\\n    IGLPRewardRouter public rewardRouter;\\r\\n\\r\\n    constructor(address _strategy, address _sGLP, address _depositToken, address _wrappedNative, address _rewardRouter) \\r\\n        FortiFiFortress(_strategy, _depositToken, _wrappedNative) {\\r\\n        if (_sGLP == address(0)) revert ZeroAddress();\\r\\n        if (_rewardRouter == address(0)) revert ZeroAddress();\\r\\n        _stakedGLP = IERC20(_sGLP);\\r\\n        rewardRouter = IGLPRewardRouter(_rewardRouter);\\r\\n\\r\\n        // grant approvals\\r\\n        _stakedGLP.approve(_strategy, type(uint256).max);\\r\\n        _dToken.approve(rewardRouter.glpManager(), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    event StakedGLPSet(address stakedGLP);\\r\\n    event GLPRewardRouterSet(address rewardRouter);\\r\\n    event SlippageSet(uint slippage);\\r\\n\\r\\n    /// @notice Function to deposit\\r\\n    function deposit(uint256 _amount, address _user) external virtual override onlyOwner returns(uint256 _newStratReceipts){\\r\\n        if (_amount == 0) revert InvalidDeposit();\\r\\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _beforeBalance = _strat.balanceOf(address(this));\\r\\n\\r\\n        // get price and mint GLP\\r\\n        uint256 _glpPrice = IGLPManager(rewardRouter.glpManager()).getPrice(true); // maximize price\\r\\n        uint256 _glpOut = _amount * (10**18) / _glpPrice*10**(30 - 6); // GLP decimals are 18, price precision is 30 - 6 (USDC decimals)\\r\\n        uint256 _glpAmount = rewardRouter.mintAndStakeGlp(address(_dToken), _amount, 0, _glpOut * (BPS - slippageBps) / BPS);\\r\\n\\r\\n        // deposit to underlying strategy\\r\\n        _strat.deposit(_glpAmount);\\r\\n\\r\\n        // calculate new strategy receipt tokens received\\r\\n        _newStratReceipts = _strat.balanceOf(address(this)) - _beforeBalance;\\r\\n\\r\\n        // refund left over tokens, if any\\r\\n        _refund(_user);\\r\\n\\r\\n        emit DepositMade(_amount, _user);\\r\\n    }\\r\\n\\r\\n        /// @notice Function to withdraw everything from vault\\r\\n    function withdraw(address _user, address[] memory _extraTokens) external virtual override onlyOwner {\\r\\n        uint256 _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance == 0) revert InvalidWithdrawal();\\r\\n\\r\\n        _strat.withdraw(_balance);\\r\\n\\r\\n        // ensure no strategy receipt tokens remain\\r\\n        _balance = _strat.balanceOf(address(this));\\r\\n        if (_balance > 0) {\\r\\n            IERC20(address(_strat)).safeTransfer(_user, _balance);\\r\\n        }\\r\\n\\r\\n        uint256 _fsGlpReceived = FSGLP.balanceOf(address(this));\\r\\n\\r\\n        // redeem GLP for deposit token\\r\\n        uint256 _glpPrice = IGLPManager(rewardRouter.glpManager()).getPrice(true); // maximize price\\r\\n        uint256 _dTokenOut = _fsGlpReceived * (_glpPrice / 10**18) / 10**(30 - 6); // GLP decimals are 18, price precision is 30 - 6 (USDC decimals)\\r\\n        rewardRouter.unstakeAndRedeemGlp(address(_dToken), _fsGlpReceived, _dTokenOut * (BPS - slippageBps) / BPS, msg.sender);\\r\\n\\r\\n        // transfer received deposit tokens and refund left over tokens, if any\\r\\n        _dToken.safeTransfer(msg.sender, _dToken.balanceOf(address(this)));\\r\\n\\r\\n        // transfer extra reward tokens\\r\\n        uint256 _length = _extraTokens.length;\\r\\n        if (_length > 0) {\\r\\n            for(uint256 i = 0; i < _length; i++) {\\r\\n                IERC20 _token = IERC20(_extraTokens[i]);\\r\\n                uint256 _tokenBalance = _token.balanceOf(address(this));\\r\\n                if (_tokenBalance > 0) {\\r\\n                    _token.safeTransfer(msg.sender, _tokenBalance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _refund(_user);\\r\\n\\r\\n        emit WithdrawalMade(_user);\\r\\n    }\\r\\n\\r\\n    /// @notice Grant max approval to underlying strategy for Staked GLP\\r\\n    /// @dev Since Fortresses do not hold deposit tokens for longer than it takes to complete the \\r\\n    /// transaction there should be no risk in granting max approval\\r\\n    function refreshGlpApprovals() external {\\r\\n        _stakedGLP.approve(address(_strat), type(uint256).max);\\r\\n        _dToken.approve(rewardRouter.glpManager(), type(uint256).max);\\r\\n        emit ApprovalsRefreshed();\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the Staked GLP Contract\\r\\n    function setStakedGlp(address _newAddress) public onlyOwner {\\r\\n        _stakedGLP = IERC20(_newAddress);\\r\\n        emit StakedGLPSet(_newAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the GLP Reward Router\\r\\n    function setRewardRouter(address _newAddress) public onlyOwner {\\r\\n        rewardRouter = IGLPRewardRouter(_newAddress);\\r\\n        emit GLPRewardRouterSet(_newAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the slippage if 1% is not sufficient\\r\\n    function setSlippage(uint16 _amount) external onlyOwner {\\r\\n        slippageBps = _amount;\\r\\n        emit SlippageSet(_amount);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xb8108a49b313c9b1e3dff33db38bb200b183eac4638d9426c8391f8bb187935f\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiGLPStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiGLPStrategy by FortiFi\\r\\n\\r\\nimport \\\"./FortiFiStrategy.sol\\\";\\r\\nimport \\\"./FortiFiGLPFortress.sol\\\";\\r\\nimport \\\"./interfaces/IGLPFortress.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @notice Error caused when trying to set slippage to invalid value\\r\\nerror InvalidSlippage();\\r\\n\\r\\n/// @title GLP FortiFi Strategy contract\\r\\n/// @notice This contract allows for FortiFi vaults to utilize GLP strategies by minting GLP with USDC and depositing into a \\r\\n/// simple vault like Yield Yak\\r\\ncontract FortiFiGLPStrategy is FortiFiStrategy {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint16 public slippageBps = 100;\\r\\n    uint16 public constant BPS = 10000;\\r\\n\\r\\n    address public stakedGLP = 0x5643F4b25E36478eE1E90418d5343cb6591BcB9d;\\r\\n    address public rewardRouter = 0xB70B91CE0771d3f4c81D87660f71Da31d48eB3B3;\\r\\n\\r\\n    constructor(address _strategy, \\r\\n        address _depositToken, // MUST BE USDC\\r\\n        address _wrappedNative,\\r\\n        address _feeManager,\\r\\n        address _feeCalculator) \\r\\n        FortiFiStrategy(_strategy, _depositToken, _wrappedNative, _feeManager, _feeCalculator) {\\r\\n    }\\r\\n\\r\\n    event GLPRewardRouterSet(address newManager);\\r\\n    event StakedGLPSet(address stakedGLP);\\r\\n    event ApprovalsRefreshed();\\r\\n    event SlippageSet(uint16 newSlippage);\\r\\n\\r\\n    /// @notice Function to deposit\\r\\n    /// @dev If a user has not deposited previously, this function will deploy a FortiFiVectorFortress contract\\r\\n    /// instead of the base FortiFiFortress contract\\r\\n    function depositToFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\\r\\n        if (_amount == 0) revert InvalidDeposit();\\r\\n        // if (!isFortiFiVault[msg.sender]) revert InvalidCaller();\\r\\n        if (strategyIsBricked) revert StrategyBricked();\\r\\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        IGLPFortress _fortress;\\r\\n\\r\\n        // If user has not deposited previously, deploy Fortress\\r\\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) {\\r\\n            FortiFiGLPFortress _fort = new FortiFiGLPFortress(_strat, stakedGLP, address(_dToken), address(_wNative), rewardRouter);\\r\\n            _fortress = IGLPFortress(address(_fort));\\r\\n            vaultToTokenToFortress[msg.sender][_tokenId] = address(_fortress);\\r\\n            emit FortressCreated(msg.sender, _tokenId, address(_strat));\\r\\n        } else {\\r\\n            _fortress = IGLPFortress(vaultToTokenToFortress[msg.sender][_tokenId]);\\r\\n        }\\r\\n\\r\\n        // approve and deposit\\r\\n        _dToken.approve(address(_fortress), _amount);\\r\\n        uint256 _receipts = _fortress.deposit(_amount, _user);\\r\\n\\r\\n        // mint receipt tokens = to what was received from Fortress\\r\\n        _mint(msg.sender, _receipts);\\r\\n\\r\\n        // Refund left over deposit tokens, if any\\r\\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\\r\\n        }\\r\\n\\r\\n        emit DepositToFortress(msg.sender, _user, address(_strat), _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to withdraw\\r\\n    /// @dev Override is required because Vector Fortresses need slippage passed in to withdrawal function\\r\\n    function withdrawFromFortress(uint256 _amount, address _user, uint256 _tokenId) external override {\\r\\n        if (_amount == 0) revert InvalidWithdrawal();\\r\\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) revert NoFortress();\\r\\n\\r\\n        // burn receipt tokens and withdraw from Fortress\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        if (strategyIsBricked) {\\r\\n            IGLPFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawBricked(_user);\\r\\n\\r\\n            emit WithdrawBrickedFromFortress(msg.sender, _user, address(_strat), _tokenId);\\r\\n        } else {\\r\\n            IGLPFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdraw(_user, extraTokens);\\r\\n\\r\\n            // Send withdrawn deposit tokens\\r\\n            uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n            if (_depositTokenBalance > 0) {\\r\\n                _dToken.safeTransfer(msg.sender, _depositTokenBalance);\\r\\n            }\\r\\n\\r\\n            // handle fees on extra reward tokens\\r\\n            uint256 _length = extraTokens.length;\\r\\n            if (_length > 0) {\\r\\n                for(uint256 i = 0; i < _length; i++) {\\r\\n                    IERC20 _token = IERC20(extraTokens[i]);\\r\\n                    uint256 _tokenBalance = _token.balanceOf(address(this));\\r\\n                    if (_tokenBalance > 0) {\\r\\n                        uint256 _fee = feeCalc.getFees(_user, _tokenBalance);\\r\\n                        feeMgr.collectFees(extraTokens[i], _fee);\\r\\n                        _token.safeTransfer(_user, _tokenBalance - _fee);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            emit WithdrawFromFortress(msg.sender, _user, address(_strat), _tokenId, _depositTokenBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Function to set the GLP Reward Manager\\r\\n    function setGlpRewardRouter(address _newManager) public onlyOwner {\\r\\n        rewardRouter = _newManager;\\r\\n        emit GLPRewardRouterSet(_newManager);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the GLP Reward Router Contract in FortiFiGLPFortress contracts. \\r\\n    /// @dev This function uses the address of the current rewardRouter variable for strategy. Update that first if necessary.\\r\\n    function setRewardRouterForFortresses(address[] calldata _fortresses) public onlyOwner {\\r\\n        uint256 _length = _fortresses.length;\\r\\n        for(uint256 i = 0; i < _length; i++) {\\r\\n            IGLPFortress(_fortresses[i]).setRewardRouter(rewardRouter);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the Staked GLP Contract\\r\\n    function setStakedGlp(address _newAddress) public onlyOwner {\\r\\n        stakedGLP = _newAddress;\\r\\n        emit StakedGLPSet(_newAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the Staked GLP Contract in FortiFiGLPFortress contracts. \\r\\n    /// @dev This function uses the address of the current stakedGLP variable for strategy. Update that first if necessary.\\r\\n    function setStakedGlpForFortresses(address[] calldata _fortresses) public onlyOwner {\\r\\n        uint256 _length = _fortresses.length;\\r\\n        for(uint256 i = 0; i < _length; i++) {\\r\\n            IGLPFortress(_fortresses[i]).setStakedGlp(stakedGLP);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set the slippage if 1% is not sufficient\\r\\n    function setSlippage(uint16 _amount) external onlyOwner {\\r\\n        slippageBps = _amount;\\r\\n        emit SlippageSet(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set slippage for FortiFiFortress contracts\\r\\n    function setSlippageForFortresses(address[] calldata _fortresses, uint256 _amount) public onlyOwner {\\r\\n        if (_amount > 500 || _amount < 10) revert InvalidSlippage();\\r\\n        uint256 _length = _fortresses.length;\\r\\n        for(uint256 i = 0; i < _length; i++) {\\r\\n            IGLPFortress(_fortresses[i]).setSlippage(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xe8c51a9067ff63f4073158ca093f59a76c5ae463c208a3aced63697ff1fa49de\",\"license\":\"MIT\"},\"contracts/strategies/FortiFiStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FortiFiStrategy by FortiFi\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../fee-calculators/interfaces/IFortiFiFeeCalculator.sol\\\";\\r\\nimport \\\"../fee-managers/interfaces/IFortiFiFeeManager.sol\\\";\\r\\nimport \\\"./interfaces/IFortress.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./FortiFiFortress.sol\\\";\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @notice Error when vault does not implement ISAMS or IMASS interface (0xafba703c)\\r\\nerror InvalidVaultImplementation();\\r\\n\\r\\n/// @notice Error caused when calling address is not a valid vault \\r\\nerror InvalidCaller();\\r\\n\\r\\n/// @notice Error caused when trying to withdraw from non-existent fortress\\r\\nerror NoFortress();\\r\\n\\r\\n/// @notice Error caused when trying to deposit to bricked strategy\\r\\nerror StrategyBricked();\\r\\n\\r\\n/// @title Base FortiFi Strategy contract\\r\\n/// @notice This contract should be used when a yield strategy requires special logic beyond\\r\\n/// simple deposit(amount deposit token) and withdraw(receipt tokens to burn). These strategies\\r\\n/// are designed to only be called by FortiFi SAMS and MASS Vaults.\\r\\ncontract FortiFiStrategy is Ownable, ERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public immutable _strat;\\r\\n    address public immutable _wNative;\\r\\n    bool public strategyIsBricked;\\r\\n\\r\\n    IERC20 public immutable _dToken;\\r\\n    IFortiFiFeeCalculator public feeCalc;\\r\\n    IFortiFiFeeManager public feeMgr;\\r\\n\\r\\n    address[] public extraTokens;\\r\\n    \\r\\n    mapping(address => bool) public isFortiFiVault;\\r\\n    mapping(address => mapping(uint256 => address)) public vaultToTokenToFortress;\\r\\n\\r\\n    event FortressCreated(address indexed vault, uint256 tokenId, address indexed strategy);\\r\\n    event DepositToFortress(address indexed vault, address indexed user, address indexed strategy, uint256 amountDeposited);\\r\\n    event WithdrawFromFortress(address indexed vault, address indexed user, address indexed strategy, uint256 tokenId, uint256 amountReceived);\\r\\n    event WithdrawBrickedFromFortress(address indexed vault, address indexed user, address indexed strategy, uint256 tokenId);\\r\\n    event VaultSet(address vault, bool approved);\\r\\n    event ExtraTokensSet(address[] tokens);\\r\\n    event SetStrategyAsBricked(bool isBricked);\\r\\n    event ERC20Recovered(address indexed token, uint256 amount);\\r\\n    event ERC20RecoveredFromFortress(address indexed fortress, address indexed token, uint256 amount);\\r\\n    event FeeManagerSet(address feeManager);\\r\\n    event FeeCalculatorSet(address feeCalculator);\\r\\n\\r\\n    constructor(address _strategy, \\r\\n        address _depositToken, \\r\\n        address _wrappedNative,\\r\\n        address _feeManager,\\r\\n        address _feeCalculator) ERC20(\\\"FortiFi Strategy Receipt\\\", \\\"FFSR\\\") {\\r\\n        if (_strategy == address(0)) revert ZeroAddress();\\r\\n        if (_depositToken == address(0)) revert ZeroAddress();\\r\\n        if (_wrappedNative == address(0)) revert ZeroAddress();\\r\\n        if (_feeManager == address(0)) revert ZeroAddress();\\r\\n        if (_feeCalculator == address(0)) revert ZeroAddress();\\r\\n        _strat = _strategy;\\r\\n        _wNative = _wrappedNative;\\r\\n        _dToken = IERC20(_depositToken);\\r\\n        feeCalc = IFortiFiFeeCalculator(_feeCalculator);\\r\\n        feeMgr = IFortiFiFeeManager(_feeManager);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to deposit\\r\\n    /// @dev If a user has not deposited previously, this function will deploy a FortiFiFortress contract\\r\\n    /// to interact with the underlying strategy for a specific vault receipt token. This allows user deposits to be isolated\\r\\n    /// as many strategies utilize special logic that is dependent on the balance of the address interacting with them.\\r\\n    function depositToFortress(uint256 _amount, address _user, uint256 _tokenId) external virtual {\\r\\n        if (_amount == 0) revert InvalidDeposit();\\r\\n        if (!isFortiFiVault[msg.sender]) revert InvalidCaller();\\r\\n        if (strategyIsBricked) revert StrategyBricked();\\r\\n        _dToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        IFortress _fortress;\\r\\n\\r\\n        // If user has not deposited previously, deploy Fortress\\r\\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) {\\r\\n            FortiFiFortress _fort = new FortiFiFortress(_strat, address(_dToken), address(_wNative));\\r\\n            _fortress = IFortress(address(_fort));\\r\\n            vaultToTokenToFortress[msg.sender][_tokenId] = address(_fortress);\\r\\n            emit FortressCreated(msg.sender, _tokenId, address(_strat));\\r\\n        } else {\\r\\n            _fortress = IFortress(vaultToTokenToFortress[msg.sender][_tokenId]);\\r\\n        }\\r\\n\\r\\n        // approve and deposit\\r\\n        _dToken.approve(address(_fortress), _amount);\\r\\n        uint256 _receipts = _fortress.deposit(_amount, _user);\\r\\n\\r\\n        // mint receipt tokens equal to what was received from Fortress\\r\\n        _mint(msg.sender, _receipts);\\r\\n\\r\\n        // Refund left over deposit tokens, if any\\r\\n        uint256 _depositTokenBalance = _dToken.balanceOf(address(this));\\r\\n        if (_depositTokenBalance > 0) {\\r\\n            _dToken.safeTransfer(msg.sender, _depositTokenBalance);\\r\\n        }\\r\\n\\r\\n        emit DepositToFortress(msg.sender, _user, address(_strat), _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to withdraw\\r\\n    function withdrawFromFortress(uint256 _amount, address _user, uint256 _tokenId) external virtual {\\r\\n        if (_amount == 0) revert InvalidWithdrawal();\\r\\n        if (vaultToTokenToFortress[msg.sender][_tokenId] == address(0)) revert NoFortress();\\r\\n\\r\\n        // burn receipt tokens and withdraw from Fortress\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        if(strategyIsBricked) {\\r\\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdrawBricked(_user);\\r\\n\\r\\n            emit WithdrawBrickedFromFortress(msg.sender, _user, address(_strat), _tokenId);\\r\\n        } else {\\r\\n            IFortress(vaultToTokenToFortress[msg.sender][_tokenId]).withdraw(_user, extraTokens);\\r\\n\\r\\n            uint256 _depositTokenReceived = _dToken.balanceOf(address(this));\\r\\n\\r\\n            // transfer received deposit tokens\\r\\n            _dToken.safeTransfer(msg.sender, _depositTokenReceived);\\r\\n\\r\\n            // handle fees on extra reward tokens\\r\\n            uint256 _length = extraTokens.length;\\r\\n            if (_length > 0) {\\r\\n                for(uint256 i = 0; i < _length; i++) {\\r\\n                    IERC20 _token = IERC20(extraTokens[i]);\\r\\n                    uint256 _tokenBalance = _token.balanceOf(address(this));\\r\\n                    if (_tokenBalance > 0) {\\r\\n                        uint256 _fee = feeCalc.getFees(_user, _tokenBalance);\\r\\n                        feeMgr.collectFees(extraTokens[i], _fee);\\r\\n                        _token.safeTransfer(_user, _tokenBalance - _fee);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            emit WithdrawFromFortress(msg.sender, _user, address(_strat), _tokenId, _depositTokenReceived);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Set valid vaults\\r\\n    function setVault(address _vault, bool _approved) external onlyOwner {\\r\\n        if (!IVault(_vault).supportsInterface(0xafba703c)) revert InvalidVaultImplementation();\\r\\n        isFortiFiVault[_vault] = _approved;\\r\\n        emit VaultSet(_vault, _approved);\\r\\n    }\\r\\n\\r\\n    /// @notice Set extra reward tokens for strategy\\r\\n    function setExtraTokens(address[] calldata _tokens) external onlyOwner {\\r\\n        extraTokens = _tokens;\\r\\n        emit ExtraTokensSet(_tokens);\\r\\n    }\\r\\n\\r\\n    /// @notice Set strategy as bricked\\r\\n    function setStrategyBricked(bool _isBricked) external onlyOwner {\\r\\n        strategyIsBricked = _isBricked;\\r\\n        emit SetStrategyAsBricked(_isBricked);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new FortiFiFeeManager contract\\r\\n    function setFeeManager(address _contract) external onlyOwner {\\r\\n        if (_contract == address(0)) revert ZeroAddress();\\r\\n        feeMgr = IFortiFiFeeManager(_contract);\\r\\n        emit FeeManagerSet(_contract);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to set new FortiFiFeeCalculator contract\\r\\n    function setFeeCalculator(address _contract) external onlyOwner {\\r\\n        if (_contract == address(0)) revert ZeroAddress();\\r\\n        feeCalc = IFortiFiFeeCalculator(_contract);\\r\\n        emit FeeCalculatorSet(_contract);\\r\\n    }\\r\\n\\r\\n    /// @notice Emergency function to recover stuck tokens\\r\\n    function recoverERC20(address _token, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n        emit ERC20Recovered(_token, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Emergency function to recover stuck tokens from Fortress\\r\\n    function recoverFromFortress(address _fortress, address _token, uint256 _amount) external onlyOwner {\\r\\n        IFortress(_fortress).recoverERC20(msg.sender, _token, _amount);\\r\\n        emit ERC20RecoveredFromFortress(_fortress, _token, _amount);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x1c612917ba826d14026e52fe82f5a33badb4cc93fe8555b38431834908045d7b\",\"license\":\"MIT\"},\"contracts/strategies/interfaces/IFortress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IFortress Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFi Fortresses\\r\\ninterface IFortress {\\r\\n    function deposit(uint amount, address user) external returns(uint);\\r\\n    function withdraw(address user, address[] memory extraTokens) external;\\r\\n    function withdrawBricked(address user) external;\\r\\n    function recoverERC20(address to, address token, uint amount) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x523a1c83bd007e483dff6b4b41047d4d2a0f61ca6b30e86e57ad5ac876c1575d\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IGLPFortress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IGLPFortress Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for FortiFi GLP Fortresses\\r\\ninterface IGLPFortress {\\r\\n    function deposit(uint amount, address user) external returns(uint);\\r\\n    function withdraw(address user, address[] memory extraTokens) external;\\r\\n    function withdrawBricked(address user) external;\\r\\n    function recoverERC20(address to, address token, uint amount) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n    function setStakedGlp(address sGLP) external;\\r\\n    function setRewardRouter(address rewardRouter) external;\\r\\n    function setSlippage(uint slippage) external;\\r\\n}\",\"keccak256\":\"0x14883852ff05341bbc88bfe7a74122763d4ed9581b80910b4d19b8c0dfaef9e7\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IStrategy Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\n/// @title Interface for basic strategies used by FortiFi SAMS Vaults\\r\\ninterface IStrategy {\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function deposit(uint amount) external;\\r\\n    function depositToFortress(uint amount, address user, uint tokenId) external;\\r\\n    function withdraw(uint amount) external;\\r\\n    function withdrawFromFortress(uint amount, address user, uint tokenId) external;\\r\\n    function balanceOf(address holder) external view returns(uint256);\\r\\n}\",\"keccak256\":\"0x6160822e06a8d6c823da363871470ba4e5f33338cb1d89f332b9fd3ee4b60c67\",\"license\":\"GPL-3.0-only\"},\"contracts/strategies/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n// IVault Interface by FortiFi\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface IVault {\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x7c2b0149d370f11e2e4a6e80a830c9e4dc1ee889c00a6a46c8d5a6e1a36d18cc\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600b8054755643f4b25e36478ee1e90418d5343cb6591bcb9d00646001600160b01b0319909116179055600c80546001600160a01b03191673b70b91ce0771d3f4c81d87660f71da31d48eb3b31790553480156200006157600080fd5b5060405162005588380380620055888339810160408190526200008491620002a9565b84848484846040518060400160405280601881526020017f466f72746946692053747261746567792052656365697074000000000000000081525060405180604001604052806004815260200163232329a960e11b815250620000f6620000f06200023860201b60201c565b6200023c565b6004620001048382620003be565b506005620001138282620003be565b5050506001600160a01b0385166200013e5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038416620001665760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0383166200018e5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216620001b65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038116620001de5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0394851660805291841660a05291831660c05260068054610100600160a81b03191661010092851692909202919091179055600780546001600160a01b03191691909216179055506200048a9350505050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620002a457600080fd5b919050565b600080600080600060a08688031215620002c257600080fd5b620002cd866200028c565b9450620002dd602087016200028c565b9350620002ed604087016200028c565b9250620002fd606087016200028c565b91506200030d608087016200028c565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200034457607f821691505b6020821081036200036557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b957600081815260208120601f850160051c81016020861015620003945750805b601f850160051c820191505b81811015620003b557828155600101620003a0565b5050505b505050565b81516001600160401b03811115620003da57620003da62000319565b620003f281620003eb84546200032f565b846200036b565b602080601f8311600181146200042a5760008415620004115750858301515b600019600386901b1c1916600185901b178555620003b5565b600085815260208120601f198616915b828110156200045b578886015182559484019460019091019084016200043a565b50858210156200047a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c0516150736200051560003960008181610573015281816108d80152818161096c01528181610aef01528181610c0001528181610c8d0152818161175701526117e501526000818161039e015261098e01526000818161054b0152818161093801528181610a4e01528181610cb7015281816116430152611a3301526150736000f3fe60806040523480156200001157600080fd5b5060043610620002915760003560e01c8063770540681162000161578063a9059cbb11620000d3578063d66cfc771162000092578063d66cfc77146200062e578063dd62ed3e1462000645578063ded438f01462000681578063f2fde38b1462000698578063f7c8546914620006af578063fdad531d14620006c357600080fd5b8063a9059cbb14620005ac578063ab37fbb714620005c3578063b9277d2a14620005da578063ba251fba14620005f1578063cf950022146200060857600080fd5b80638da5cb5b11620001205780638da5cb5b146200052957806395d89b41146200053b578063963d7e911462000545578063969066be146200056d578063a457c2d7146200059557600080fd5b80637705406814620004b457806381f6cf5314620004cb5780638980f11f14620004e25780638c4cc0df14620004f95780638c66d04f146200051257600080fd5b80633950935111620002075780635a3bb98911620001c65780635a3bb98914620004225780635a659d2614620004365780635b30cf55146200044d578063627f66c6146200046757806370a08231146200047e578063715018a614620004aa57600080fd5b80633950935114620003c0578063408555b914620003d7578063472d35b914620003e5578063525e669e14620003fc578063578c71d9146200041357600080fd5b806323b872dd116200025457806323b872dd146200033c578063249d39e9146200035357806329c9aa191462000371578063313ce5671462000388578063318d494e146200039857600080fd5b806306fdde031462000296578063095ea7b314620002b85780630f1cb79214620002e057806318160ddd14620002f95780631d6e077a146200030c575b600080fd5b620002a0620006fa565b604051620002af9190620026cc565b60405180910390f35b620002cf620002c93660046200271e565b62000794565b6040519015158152602001620002af565b620002f7620002f13660046200275a565b620007b0565b005b6003545b604051908152602001620002af565b620003236200031d3660046200277a565b6200082e565b6040516001600160a01b039091168152602001620002af565b620002cf6200034d36600462002794565b62000859565b6200035d61271081565b60405161ffff9091168152602001620002af565b620002f762000382366004620027d5565b62000883565b60405160128152602001620002af565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620002cf620003d13660046200271e565b62000d35565b600654620002cf9060ff1681565b620002f7620003f6366004620027fd565b62000d78565b620002f76200040d3660046200286a565b62000e1c565b600b546200035d9061ffff1681565b600c5462000323906001600160a01b031681565b620002f762000447366004620027fd565b62000f31565b600b5462000323906201000090046001600160a01b031681565b620002f762000478366004620028ba565b62000fad565b620002fd6200048f366004620027fd565b6001600160a01b031660009081526001602052604090205490565b620002f7620010ce565b620002f7620004c5366004620027fd565b62001109565b620002f7620004dc366004620028f6565b6200118f565b620002f7620004f33660046200271e565b62001271565b600654620003239061010090046001600160a01b031681565b620002f762000523366004620027fd565b620012fc565b6000546001600160a01b031662000323565b620002a0620013a8565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620002cf620005a63660046200271e565b620013b9565b620002cf620005bd3660046200271e565b6200145a565b620002f7620005d43660046200293c565b6200146a565b620002f7620005eb366004620028f6565b620014dc565b620002f762000602366004620027d5565b6200154b565b620002cf62000619366004620027fd565b60096020526000908152604090205460ff1681565b620002f76200063f366004620028f6565b62001a8e565b620002fd6200065636600462002962565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b620002f76200069236600462002794565b62001b70565b620002f7620006a9366004620027fd565b62001c5a565b60075462000323906001600160a01b031681565b62000323620006d43660046200271e565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6060600480546200070b906200299a565b80601f016020809104026020016040519081016040528092919081815260200182805462000739906200299a565b80156200078a5780601f106200075e576101008083540402835291602001916200078a565b820191906000526020600020905b8154815290600101906020018083116200076c57829003601f168201915b5050505050905090565b600033620007a481858562001cfc565b60019150505b92915050565b6000546001600160a01b03163314620007e65760405162461bcd60e51b8152600401620007dd90620029d6565b60405180910390fd5b6006805460ff19168215159081179091556040519081527fdd54532339942dad92de40994c97555cc95b2aceb99fdd85a412d20ee0a568b8906020015b60405180910390a150565b600881815481106200083f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000336200086985828562001e1d565b6200087685858562001eae565b60019150505b9392505050565b82600003620008a557604051635972996f60e11b815260040160405180910390fd5b60065460ff1615620008ca5760405163217ca11f60e21b815260040160405180910390fd5b620009016001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308662002086565b336000908152600a602090815260408083208484529091528120546001600160a01b031662000aa357600b54600c546040516000927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b03620100009092048216927f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000921690620009bb9062002619565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f08015801562000a07573d6000803e3d6000fd5b50336000818152600a6020908152604080832088845282529182902080546001600160a01b0319166001600160a01b038681169190911790915591518781529395508594507f0000000000000000000000000000000000000000000000000000000000000000909116927fd54b6c27f4639f28e778312a36befbf189631a3587aeb73e182e99c434eb7705910160405180910390a35062000ac9565b50336000908152600a602090815260408083208484529091529020546001600160a01b03165b60405163095ea7b360e01b81526001600160a01b038281166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801562000b39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b5f919062002a0b565b50604051636e553f6560e01b8152600481018590526001600160a01b03848116602483015260009190831690636e553f65906044016020604051808303816000875af115801562000bb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bda919062002a2b565b905062000be83382620020f3565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801562000c50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c76919062002a2b565b9050801562000cb55762000cb56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383620021d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316336001600160a01b03167fe15dc988e072c1d9d056206bf4c2ccd15513ea1197955bdb545e39a4a198f6278960405162000d2591815260200190565b60405180910390a4505050505050565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909190620007a4908290869062000d7290879062002a5b565b62001cfc565b6000546001600160a01b0316331462000da55760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b03811662000dcd5760405163d92e233d60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf5f580614969fb819b8af01f7cc62fe0e0146feaf98d7aee42e76bb0bee8e639060200162000823565b6000546001600160a01b0316331462000e495760405162461bcd60e51b8152600401620007dd90620029d6565b6101f481118062000e5a5750600a81105b1562000e795760405163334ee9a160e01b815260040160405180910390fd5b8160005b8181101562000f2a5784848281811062000e9b5762000e9b62002a71565b905060200201602081019062000eb29190620027fd565b6001600160a01b031663f0fa55a9846040518263ffffffff1660e01b815260040162000ee091815260200190565b600060405180830381600087803b15801562000efb57600080fd5b505af115801562000f10573d6000803e3d6000fd5b50505050808062000f219062002a87565b91505062000e7d565b5050505050565b6000546001600160a01b0316331462000f5e5760405162461bcd60e51b8152600401620007dd90620029d6565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f37151257d8200a9481b623b7ea8cde3f94b92d731cda548bd5fbf63cc87db28c9060200162000823565b6000546001600160a01b0316331462000fda5760405162461bcd60e51b8152600401620007dd90620029d6565b6040516301ffc9a760e01b8152632bee9c0f60e21b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801562001026573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200104c919062002a0b565b6200106a57604051632a4d0ad560e01b815260040160405180910390fd5b6001600160a01b038216600081815260096020908152604091829020805460ff19168515159081179091558251938452908301527f79a58dadb454da39ecff92b439454719a80ea78743990d0f0dd2343a7e7bb91a91015b60405180910390a15050565b6000546001600160a01b03163314620010fb5760405162461bcd60e51b8152600401620007dd90620029d6565b6200110760006200220a565b565b6000546001600160a01b03163314620011365760405162461bcd60e51b8152600401620007dd90620029d6565b600b805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527fd844f74196477aa31314eb2e4779aa16816bb19141ec64e6167696b2c68c908b9060200162000823565b6000546001600160a01b03163314620011bc5760405162461bcd60e51b8152600401620007dd90620029d6565b8060005b818110156200126b57838382818110620011de57620011de62002a71565b9050602002016020810190620011f59190620027fd565b600c5460405163977b91d760e01b81526001600160a01b03918216600482015291169063977b91d790602401600060405180830381600087803b1580156200123c57600080fd5b505af115801562001251573d6000803e3d6000fd5b505050508080620012629062002a87565b915050620011c0565b50505050565b6000546001600160a01b031633146200129e5760405162461bcd60e51b8152600401620007dd90620029d6565b620012b46001600160a01b0383163383620021d8565b816001600160a01b03167f505b28e6941631badc363841ecbf8e1214b9379c643936458e87be718e15799982604051620012f091815260200190565b60405180910390a25050565b6000546001600160a01b03163314620013295760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b038116620013515760405163d92e233d60e01b815260040160405180910390fd5b60068054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fff482b94e6650f33ebd5a4b656f2524de0c552f315fb3270f47aeaef3d72a63e9060200162000823565b6060600580546200070b906200299a565b3360008181526002602090815260408083206001600160a01b038716845290915281205490919083811015620014405760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401620007dd565b6200144f828686840362001cfc565b506001949350505050565b600033620007a481858562001eae565b6000546001600160a01b03163314620014975760405162461bcd60e51b8152600401620007dd90620029d6565b600b805461ffff191661ffff83169081179091556040519081527ff81c5fcf3aecd6806cef1d458fedb8ca3fb79150451dc8c8d1aef6215c4a82d89060200162000823565b6000546001600160a01b03163314620015095760405162461bcd60e51b8152600401620007dd90620029d6565b620015176008838362002627565b507fe1a8a770bbbdcfcba3d04e555cd2aad13f5c7a91e126ee71f5f98bf7405dbecd8282604051620010c292919062002aa3565b826000036200156d5760405163c945242d60e01b815260040160405180910390fd5b336000908152600a602090815260408083208484529091529020546001600160a01b0316620015af57604051636987969160e01b815260040160405180910390fd5b620015bb33846200225a565b60065460ff1615620016be57336000908152600a60209081526040808320848452909152908190205490516329a5c05560e21b81526001600160a01b0384811660048301529091169063a697015490602401600060405180830381600087803b1580156200162857600080fd5b505af11580156200163d573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316336001600160a01b03167f4036930356ede44690c04fdae6fa8e587df3048b8fb1c7e71b2a1e4240d500bf84604051620016b191815260200190565b60405180910390a4505050565b336000908152600a60209081526040808320848452909152908190205490516329380a9b60e11b81526001600160a01b03909116906352701536906200170c90859060089060040162002af3565b600060405180830381600087803b1580156200172757600080fd5b505af11580156200173c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015620017a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017ce919062002a2b565b905080156200180d576200180d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383620021d8565b600854801562001a1b5760005b8181101562001a19576000600882815481106200183b576200183b62002a71565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156200188f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b5919062002a2b565b9050801562001a0157600654604051633becdb0560e21b81526001600160a01b038981166004830152602482018490526000926101009004169063efb36c1490604401602060405180830381865afa15801562001916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200193c919062002a2b565b600754600880549293506001600160a01b039091169163a033fcd49190879081106200196c576200196c62002a71565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015620019c157600080fd5b505af1158015620019d6573d6000803e3d6000fd5b50505050620019ff888284620019ed919062002b54565b6001600160a01b0386169190620021d8565b505b5050808062001a109062002a87565b9150506200181a565b505b60408051848152602081018490526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929087169133917f64457f6870de47350bc5d046e00ce2360ff6c68a1596f7393a5a680146d38748910160405180910390a450505b505050565b6000546001600160a01b0316331462001abb5760405162461bcd60e51b8152600401620007dd90620029d6565b8060005b818110156200126b5783838281811062001add5762001add62002a71565b905060200201602081019062001af49190620027fd565b600b54604051630ee0a80d60e31b81526001600160a01b036201000090920482166004820152911690637705406890602401600060405180830381600087803b15801562001b4157600080fd5b505af115801562001b56573d6000803e3d6000fd5b50505050808062001b679062002a87565b91505062001abf565b6000546001600160a01b0316331462001b9d5760405162461bcd60e51b8152600401620007dd90620029d6565b604051631171bda960e01b81523360048201526001600160a01b03838116602483015260448201839052841690631171bda990606401600060405180830381600087803b15801562001bee57600080fd5b505af115801562001c03573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167f135171f052c67d036683a0a465a3a0760075fb1402c9387fb0b9ad6e674c38d68360405162001c4d91815260200190565b60405180910390a3505050565b6000546001600160a01b0316331462001c875760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b03811662001cee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620007dd565b62001cf9816200220a565b50565b6001600160a01b03831662001d605760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620007dd565b6001600160a01b03821662001dc35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620007dd565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910162001c4d565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981146200126b578181101562001e9f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401620007dd565b6200126b848484840362001cfc565b6001600160a01b03831662001f145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401620007dd565b6001600160a01b03821662001f785760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401620007dd565b6001600160a01b0383166000908152600160205260409020548181101562001ff25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401620007dd565b6001600160a01b038085166000908152600160205260408082208585039055918516815290812080548492906200202b90849062002a5b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516200207891815260200190565b60405180910390a36200126b565b6040516001600160a01b03808516602483015283166044820152606481018290526200126b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620023ae565b6001600160a01b0382166200214b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620007dd565b80600360008282546200215f919062002a5b565b90915550506001600160a01b038216600090815260016020526040812080548392906200218e90849062002a5b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03831660248201526044810182905262001a8990849063a9059cbb60e01b90606401620020bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620022bc5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401620007dd565b6001600160a01b03821660009081526001602052604090205481811015620023325760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401620007dd565b6001600160a01b03831660009081526001602052604081208383039055600380548492906200236390849062002b54565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600062002405826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620024879092919063ffffffff16565b80519091501562001a89578080602001905181019062002426919062002a0b565b62001a895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620007dd565b6060620024988484600085620024a0565b949350505050565b606082471015620025035760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620007dd565b6001600160a01b0385163b6200255c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620007dd565b600080866001600160a01b031685876040516200257a919062002b6a565b60006040518083038185875af1925050503d8060008114620025b9576040519150601f19603f3d011682016040523d82523d6000602084013e620025be565b606091505b5091509150620025d0828286620025db565b979650505050505050565b60608315620025ec5750816200087c565b825115620025fd5782518084602001fd5b8160405162461bcd60e51b8152600401620007dd9190620026cc565b6124b58062002b8983390190565b8280548282559060005260206000209081019282156200267d579160200282015b828111156200267d5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019062002648565b506200268b9291506200268f565b5090565b5b808211156200268b576000815560010162002690565b60005b83811015620026c3578181015183820152602001620026a9565b50506000910152565b6020815260008251806020840152620026ed816040850160208701620026a6565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146200271957600080fd5b919050565b600080604083850312156200273257600080fd5b6200273d8362002701565b946020939093013593505050565b801515811462001cf957600080fd5b6000602082840312156200276d57600080fd5b81356200087c816200274b565b6000602082840312156200278d57600080fd5b5035919050565b600080600060608486031215620027aa57600080fd5b620027b58462002701565b9250620027c56020850162002701565b9150604084013590509250925092565b600080600060608486031215620027eb57600080fd5b83359250620027c56020850162002701565b6000602082840312156200281057600080fd5b6200087c8262002701565b60008083601f8401126200282e57600080fd5b50813567ffffffffffffffff8111156200284757600080fd5b6020830191508360208260051b85010111156200286357600080fd5b9250929050565b6000806000604084860312156200288057600080fd5b833567ffffffffffffffff8111156200289857600080fd5b620028a6868287016200281b565b909790965060209590950135949350505050565b60008060408385031215620028ce57600080fd5b620028d98362002701565b91506020830135620028eb816200274b565b809150509250929050565b600080602083850312156200290a57600080fd5b823567ffffffffffffffff8111156200292257600080fd5b62002930858286016200281b565b90969095509350505050565b6000602082840312156200294f57600080fd5b813561ffff811681146200087c57600080fd5b600080604083850312156200297657600080fd5b620029818362002701565b9150620029916020840162002701565b90509250929050565b600181811c90821680620029af57607f821691505b602082108103620029d057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121562002a1e57600080fd5b81516200087c816200274b565b60006020828403121562002a3e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620007aa57620007aa62002a45565b634e487b7160e01b600052603260045260246000fd5b60006001820162002a9c5762002a9c62002a45565b5060010190565b60208082528181018390526000908460408401835b8681101562002ae8576001600160a01b0362002ad48462002701565b168252918301919083019060010162002ab8565b509695505050505050565b60006040820160018060a01b03808616845260206040818601528286548085526060870191508760005282600020945060005b8181101562002b4657855485168352600195860195928401920162002b26565b509098975050505050505050565b81810381811115620007aa57620007aa62002a45565b6000825162002b7e818460208701620026a6565b919091019291505056fe60e06040526000805461ffff60a01b1916601960a21b1790553480156200002557600080fd5b50604051620024b5380380620024b58339810160408190526200004891620003c3565b848383620000563362000356565b6001600160a01b0383166200007e5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216620000a65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038116620000ce5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03838116608081905283821660a081905291831660c05260405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af115801562000132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000158919062000433565b5050506001600160a01b0385169050620001855760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038116620001ad5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b03199081166001600160a01b03878116918217909355600280549092168484161790915560405163095ea7b360e01b8152918716600483015260001960248301529063095ea7b3906044016020604051808303816000875af115801562000223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000249919062000433565b5060a0516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002d591906200045e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af115801562000324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034a919062000433565b5050505050506200047c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600080600080600060a08688031215620003dc57600080fd5b620003e786620003a6565b9450620003f760208701620003a6565b93506200040760408701620003a6565b92506200041760608701620003a6565b91506200042760808701620003a6565b90509295509295909350565b6000602082840312156200044657600080fd5b815180151581146200045757600080fd5b9392505050565b6000602082840312156200047157600080fd5b6200045782620003a6565b60805160a05160c051611f6162000554600039600081816101d10152818161179f015261182701526000818161031c015281816108b5015281816109a901528181610a1e01528181610bbf01528181610dac015281816113b0015281816114e5015281816116d801526117600152600081816102e80152818161043d01528181610535015281816105e101528181610658015281816106e201528181610bff01528181610e9601528181610f100152818161115501528181611200015281816112880152818161138001526114640152611f616000f3fe6080604052600436106101235760003560e01c80638da5cb5b116100a0578063a697015411610064578063a69701541461037e578063ab37fbb71461039e578063bf33a1f5146103be578063f27d1214146103d3578063f2fde38b146103e857600080fd5b80638da5cb5b146102b8578063963d7e91146102d6578063969066be1461030a578063977b91d71461033e578063a30272711461035e57600080fd5b8063578c71d9116100e7578063578c71d9146102135780635a3bb989146102355780636e553f6514610255578063715018a614610283578063770540681461029857600080fd5b80631171bda91461012f5780631afe84c814610151578063249d39e914610196578063318d494e146101bf57806352701536146101f357600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004611bd0565b610408565b005b34801561015d57600080fd5b50610179739e295b5b976a184b14ad8cd72413ad846c29966081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a257600080fd5b506101ac61271081565b60405161ffff909116815260200161018d565b3480156101cb57600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ff57600080fd5b5061014f61020e366004611c27565b6104f3565b34801561021f57600080fd5b506000546101ac90600160a01b900461ffff1681565b34801561024157600080fd5b50600254610179906001600160a01b031681565b34801561026157600080fd5b50610275610270366004611d01565b610b66565b60405190815260200161018d565b34801561028f57600080fd5b5061014f610fe6565b3480156102a457600080fd5b5061014f6102b3366004611d31565b61101c565b3480156102c457600080fd5b506000546001600160a01b0316610179565b3480156102e257600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b34801561034a57600080fd5b5061014f610359366004611d31565b61109b565b34801561036a57600080fd5b50600154610179906001600160a01b031681565b34801561038a57600080fd5b5061014f610399366004611d31565b611113565b3480156103aa57600080fd5b5061014f6103b9366004611d4e565b6112ef565b3480156103ca57600080fd5b5061014f611369565b3480156103df57600080fd5b5061014f61144a565b3480156103f457600080fd5b5061014f610403366004611d31565b6115bd565b6000546001600160a01b0316331461043b5760405162461bcd60e51b815260040161043290611d72565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361048d5760405163118539e960e01b815260040160405180910390fd5b6104a16001600160a01b0383168483611658565b816001600160a01b0316836001600160a01b03167faca8fb252cde442184e5f10e0f2e6e4029e8cd7717cae63559079610702436aa836040516104e691815260200190565b60405180910390a3505050565b6000546001600160a01b0316331461051d5760405162461bcd60e51b815260040161043290611d72565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a89190611da7565b9050806000036105cb5760405163c945242d60e01b815260040160405180910390fd5b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190611da7565b90508015610709576107096001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611658565b6040516370a0823160e01b8152306004820152600090739e295b5b976a184b14ad8cd72413ad846c299660906370a0823190602401602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190611da7565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190611dc0565b60405163e245b5af60e01b8152600160048201526001600160a01b03919091169063e245b5af90602401602060405180830381865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611da7565b9050600069d3c21bcecceda1000000610886670de0b6b3a764000084611df3565b6108909085611e15565b61089a9190611df3565b6002546000549192506001600160a01b031690630f3aa554907f0000000000000000000000000000000000000000000000000000000000000000908690612710906108f090600160a01b900461ffff1682611e32565b6108fe9061ffff1687611e15565b6109089190611df3565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523360648201526084016020604051808303816000875af1158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611da7565b506040516370a0823160e01b8152306004820152610a459033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611da7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611658565b84518015610b185760005b81811015610b16576000878281518110610a6c57610a6c611e54565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611da7565b90508015610b0157610b016001600160a01b0383163383611658565b50508080610b0e90611e6a565b915050610a50565b505b610b21876116c0565b6040516001600160a01b03881681527fd8dee34af5e5ded011300c086d6f9738abc8a1362f5a4c27eb0b5f5d9efd6add9060200160405180910390a150505050505050565b600080546001600160a01b03163314610b915760405162461bcd60e51b815260040161043290611d72565b82600003610bb257604051635972996f60e11b815260040160405180910390fd5b610be76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866118ce565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611da7565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190611dc0565b60405163e245b5af60e01b8152600160048201526001600160a01b03919091169063e245b5af90602401602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611da7565b9050600081610d6f87670de0b6b3a7640000611e15565b610d799190611df3565b610d8d9069d3c21bcecceda1000000611e15565b60025460008054929350916001600160a01b039091169063364e2311907f0000000000000000000000000000000000000000000000000000000000000000908a90859061271090610de990600160a01b900461ffff1682611e32565b610df79061ffff1689611e15565b610e019190611df3565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016020604051808303816000875af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611da7565b60405163b6b55f2560e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015610ee257600080fd5b505af1158015610ef6573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528692507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611da7565b610f8e9190611e83565b9450610f99866116c0565b856001600160a01b03167fd6dd599afd391d71910ff05250361e65405a896dc557e4e7bf5190b5abbb381688604051610fd491815260200190565b60405180910390a25050505092915050565b6000546001600160a01b031633146110105760405162461bcd60e51b815260040161043290611d72565b61101a6000611906565b565b6000546001600160a01b031633146110465760405162461bcd60e51b815260040161043290611d72565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fd844f74196477aa31314eb2e4779aa16816bb19141ec64e6167696b2c68c908b906020015b60405180910390a150565b6000546001600160a01b031633146110c55760405162461bcd60e51b815260040161043290611d72565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f37151257d8200a9481b623b7ea8cde3f94b92d731cda548bd5fbf63cc87db28c90602001611090565b6000546001600160a01b0316331461113d5760405162461bcd60e51b815260040161043290611d72565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190611da7565b9050806000036111eb5760405163c945242d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611da7565b905080156112af576112af6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611658565b6040516001600160a01b03831681527fd8dee34af5e5ded011300c086d6f9738abc8a1362f5a4c27eb0b5f5d9efd6add9060200160405180910390a15050565b6000546001600160a01b031633146113195760405162461bcd60e51b815260040161043290611d72565b6000805461ffff60a01b1916600160a01b61ffff8416908102919091179091556040519081527f1a89170b7100a37f2e1a8bca9d866cd3f6d666800bfb0fa8dd82f0b2193c926f90602001611090565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044015b6020604051808303816000875af11580156113fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141e9190611e96565b506040517f3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a690600090a1565b60015460405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af11580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190611e96565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190611dc0565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016113db565b6000546001600160a01b031633146115e75760405162461bcd60e51b815260040161043290611d72565b6001600160a01b03811661164c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610432565b61165581611906565b50565b6040516001600160a01b0383166024820152604481018290526116bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611956565b505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190611da7565b90508015611787576117876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611658565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118129190611da7565b9050801561184e5761184e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611658565b47156116bb576000836001600160a01b03164760405160006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b50509050806118c857604051631d73cefb60e31b815260040160405180910390fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526118c89085906323b872dd60e01b90608401611684565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006119ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a289092919063ffffffff16565b8051909150156116bb57808060200190518101906119c99190611e96565b6116bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610432565b6060611a378484600085611a41565b90505b9392505050565b606082471015611aa25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610432565b6001600160a01b0385163b611af95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b600080866001600160a01b03168587604051611b159190611edc565b60006040518083038185875af1925050503d8060008114611b52576040519150601f19603f3d011682016040523d82523d6000602084013e611b57565b606091505b5091509150611b67828286611b72565b979650505050505050565b60608315611b81575081611a3a565b825115611b915782518084602001fd5b8160405162461bcd60e51b81526004016104329190611ef8565b6001600160a01b038116811461165557600080fd5b8035611bcb81611bab565b919050565b600080600060608486031215611be557600080fd5b8335611bf081611bab565b92506020840135611c0081611bab565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c3a57600080fd5b8235611c4581611bab565b915060208381013567ffffffffffffffff80821115611c6357600080fd5b818601915086601f830112611c7757600080fd5b813581811115611c8957611c89611c11565b8060051b604051601f19603f83011681018181108582111715611cae57611cae611c11565b604052918252848201925083810185019189831115611ccc57600080fd5b938501935b82851015611cf157611ce285611bc0565b84529385019392850192611cd1565b8096505050505050509250929050565b60008060408385031215611d1457600080fd5b823591506020830135611d2681611bab565b809150509250929050565b600060208284031215611d4357600080fd5b8135611a3a81611bab565b600060208284031215611d6057600080fd5b813561ffff81168114611a3a57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611db957600080fd5b5051919050565b600060208284031215611dd257600080fd5b8151611a3a81611bab565b634e487b7160e01b600052601160045260246000fd5b600082611e1057634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611e2c57611e2c611ddd565b92915050565b61ffff828116828216039080821115611e4d57611e4d611ddd565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611e7c57611e7c611ddd565b5060010190565b81810381811115611e2c57611e2c611ddd565b600060208284031215611ea857600080fd5b81518015158114611a3a57600080fd5b60005b83811015611ed3578181015183820152602001611ebb565b50506000910152565b60008251611eee818460208701611eb8565b9190910192915050565b6020815260008251806020840152611f17816040850160208701611eb8565b601f01601f1916919091016040019291505056fea26469706673582212200cb1d5b538ec45c97a2651fcff4d01442d1ef5a009ffc0b9a1cd77316958e6c864736f6c63430008150033a26469706673582212202fe110dbcfd0568f14c8ac09baf03a615e7b464484db6014ace44300dfc9779664736f6c63430008150033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002915760003560e01c8063770540681162000161578063a9059cbb11620000d3578063d66cfc771162000092578063d66cfc77146200062e578063dd62ed3e1462000645578063ded438f01462000681578063f2fde38b1462000698578063f7c8546914620006af578063fdad531d14620006c357600080fd5b8063a9059cbb14620005ac578063ab37fbb714620005c3578063b9277d2a14620005da578063ba251fba14620005f1578063cf950022146200060857600080fd5b80638da5cb5b11620001205780638da5cb5b146200052957806395d89b41146200053b578063963d7e911462000545578063969066be146200056d578063a457c2d7146200059557600080fd5b80637705406814620004b457806381f6cf5314620004cb5780638980f11f14620004e25780638c4cc0df14620004f95780638c66d04f146200051257600080fd5b80633950935111620002075780635a3bb98911620001c65780635a3bb98914620004225780635a659d2614620004365780635b30cf55146200044d578063627f66c6146200046757806370a08231146200047e578063715018a614620004aa57600080fd5b80633950935114620003c0578063408555b914620003d7578063472d35b914620003e5578063525e669e14620003fc578063578c71d9146200041357600080fd5b806323b872dd116200025457806323b872dd146200033c578063249d39e9146200035357806329c9aa191462000371578063313ce5671462000388578063318d494e146200039857600080fd5b806306fdde031462000296578063095ea7b314620002b85780630f1cb79214620002e057806318160ddd14620002f95780631d6e077a146200030c575b600080fd5b620002a0620006fa565b604051620002af9190620026cc565b60405180910390f35b620002cf620002c93660046200271e565b62000794565b6040519015158152602001620002af565b620002f7620002f13660046200275a565b620007b0565b005b6003545b604051908152602001620002af565b620003236200031d3660046200277a565b6200082e565b6040516001600160a01b039091168152602001620002af565b620002cf6200034d36600462002794565b62000859565b6200035d61271081565b60405161ffff9091168152602001620002af565b620002f762000382366004620027d5565b62000883565b60405160128152602001620002af565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620002cf620003d13660046200271e565b62000d35565b600654620002cf9060ff1681565b620002f7620003f6366004620027fd565b62000d78565b620002f76200040d3660046200286a565b62000e1c565b600b546200035d9061ffff1681565b600c5462000323906001600160a01b031681565b620002f762000447366004620027fd565b62000f31565b600b5462000323906201000090046001600160a01b031681565b620002f762000478366004620028ba565b62000fad565b620002fd6200048f366004620027fd565b6001600160a01b031660009081526001602052604090205490565b620002f7620010ce565b620002f7620004c5366004620027fd565b62001109565b620002f7620004dc366004620028f6565b6200118f565b620002f7620004f33660046200271e565b62001271565b600654620003239061010090046001600160a01b031681565b620002f762000523366004620027fd565b620012fc565b6000546001600160a01b031662000323565b620002a0620013a8565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620003237f000000000000000000000000000000000000000000000000000000000000000081565b620002cf620005a63660046200271e565b620013b9565b620002cf620005bd3660046200271e565b6200145a565b620002f7620005d43660046200293c565b6200146a565b620002f7620005eb366004620028f6565b620014dc565b620002f762000602366004620027d5565b6200154b565b620002cf62000619366004620027fd565b60096020526000908152604090205460ff1681565b620002f76200063f366004620028f6565b62001a8e565b620002fd6200065636600462002962565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b620002f76200069236600462002794565b62001b70565b620002f7620006a9366004620027fd565b62001c5a565b60075462000323906001600160a01b031681565b62000323620006d43660046200271e565b600a6020908152600092835260408084209091529082529020546001600160a01b031681565b6060600480546200070b906200299a565b80601f016020809104026020016040519081016040528092919081815260200182805462000739906200299a565b80156200078a5780601f106200075e576101008083540402835291602001916200078a565b820191906000526020600020905b8154815290600101906020018083116200076c57829003601f168201915b5050505050905090565b600033620007a481858562001cfc565b60019150505b92915050565b6000546001600160a01b03163314620007e65760405162461bcd60e51b8152600401620007dd90620029d6565b60405180910390fd5b6006805460ff19168215159081179091556040519081527fdd54532339942dad92de40994c97555cc95b2aceb99fdd85a412d20ee0a568b8906020015b60405180910390a150565b600881815481106200083f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000336200086985828562001e1d565b6200087685858562001eae565b60019150505b9392505050565b82600003620008a557604051635972996f60e11b815260040160405180910390fd5b60065460ff1615620008ca5760405163217ca11f60e21b815260040160405180910390fd5b620009016001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308662002086565b336000908152600a602090815260408083208484529091528120546001600160a01b031662000aa357600b54600c546040516000927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b03620100009092048216927f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000921690620009bb9062002619565b6001600160a01b0395861681529385166020850152918416604084015283166060830152909116608082015260a001604051809103906000f08015801562000a07573d6000803e3d6000fd5b50336000818152600a6020908152604080832088845282529182902080546001600160a01b0319166001600160a01b038681169190911790915591518781529395508594507f0000000000000000000000000000000000000000000000000000000000000000909116927fd54b6c27f4639f28e778312a36befbf189631a3587aeb73e182e99c434eb7705910160405180910390a35062000ac9565b50336000908152600a602090815260408083208484529091529020546001600160a01b03165b60405163095ea7b360e01b81526001600160a01b038281166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801562000b39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b5f919062002a0b565b50604051636e553f6560e01b8152600481018590526001600160a01b03848116602483015260009190831690636e553f65906044016020604051808303816000875af115801562000bb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bda919062002a2b565b905062000be83382620020f3565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801562000c50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c76919062002a2b565b9050801562000cb55762000cb56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383620021d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316336001600160a01b03167fe15dc988e072c1d9d056206bf4c2ccd15513ea1197955bdb545e39a4a198f6278960405162000d2591815260200190565b60405180910390a4505050505050565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909190620007a4908290869062000d7290879062002a5b565b62001cfc565b6000546001600160a01b0316331462000da55760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b03811662000dcd5760405163d92e233d60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf5f580614969fb819b8af01f7cc62fe0e0146feaf98d7aee42e76bb0bee8e639060200162000823565b6000546001600160a01b0316331462000e495760405162461bcd60e51b8152600401620007dd90620029d6565b6101f481118062000e5a5750600a81105b1562000e795760405163334ee9a160e01b815260040160405180910390fd5b8160005b8181101562000f2a5784848281811062000e9b5762000e9b62002a71565b905060200201602081019062000eb29190620027fd565b6001600160a01b031663f0fa55a9846040518263ffffffff1660e01b815260040162000ee091815260200190565b600060405180830381600087803b15801562000efb57600080fd5b505af115801562000f10573d6000803e3d6000fd5b50505050808062000f219062002a87565b91505062000e7d565b5050505050565b6000546001600160a01b0316331462000f5e5760405162461bcd60e51b8152600401620007dd90620029d6565b600c80546001600160a01b0319166001600160a01b0383169081179091556040519081527f37151257d8200a9481b623b7ea8cde3f94b92d731cda548bd5fbf63cc87db28c9060200162000823565b6000546001600160a01b0316331462000fda5760405162461bcd60e51b8152600401620007dd90620029d6565b6040516301ffc9a760e01b8152632bee9c0f60e21b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801562001026573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200104c919062002a0b565b6200106a57604051632a4d0ad560e01b815260040160405180910390fd5b6001600160a01b038216600081815260096020908152604091829020805460ff19168515159081179091558251938452908301527f79a58dadb454da39ecff92b439454719a80ea78743990d0f0dd2343a7e7bb91a91015b60405180910390a15050565b6000546001600160a01b03163314620010fb5760405162461bcd60e51b8152600401620007dd90620029d6565b6200110760006200220a565b565b6000546001600160a01b03163314620011365760405162461bcd60e51b8152600401620007dd90620029d6565b600b805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527fd844f74196477aa31314eb2e4779aa16816bb19141ec64e6167696b2c68c908b9060200162000823565b6000546001600160a01b03163314620011bc5760405162461bcd60e51b8152600401620007dd90620029d6565b8060005b818110156200126b57838382818110620011de57620011de62002a71565b9050602002016020810190620011f59190620027fd565b600c5460405163977b91d760e01b81526001600160a01b03918216600482015291169063977b91d790602401600060405180830381600087803b1580156200123c57600080fd5b505af115801562001251573d6000803e3d6000fd5b505050508080620012629062002a87565b915050620011c0565b50505050565b6000546001600160a01b031633146200129e5760405162461bcd60e51b8152600401620007dd90620029d6565b620012b46001600160a01b0383163383620021d8565b816001600160a01b03167f505b28e6941631badc363841ecbf8e1214b9379c643936458e87be718e15799982604051620012f091815260200190565b60405180910390a25050565b6000546001600160a01b03163314620013295760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b038116620013515760405163d92e233d60e01b815260040160405180910390fd5b60068054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fff482b94e6650f33ebd5a4b656f2524de0c552f315fb3270f47aeaef3d72a63e9060200162000823565b6060600580546200070b906200299a565b3360008181526002602090815260408083206001600160a01b038716845290915281205490919083811015620014405760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401620007dd565b6200144f828686840362001cfc565b506001949350505050565b600033620007a481858562001eae565b6000546001600160a01b03163314620014975760405162461bcd60e51b8152600401620007dd90620029d6565b600b805461ffff191661ffff83169081179091556040519081527ff81c5fcf3aecd6806cef1d458fedb8ca3fb79150451dc8c8d1aef6215c4a82d89060200162000823565b6000546001600160a01b03163314620015095760405162461bcd60e51b8152600401620007dd90620029d6565b620015176008838362002627565b507fe1a8a770bbbdcfcba3d04e555cd2aad13f5c7a91e126ee71f5f98bf7405dbecd8282604051620010c292919062002aa3565b826000036200156d5760405163c945242d60e01b815260040160405180910390fd5b336000908152600a602090815260408083208484529091529020546001600160a01b0316620015af57604051636987969160e01b815260040160405180910390fd5b620015bb33846200225a565b60065460ff1615620016be57336000908152600a60209081526040808320848452909152908190205490516329a5c05560e21b81526001600160a01b0384811660048301529091169063a697015490602401600060405180830381600087803b1580156200162857600080fd5b505af11580156200163d573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316336001600160a01b03167f4036930356ede44690c04fdae6fa8e587df3048b8fb1c7e71b2a1e4240d500bf84604051620016b191815260200190565b60405180910390a4505050565b336000908152600a60209081526040808320848452909152908190205490516329380a9b60e11b81526001600160a01b03909116906352701536906200170c90859060089060040162002af3565b600060405180830381600087803b1580156200172757600080fd5b505af11580156200173c573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015620017a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017ce919062002a2b565b905080156200180d576200180d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383620021d8565b600854801562001a1b5760005b8181101562001a19576000600882815481106200183b576200183b62002a71565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa1580156200188f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b5919062002a2b565b9050801562001a0157600654604051633becdb0560e21b81526001600160a01b038981166004830152602482018490526000926101009004169063efb36c1490604401602060405180830381865afa15801562001916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200193c919062002a2b565b600754600880549293506001600160a01b039091169163a033fcd49190879081106200196c576200196c62002a71565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015620019c157600080fd5b505af1158015620019d6573d6000803e3d6000fd5b50505050620019ff888284620019ed919062002b54565b6001600160a01b0386169190620021d8565b505b5050808062001a109062002a87565b9150506200181a565b505b60408051848152602081018490526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929087169133917f64457f6870de47350bc5d046e00ce2360ff6c68a1596f7393a5a680146d38748910160405180910390a450505b505050565b6000546001600160a01b0316331462001abb5760405162461bcd60e51b8152600401620007dd90620029d6565b8060005b818110156200126b5783838281811062001add5762001add62002a71565b905060200201602081019062001af49190620027fd565b600b54604051630ee0a80d60e31b81526001600160a01b036201000090920482166004820152911690637705406890602401600060405180830381600087803b15801562001b4157600080fd5b505af115801562001b56573d6000803e3d6000fd5b50505050808062001b679062002a87565b91505062001abf565b6000546001600160a01b0316331462001b9d5760405162461bcd60e51b8152600401620007dd90620029d6565b604051631171bda960e01b81523360048201526001600160a01b03838116602483015260448201839052841690631171bda990606401600060405180830381600087803b15801562001bee57600080fd5b505af115801562001c03573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167f135171f052c67d036683a0a465a3a0760075fb1402c9387fb0b9ad6e674c38d68360405162001c4d91815260200190565b60405180910390a3505050565b6000546001600160a01b0316331462001c875760405162461bcd60e51b8152600401620007dd90620029d6565b6001600160a01b03811662001cee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620007dd565b62001cf9816200220a565b50565b6001600160a01b03831662001d605760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401620007dd565b6001600160a01b03821662001dc35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401620007dd565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910162001c4d565b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981146200126b578181101562001e9f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401620007dd565b6200126b848484840362001cfc565b6001600160a01b03831662001f145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401620007dd565b6001600160a01b03821662001f785760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401620007dd565b6001600160a01b0383166000908152600160205260409020548181101562001ff25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401620007dd565b6001600160a01b038085166000908152600160205260408082208585039055918516815290812080548492906200202b90849062002a5b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516200207891815260200190565b60405180910390a36200126b565b6040516001600160a01b03808516602483015283166044820152606481018290526200126b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152620023ae565b6001600160a01b0382166200214b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620007dd565b80600360008282546200215f919062002a5b565b90915550506001600160a01b038216600090815260016020526040812080548392906200218e90849062002a5b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03831660248201526044810182905262001a8990849063a9059cbb60e01b90606401620020bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620022bc5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401620007dd565b6001600160a01b03821660009081526001602052604090205481811015620023325760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401620007dd565b6001600160a01b03831660009081526001602052604081208383039055600380548492906200236390849062002b54565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600062002405826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620024879092919063ffffffff16565b80519091501562001a89578080602001905181019062002426919062002a0b565b62001a895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620007dd565b6060620024988484600085620024a0565b949350505050565b606082471015620025035760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620007dd565b6001600160a01b0385163b6200255c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620007dd565b600080866001600160a01b031685876040516200257a919062002b6a565b60006040518083038185875af1925050503d8060008114620025b9576040519150601f19603f3d011682016040523d82523d6000602084013e620025be565b606091505b5091509150620025d0828286620025db565b979650505050505050565b60608315620025ec5750816200087c565b825115620025fd5782518084602001fd5b8160405162461bcd60e51b8152600401620007dd9190620026cc565b6124b58062002b8983390190565b8280548282559060005260206000209081019282156200267d579160200282015b828111156200267d5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019062002648565b506200268b9291506200268f565b5090565b5b808211156200268b576000815560010162002690565b60005b83811015620026c3578181015183820152602001620026a9565b50506000910152565b6020815260008251806020840152620026ed816040850160208701620026a6565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146200271957600080fd5b919050565b600080604083850312156200273257600080fd5b6200273d8362002701565b946020939093013593505050565b801515811462001cf957600080fd5b6000602082840312156200276d57600080fd5b81356200087c816200274b565b6000602082840312156200278d57600080fd5b5035919050565b600080600060608486031215620027aa57600080fd5b620027b58462002701565b9250620027c56020850162002701565b9150604084013590509250925092565b600080600060608486031215620027eb57600080fd5b83359250620027c56020850162002701565b6000602082840312156200281057600080fd5b6200087c8262002701565b60008083601f8401126200282e57600080fd5b50813567ffffffffffffffff8111156200284757600080fd5b6020830191508360208260051b85010111156200286357600080fd5b9250929050565b6000806000604084860312156200288057600080fd5b833567ffffffffffffffff8111156200289857600080fd5b620028a6868287016200281b565b909790965060209590950135949350505050565b60008060408385031215620028ce57600080fd5b620028d98362002701565b91506020830135620028eb816200274b565b809150509250929050565b600080602083850312156200290a57600080fd5b823567ffffffffffffffff8111156200292257600080fd5b62002930858286016200281b565b90969095509350505050565b6000602082840312156200294f57600080fd5b813561ffff811681146200087c57600080fd5b600080604083850312156200297657600080fd5b620029818362002701565b9150620029916020840162002701565b90509250929050565b600181811c90821680620029af57607f821691505b602082108103620029d057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121562002a1e57600080fd5b81516200087c816200274b565b60006020828403121562002a3e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620007aa57620007aa62002a45565b634e487b7160e01b600052603260045260246000fd5b60006001820162002a9c5762002a9c62002a45565b5060010190565b60208082528181018390526000908460408401835b8681101562002ae8576001600160a01b0362002ad48462002701565b168252918301919083019060010162002ab8565b509695505050505050565b60006040820160018060a01b03808616845260206040818601528286548085526060870191508760005282600020945060005b8181101562002b4657855485168352600195860195928401920162002b26565b509098975050505050505050565b81810381811115620007aa57620007aa62002a45565b6000825162002b7e818460208701620026a6565b919091019291505056fe60e06040526000805461ffff60a01b1916601960a21b1790553480156200002557600080fd5b50604051620024b5380380620024b58339810160408190526200004891620003c3565b848383620000563362000356565b6001600160a01b0383166200007e5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216620000a65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038116620000ce5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03838116608081905283821660a081905291831660c05260405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af115801562000132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000158919062000433565b5050506001600160a01b0385169050620001855760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038116620001ad5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b03199081166001600160a01b03878116918217909355600280549092168484161790915560405163095ea7b360e01b8152918716600483015260001960248301529063095ea7b3906044016020604051808303816000875af115801562000223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000249919062000433565b5060a0516001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002d591906200045e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016020604051808303816000875af115801562000324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034a919062000433565b5050505050506200047c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620003be57600080fd5b919050565b600080600080600060a08688031215620003dc57600080fd5b620003e786620003a6565b9450620003f760208701620003a6565b93506200040760408701620003a6565b92506200041760608701620003a6565b91506200042760808701620003a6565b90509295509295909350565b6000602082840312156200044657600080fd5b815180151581146200045757600080fd5b9392505050565b6000602082840312156200047157600080fd5b6200045782620003a6565b60805160a05160c051611f6162000554600039600081816101d10152818161179f015261182701526000818161031c015281816108b5015281816109a901528181610a1e01528181610bbf01528181610dac015281816113b0015281816114e5015281816116d801526117600152600081816102e80152818161043d01528181610535015281816105e101528181610658015281816106e201528181610bff01528181610e9601528181610f100152818161115501528181611200015281816112880152818161138001526114640152611f616000f3fe6080604052600436106101235760003560e01c80638da5cb5b116100a0578063a697015411610064578063a69701541461037e578063ab37fbb71461039e578063bf33a1f5146103be578063f27d1214146103d3578063f2fde38b146103e857600080fd5b80638da5cb5b146102b8578063963d7e91146102d6578063969066be1461030a578063977b91d71461033e578063a30272711461035e57600080fd5b8063578c71d9116100e7578063578c71d9146102135780635a3bb989146102355780636e553f6514610255578063715018a614610283578063770540681461029857600080fd5b80631171bda91461012f5780631afe84c814610151578063249d39e914610196578063318d494e146101bf57806352701536146101f357600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004611bd0565b610408565b005b34801561015d57600080fd5b50610179739e295b5b976a184b14ad8cd72413ad846c29966081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a257600080fd5b506101ac61271081565b60405161ffff909116815260200161018d565b3480156101cb57600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ff57600080fd5b5061014f61020e366004611c27565b6104f3565b34801561021f57600080fd5b506000546101ac90600160a01b900461ffff1681565b34801561024157600080fd5b50600254610179906001600160a01b031681565b34801561026157600080fd5b50610275610270366004611d01565b610b66565b60405190815260200161018d565b34801561028f57600080fd5b5061014f610fe6565b3480156102a457600080fd5b5061014f6102b3366004611d31565b61101c565b3480156102c457600080fd5b506000546001600160a01b0316610179565b3480156102e257600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b506101797f000000000000000000000000000000000000000000000000000000000000000081565b34801561034a57600080fd5b5061014f610359366004611d31565b61109b565b34801561036a57600080fd5b50600154610179906001600160a01b031681565b34801561038a57600080fd5b5061014f610399366004611d31565b611113565b3480156103aa57600080fd5b5061014f6103b9366004611d4e565b6112ef565b3480156103ca57600080fd5b5061014f611369565b3480156103df57600080fd5b5061014f61144a565b3480156103f457600080fd5b5061014f610403366004611d31565b6115bd565b6000546001600160a01b0316331461043b5760405162461bcd60e51b815260040161043290611d72565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361048d5760405163118539e960e01b815260040160405180910390fd5b6104a16001600160a01b0383168483611658565b816001600160a01b0316836001600160a01b03167faca8fb252cde442184e5f10e0f2e6e4029e8cd7717cae63559079610702436aa836040516104e691815260200190565b60405180910390a3505050565b6000546001600160a01b0316331461051d5760405162461bcd60e51b815260040161043290611d72565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a89190611da7565b9050806000036105cb5760405163c945242d60e01b815260040160405180910390fd5b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190611da7565b90508015610709576107096001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611658565b6040516370a0823160e01b8152306004820152600090739e295b5b976a184b14ad8cd72413ad846c299660906370a0823190602401602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190611da7565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190611dc0565b60405163e245b5af60e01b8152600160048201526001600160a01b03919091169063e245b5af90602401602060405180830381865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611da7565b9050600069d3c21bcecceda1000000610886670de0b6b3a764000084611df3565b6108909085611e15565b61089a9190611df3565b6002546000549192506001600160a01b031690630f3aa554907f0000000000000000000000000000000000000000000000000000000000000000908690612710906108f090600160a01b900461ffff1682611e32565b6108fe9061ffff1687611e15565b6109089190611df3565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152602483019190915260448201523360648201526084016020604051808303816000875af1158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611da7565b506040516370a0823160e01b8152306004820152610a459033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611da7565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611658565b84518015610b185760005b81811015610b16576000878281518110610a6c57610a6c611e54565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611da7565b90508015610b0157610b016001600160a01b0383163383611658565b50508080610b0e90611e6a565b915050610a50565b505b610b21876116c0565b6040516001600160a01b03881681527fd8dee34af5e5ded011300c086d6f9738abc8a1362f5a4c27eb0b5f5d9efd6add9060200160405180910390a150505050505050565b600080546001600160a01b03163314610b915760405162461bcd60e51b815260040161043290611d72565b82600003610bb257604051635972996f60e11b815260040160405180910390fd5b610be76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866118ce565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611da7565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190611dc0565b60405163e245b5af60e01b8152600160048201526001600160a01b03919091169063e245b5af90602401602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611da7565b9050600081610d6f87670de0b6b3a7640000611e15565b610d799190611df3565b610d8d9069d3c21bcecceda1000000611e15565b60025460008054929350916001600160a01b039091169063364e2311907f0000000000000000000000000000000000000000000000000000000000000000908a90859061271090610de990600160a01b900461ffff1682611e32565b610df79061ffff1689611e15565b610e019190611df3565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016020604051808303816000875af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190611da7565b60405163b6b55f2560e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015610ee257600080fd5b505af1158015610ef6573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528692507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a0823190602401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611da7565b610f8e9190611e83565b9450610f99866116c0565b856001600160a01b03167fd6dd599afd391d71910ff05250361e65405a896dc557e4e7bf5190b5abbb381688604051610fd491815260200190565b60405180910390a25050505092915050565b6000546001600160a01b031633146110105760405162461bcd60e51b815260040161043290611d72565b61101a6000611906565b565b6000546001600160a01b031633146110465760405162461bcd60e51b815260040161043290611d72565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fd844f74196477aa31314eb2e4779aa16816bb19141ec64e6167696b2c68c908b906020015b60405180910390a150565b6000546001600160a01b031633146110c55760405162461bcd60e51b815260040161043290611d72565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f37151257d8200a9481b623b7ea8cde3f94b92d731cda548bd5fbf63cc87db28c90602001611090565b6000546001600160a01b0316331461113d5760405162461bcd60e51b815260040161043290611d72565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190611da7565b9050806000036111eb5760405163c945242d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611da7565b905080156112af576112af6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611658565b6040516001600160a01b03831681527fd8dee34af5e5ded011300c086d6f9738abc8a1362f5a4c27eb0b5f5d9efd6add9060200160405180910390a15050565b6000546001600160a01b031633146113195760405162461bcd60e51b815260040161043290611d72565b6000805461ffff60a01b1916600160a01b61ffff8416908102919091179091556040519081527f1a89170b7100a37f2e1a8bca9d866cd3f6d666800bfb0fa8dd82f0b2193c926f90602001611090565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044015b6020604051808303816000875af11580156113fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141e9190611e96565b506040517f3aea0c7f8169b9836e3c3e201cc5e2994baa61ae616cd0681a60ae7c9df9c9a690600090a1565b60015460405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af11580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e29190611e96565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b3600260009054906101000a90046001600160a01b03166001600160a01b031663fa6db1bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190611dc0565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260001960248201526044016113db565b6000546001600160a01b031633146115e75760405162461bcd60e51b815260040161043290611d72565b6001600160a01b03811661164c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610432565b61165581611906565b50565b6040516001600160a01b0383166024820152604481018290526116bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611956565b505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190611da7565b90508015611787576117876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611658565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118129190611da7565b9050801561184e5761184e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483611658565b47156116bb576000836001600160a01b03164760405160006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b50509050806118c857604051631d73cefb60e31b815260040160405180910390fd5b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526118c89085906323b872dd60e01b90608401611684565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006119ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a289092919063ffffffff16565b8051909150156116bb57808060200190518101906119c99190611e96565b6116bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610432565b6060611a378484600085611a41565b90505b9392505050565b606082471015611aa25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610432565b6001600160a01b0385163b611af95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b600080866001600160a01b03168587604051611b159190611edc565b60006040518083038185875af1925050503d8060008114611b52576040519150601f19603f3d011682016040523d82523d6000602084013e611b57565b606091505b5091509150611b67828286611b72565b979650505050505050565b60608315611b81575081611a3a565b825115611b915782518084602001fd5b8160405162461bcd60e51b81526004016104329190611ef8565b6001600160a01b038116811461165557600080fd5b8035611bcb81611bab565b919050565b600080600060608486031215611be557600080fd5b8335611bf081611bab565b92506020840135611c0081611bab565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c3a57600080fd5b8235611c4581611bab565b915060208381013567ffffffffffffffff80821115611c6357600080fd5b818601915086601f830112611c7757600080fd5b813581811115611c8957611c89611c11565b8060051b604051601f19603f83011681018181108582111715611cae57611cae611c11565b604052918252848201925083810185019189831115611ccc57600080fd5b938501935b82851015611cf157611ce285611bc0565b84529385019392850192611cd1565b8096505050505050509250929050565b60008060408385031215611d1457600080fd5b823591506020830135611d2681611bab565b809150509250929050565b600060208284031215611d4357600080fd5b8135611a3a81611bab565b600060208284031215611d6057600080fd5b813561ffff81168114611a3a57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611db957600080fd5b5051919050565b600060208284031215611dd257600080fd5b8151611a3a81611bab565b634e487b7160e01b600052601160045260246000fd5b600082611e1057634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611e2c57611e2c611ddd565b92915050565b61ffff828116828216039080821115611e4d57611e4d611ddd565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611e7c57611e7c611ddd565b5060010190565b81810381811115611e2c57611e2c611ddd565b600060208284031215611ea857600080fd5b81518015158114611a3a57600080fd5b60005b83811015611ed3578181015183820152602001611ebb565b50506000910152565b60008251611eee818460208701611eb8565b9190910192915050565b6020815260008251806020840152611f17816040850160208701611eb8565b601f01601f1916919091016040019291505056fea26469706673582212200cb1d5b538ec45c97a2651fcff4d01442d1ef5a009ffc0b9a1cd77316958e6c864736f6c63430008150033a26469706673582212202fe110dbcfd0568f14c8ac09baf03a615e7b464484db6014ace44300dfc9779664736f6c63430008150033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "depositToFortress(uint256,address,uint256)": {
        "details": "If a user has not deposited previously, this function will deploy a FortiFiVectorFortress contract instead of the base FortiFiFortress contract"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRouterForFortresses(address[])": {
        "details": "This function uses the address of the current rewardRouter variable for strategy. Update that first if necessary."
      },
      "setStakedGlpForFortresses(address[])": {
        "details": "This function uses the address of the current stakedGLP variable for strategy. Update that first if necessary."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFromFortress(uint256,address,uint256)": {
        "details": "Override is required because Vector Fortresses need slippage passed in to withdrawal function"
      }
    },
    "title": "GLP FortiFi Strategy contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidDeposit()": [
        {
          "notice": "Error caused by trying to deposit 0"
        }
      ],
      "InvalidSlippage()": [
        {
          "notice": "Error caused when trying to set slippage to invalid value"
        }
      ],
      "InvalidVaultImplementation()": [
        {
          "notice": "Error when vault does not implement ISAMS or IMASS interface (0xafba703c)"
        }
      ],
      "InvalidWithdrawal()": [
        {
          "notice": "Error caused by trying to withdraw 0"
        }
      ],
      "NoFortress()": [
        {
          "notice": "Error caused when trying to withdraw from non-existent fortress"
        }
      ],
      "StrategyBricked()": [
        {
          "notice": "Error caused when trying to deposit to bricked strategy"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error caused by using 0 address as a parameter"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "depositToFortress(uint256,address,uint256)": {
        "notice": "Function to deposit"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Emergency function to recover stuck tokens"
      },
      "recoverFromFortress(address,address,uint256)": {
        "notice": "Emergency function to recover stuck tokens from Fortress"
      },
      "setExtraTokens(address[])": {
        "notice": "Set extra reward tokens for strategy"
      },
      "setFeeCalculator(address)": {
        "notice": "Function to set new FortiFiFeeCalculator contract"
      },
      "setFeeManager(address)": {
        "notice": "Function to set new FortiFiFeeManager contract"
      },
      "setGlpRewardRouter(address)": {
        "notice": "Function to set the GLP Reward Manager"
      },
      "setRewardRouterForFortresses(address[])": {
        "notice": "Function to set the GLP Reward Router Contract in FortiFiGLPFortress contracts. "
      },
      "setSlippage(uint16)": {
        "notice": "Function to set the slippage if 1% is not sufficient"
      },
      "setSlippageForFortresses(address[],uint256)": {
        "notice": "Function to set slippage for FortiFiFortress contracts"
      },
      "setStakedGlp(address)": {
        "notice": "Function to set the Staked GLP Contract"
      },
      "setStakedGlpForFortresses(address[])": {
        "notice": "Function to set the Staked GLP Contract in FortiFiGLPFortress contracts. "
      },
      "setStrategyBricked(bool)": {
        "notice": "Set strategy as bricked"
      },
      "setVault(address,bool)": {
        "notice": "Set valid vaults"
      },
      "withdrawFromFortress(uint256,address,uint256)": {
        "notice": "Function to withdraw"
      }
    },
    "notice": "This contract allows for FortiFi vaults to utilize GLP strategies by minting GLP with USDC and depositing into a  simple vault like Yield Yak",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 126,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 128,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 3094,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "strategyIsBricked",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 3100,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "feeCalc",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(IFortiFiFeeCalculator)1349"
      },
      {
        "astId": 3103,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "feeMgr",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IFortiFiFeeManager)1360"
      },
      {
        "astId": 3106,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "extraTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3110,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "isFortiFiVault",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3116,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "vaultToTokenToFortress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2480,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "slippageBps",
        "offset": 0,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 2486,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "stakedGLP",
        "offset": 2,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2489,
        "contract": "contracts/strategies/FortiFiGLPStrategy.sol:FortiFiGLPStrategy",
        "label": "rewardRouter",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFortiFiFeeCalculator)1349": {
        "encoding": "inplace",
        "label": "contract IFortiFiFeeCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IFortiFiFeeManager)1360": {
        "encoding": "inplace",
        "label": "contract IFortiFiFeeManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}